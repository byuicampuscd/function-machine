"use strict";$(document).ready(function(){$.getJSON("../funcMachineSettings.json",function(n){window.professorConfigFile=n,$.each(n,function(n,e){var o=$("<option></option>").append(e.name);$(o).val(e.equation),$("select").append(o),0===n&&changePlot(e.equation)})})});
"use strict";function startFuncMach(){var n=$("input[type='number']"),e=$("#animate:checked").length>0,t=$("#showGraph:checked").length>0;({callback:fun,animate:e,showGraph:t,equation:"3x+2",window:{x:{min:-10,max:10},y:{min:-10,max:10}}});console.log(e,t),$.each(n,function(n,e){console.log(n,1*$(e).val())})}function changePlot(n){console.log(professorConfigFile[0].equation,n),$.each(professorConfigFile,function(e,t){console.log(t.equation,n),t.equation===n}),$(o).empty("");var e="y = ",t=""+n,o=$("#functionMachine #equ"),c=$("#functionMachine #y");katex.render(e,c[0]),katex.render(t,o[0])}$("select").change(function(n){changePlot(n.target.value)}),$(document).keypress(function(n){13==n.which&&startFuncMach()}),$("input[type='button'][value='Go!']").click(function(){startFuncMach()});
"use strict";
"use strict";
"use strict";!function(){for(var t,p,d,n,r=$("tbody"),a=19,e=1;e<=a;e++)n=$("<input>"),t=$("<td></td>"),p=$("<td></td>"),d=$("<tr></tr>"),$(d).attr("id","row"+e),$(n).attr("name","input"+e).attr("type","number"),$(t).append(n),$(d).append(t).append(p),$(r).append(d)}();
//# sourceMappingURL=data:application/json;base64,
