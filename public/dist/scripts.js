"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol?"symbol":typeof t};!function(t,e){t.wand=e()}("undefined"!=typeof window?window:void 0,function(){var t={apndr:function(t,e){if("object"!==("undefined"==typeof t?"undefined":_typeof(t))||"object"!==("undefined"==typeof e?"undefined":_typeof(e))||Array.isArray(e))if("object"!==("undefined"==typeof t?"undefined":_typeof(t)))console.error("First parameter passed is not an object element.");else if("object"!==("undefined"==typeof e?"undefined":_typeof(e)))"string"!=typeof e&&"number"!=typeof e||t.appendChild(this.txt(e));else if(Array.isArray(e))for(var r=e,n=0;n<r.length;n++)this.apndr(t,r[n]);else console.error("Parameters are not compatible in the lib.apndr function.  Hit the arrow on the left for call stack.");else t.appendChild(e)},querApndr:function(t,e,r){var n=document.querySelector(t);if(null!=n){if(Array.isArray(e))for(var o=e,i=0;i<o.length;i++)this.apndr(n,this.crtElm(o[i]));else r?this.apndr(n,this.crtElm(e,r)):this.apndr(n,e);return n}console.error("No tag exists in the DOM. Hit the arrow on the left for call stack.")},querAttr:function(t,e,r){var n=document.querySelector(t);null==n?console.error("No tag exists in the DOM. Hit the arrow on the left for call stack."):e&&n.setAttribute(e,r)},txt:function(t){return"string"==typeof t?document.createTextNode(t):"number"==typeof t?document.createTextNode(t.toString()):void console.error("Parameter passed to lib.txt is not a string nor a number.  Hit the arrow on the left for call stack.")},crtElm:function(t,e){var r,n=document.createElement(t);return e&&("string"==typeof e?(r=this.txt(e),this.apndr(n,r)):console.error("Must pass a string as the second param in lib.crtElm function.  Hit the arrow on the left for call stack.")),n}};return t});
"use strict";function changePlot(n){equPara.innerText="",katex.render("y = "+n,equPara),globalEqu=n}function dispConfig(n){var e=JSON.parse(n),a=wand.crtElm("select");a.name="equDrop";for(var o=0;o<e.length;o++){var t=wand.crtElm("option",e[o].name);t.value=e[o].equation,wand.apndr(a,t),wand.querApndr("#dropdown",a),0===o&&changePlot(e[o].equation)}}function loadConfig(n,e){var a=new XMLHttpRequest;a.onreadystatechange=function(){4==a.readyState&&200==a.status&&(config=a.responseText,n(config))},a.open("GET",e,!0),a.send()}var config,globalEqu,equPara=wand.querApndr("#functionMachine p");loadConfig(dispConfig,"../funcMachineSettings.json");
"use strict";function toFuncMachEnd(n){var t=globalEqu.replace("x","*"+n.target.innerText);equPara.innerText="",katex.render("y = "+t,equPara),console.log(statusBar),wand.apndr(statusBar,">> Calculating"),setTimeout(function(){var n=math.eval(t);equPara.innerText="",katex.render("y = "+n.toString(),equPara)},2e3)}function animeToFuncMach(n,t,e,a){var r=t.right-50,o=t.top+7;return n.style.position="absolute",n.style.top=o+"px",n.style.left=r+"px",n.className="anime"+e,lastSheet.insertRule("@keyframes toFuncMachine"+e+" {\n                            0% {\n                                opacity: 0;\n                                top: "+o+"px;\n                                left: "+r+"px;\n                            }\n                            10% {\n                                opacity: 1;\n                            }\n                            33% {\n                                top: "+o+"px;\n                                left: 240px;\n                            }\n                            66% {\n                                top: 55px;\n                                left: 240px;\n                            }\n                            90% {\n                                opacity: 1;\n                            }\n                            100% {\n                                opacity: 0;\n                                top: 55px;\n                                left: 300px;\n                            }\n                        }",lastSheet.cssRules.length),n.style.animation="toFuncMachine"+e+" 3s ease-in-out "+a[0]+"s 1",n.style.opacity="0",n.style.zIndex="100",n.addEventListener("animationend",toFuncMachEnd),n}function animator(n){var t=wand.querApndr("#numContainer");t.innerHTML="";for(var e=0;e<n.length;e++){var a=wand.crtElm("p",n[e].num),r=animeToFuncMach(a,n[e].coorData,alphaid[e],[e]);wand.apndr(t,r)}}var lastSheet=document.styleSheets[document.styleSheets.length-1],alphaid=["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r"],statusBar=wand.querApndr("#status p");
"use strict";!function(){var n=["input1","input2","input3","input4","input5","input6","input7","input8","input9","input10","input11","input12","input13","input14","input15","input16","input17","input18","input19"],t=[];document.onchange=function(n){"select"===n.target.localName&&(changePlot(n.target.value),console.log(globalEqu))},document.onclick=function(u){if("Go!"===u.target.value){t=[];for(var i=0;i<n.length;i++){var a=wand.querApndr("[name='"+n[i]+"']");if(a.value){var e={};e.coorData=a.getBoundingClientRect(),e.num=a.value,t.push(e)}}animator(t)}}}();
"use strict";!function(){for(var n,d,r,t,a=wand.querApndr("tbody"),w=19,p=1;w>=p;p++)t=wand.crtElm("input"),n=wand.crtElm("td"),d=wand.crtElm("td"),r=wand.crtElm("tr"),t.name="input"+p,t.type="number",wand.apndr(n,t),wand.apndr(r,[n,d]),wand.apndr(a,r)}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndhbmQuanMiLCJhamF4LmpzIiwiYW5pbWF0b3IuanMiLCJldmVudHMuanMiLCJtYWluLmpzIl0sIm5hbWVzIjpbIl90eXBlb2YiLCJTeW1ib2wiLCJpdGVyYXRvciIsIm9iaiIsImNvbnN0cnVjdG9yIiwiZ2xvIiwibGliIiwid2FuZCIsIndpbmRvdyIsInVuZGVmaW5lZCIsImFwbmRyIiwiYSIsImIiLCJBcnJheSIsImlzQXJyYXkiLCJjb25zb2xlIiwiZXJyb3IiLCJhcHBlbmRDaGlsZCIsInRoaXMiLCJ0eHQiLCJhcnIiLCJpIiwibGVuZ3RoIiwicXVlckFwbmRyIiwiYyIsImVsZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImNydEVsbSIsInF1ZXJBdHRyIiwic2V0QXR0cmlidXRlIiwiY3JlYXRlVGV4dE5vZGUiLCJ0b1N0cmluZyIsImNyZWF0ZUVsZW1lbnQiLCJjaGFuZ2VQbG90IiwidmFsIiwiZXF1UGFyYSIsImlubmVyVGV4dCIsImthdGV4IiwicmVuZGVyIiwiZ2xvYmFsRXF1IiwiZGlzcENvbmZpZyIsInBhcnNlZE9iaiIsIkpTT04iLCJwYXJzZSIsInNlbGVjdCIsIm5hbWUiLCJvcHQiLCJ2YWx1ZSIsImVxdWF0aW9uIiwibG9hZENvbmZpZyIsImZ1bmMiLCJzZWFyY2giLCJ4aHR0cCIsIlhNTEh0dHBSZXF1ZXN0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInN0YXR1cyIsImNvbmZpZyIsInJlc3BvbnNlVGV4dCIsIm9wZW4iLCJzZW5kIiwidG9GdW5jTWFjaEVuZCIsImUiLCJjaGFuZ2VFcXUiLCJyZXBsYWNlIiwidGFyZ2V0IiwibG9nIiwic3RhdHVzQmFyIiwic2V0VGltZW91dCIsImV2YWxOdW0iLCJtYXRoIiwiZXZhbCIsImFuaW1lVG9GdW5jTWFjaCIsIm51bWUiLCJhdyIsImlkIiwiZGVsYXkiLCJsZWZ0Q29vck9mZiIsInJpZ2h0IiwidG9wQ29vck9mZiIsInRvcCIsInN0eWxlIiwicG9zaXRpb24iLCJsZWZ0IiwiY2xhc3NOYW1lIiwibGFzdFNoZWV0IiwiaW5zZXJ0UnVsZSIsImNzc1J1bGVzIiwiYW5pbWF0aW9uIiwib3BhY2l0eSIsInpJbmRleCIsImFkZEV2ZW50TGlzdGVuZXIiLCJhbmltYXRvciIsIm51bUNvbnRhaW5lciIsImlubmVySFRNTCIsIm51bSIsIm51bVdpdGhBbmltZSIsImNvb3JEYXRhIiwiYWxwaGFpZCIsInN0eWxlU2hlZXRzIiwiaW5wdXRPcHQiLCJhbmltYXRlV2FpdCIsIm9uY2hhbmdlIiwibG9jYWxOYW1lIiwib25jbGljayIsImlucHV0IiwiYW5pRGF0YSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInB1c2giLCJ0ZDEiLCJ0ZDIiLCJ0ciIsInRib2R5Iiwicm93Q291bnQiLCJqIiwidHlwZSJdLCJtYXBwaW5ncyI6IkFBQUEsWUFFQSxJQUFJQSxTQUE0QixrQkFBWEMsU0FBb0QsZ0JBQXBCQSxRQUFPQyxTQUF3QixTQUFVQyxHQUFPLGFBQWNBLElBQVMsU0FBVUEsR0FBTyxNQUFPQSxJQUF5QixrQkFBWEYsU0FBeUJFLEVBQUlDLGNBQWdCSCxPQUFTLGVBQWtCRSxLQUl6TyxTQUFVRSxFQUFLQyxHQUNaRCxFQUFJRSxLQUFPRCxLQUNLLG1CQUFYRSxRQUF5QkEsT0FBaENDLE9BQStDLFdBQzdDLEdBQUlILElBQ0FJLE1BQU8sU0FBVUMsRUFBR0MsR0FDaEIsR0FBaUIsWUFBYixtQkFBT0QsR0FBUCxZQUFBWCxRQUFPVyxLQUErQixZQUFiLG1CQUFPQyxHQUFQLFlBQUFaLFFBQU9ZLEtBQW1CQyxNQUFNQyxRQUFRRixHQUU5RCxHQUFpQixZQUFiLG1CQUFPRCxHQUFQLFlBQUFYLFFBQU9XLElBQ2RJLFFBQVFDLE1BQU0sd0RBQ1gsSUFBaUIsWUFBYixtQkFBT0osR0FBUCxZQUFBWixRQUFPWSxJQUNHLGdCQUFOQSxJQUErQixnQkFBTkEsSUFDaENELEVBQUVNLFlBQVlDLEtBQUtDLElBQUlQLFFBRXhCLElBQUlDLE1BQU1DLFFBQVFGLEdBRXJCLElBQUssR0FERFEs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KioqKioqKioqKioqKipcblxuVGhpcyBpcyBhIGN1c3RvbSBsaWJyYXJ5IHRoYXQgSSBtYWRlIHRvIG1ha2UgRE9NIG1hbmlwdWxhdGlvbiBhIGxpdHRsZSBiaXQgZmFzdGVyXG5cbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4oZnVuY3Rpb24gKGdsbywgbGliKSB7XG4gICAgZ2xvLndhbmQgPSBsaWIoKTtcbn0odHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbGliID0ge1xuICAgICAgICBhcG5kcjogZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgYiA9PT0gXCJvYmplY3RcIiAmJiAhQXJyYXkuaXNBcnJheShiKSkge1xuICAgICAgICAgICAgICAgIGEuYXBwZW5kQ2hpbGQoYik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkZpcnN0IHBhcmFtZXRlciBwYXNzZWQgaXMgbm90IGFuIG9iamVjdCBlbGVtZW50LlwiKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGIgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGIgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIGIgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgYS5hcHBlbmRDaGlsZCh0aGlzLnR4dChiKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGIpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyciA9IGI7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcG5kcihhLCBhcnJbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIlBhcmFtZXRlcnMgYXJlIG5vdCBjb21wYXRpYmxlIGluIHRoZSBsaWIuYXBuZHIgZnVuY3Rpb24uICBIaXQgdGhlIGFycm93IG9uIHRoZSBsZWZ0IGZvciBjYWxsIHN0YWNrLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcXVlckFwbmRyOiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgICAgICAgdmFyIGVsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYSk7XG4gICAgICAgICAgICBpZiAoZWxlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiTm8gdGFnIGV4aXN0cyBpbiB0aGUgRE9NLiBIaXQgdGhlIGFycm93IG9uIHRoZSBsZWZ0IGZvciBjYWxsIHN0YWNrLlwiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYikpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFyciA9IGI7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFwbmRyKGVsZSwgdGhpcy5jcnRFbG0oYXJyW2ldKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcG5kcihlbGUsIHRoaXMuY3J0RWxtKGIsIGMpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFwbmRyKGVsZSwgYilcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcXVlckF0dHI6IGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICAgICAgICB2YXIgZWxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihhKTtcbiAgICAgICAgICAgIGlmIChlbGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJObyB0YWcgZXhpc3RzIGluIHRoZSBET00uIEhpdCB0aGUgYXJyb3cgb24gdGhlIGxlZnQgZm9yIGNhbGwgc3RhY2suXCIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoYikge1xuICAgICAgICAgICAgICAgICAgICBlbGUuc2V0QXR0cmlidXRlKGIsIGMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdHh0OiBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBhID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGEpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShhLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiUGFyYW1ldGVyIHBhc3NlZCB0byBsaWIudHh0IGlzIG5vdCBhIHN0cmluZyBub3IgYSBudW1iZXIuICBIaXQgdGhlIGFycm93IG9uIHRoZSBsZWZ0IGZvciBjYWxsIHN0YWNrLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY3J0RWxtOiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgdmFyIGVsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoYSksXG4gICAgICAgICAgICAgICAgdHh0O1xuICAgICAgICAgICAgaWYgKGIpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGIgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdHh0ID0gdGhpcy50eHQoYik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBuZHIoZWxlLCB0eHQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJNdXN0IHBhc3MgYSBzdHJpbmcgYXMgdGhlIHNlY29uZCBwYXJhbSBpbiBsaWIuY3J0RWxtIGZ1bmN0aW9uLiAgSGl0IHRoZSBhcnJvdyBvbiB0aGUgbGVmdCBmb3IgY2FsbCBzdGFjay5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGVsZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbGliO1xufSkpO1xuIiwiICAgIHZhciBjb25maWcsXG4gICAgICAgIGdsb2JhbEVxdSxcbiAgICAgICAgZXF1UGFyYSA9IHdhbmQucXVlckFwbmRyKFwiI2Z1bmN0aW9uTWFjaGluZSBwXCIpO1xuXG4vL0RpcHNsYXkgS2F0ZXggZXF1YXRpb25cbiAgICBmdW5jdGlvbiBjaGFuZ2VQbG90KHZhbCkge1xuICAgICAgICBlcXVQYXJhLmlubmVyVGV4dCA9IFwiXCI7XG4gICAgICAgIGthdGV4LnJlbmRlcihgeSA9ICR7dmFsfWAsIGVxdVBhcmEpO1xuICAgICAgICBnbG9iYWxFcXUgPSB2YWw7XG4gICAgfVxuXG4gICAgLypBSkFYIFJFUVVFU1QgVE8gRlVOQ01BQ0hJTkVTRVRUSU5HUy5KUyBBTkQgTE9BRCovXG4gICAgZnVuY3Rpb24gZGlzcENvbmZpZyhjKSB7XG4gICAgICAgIHZhciBwYXJzZWRPYmogPSBKU09OLnBhcnNlKGMpLFxuICAgICAgICAgICAgc2VsZWN0ID0gd2FuZC5jcnRFbG0oXCJzZWxlY3RcIik7XG4gICAgICAgIHNlbGVjdC5uYW1lID0gXCJlcXVEcm9wXCI7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyc2VkT2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgb3B0ID0gd2FuZC5jcnRFbG0oXCJvcHRpb25cIiwgcGFyc2VkT2JqW2ldLm5hbWUpO1xuICAgICAgICAgICAgb3B0LnZhbHVlID0gcGFyc2VkT2JqW2ldLmVxdWF0aW9uO1xuLy8gICAgICAgICAgb3B0LmNsYXNzID0gSlNPTi5zdHJpbmdpZnkocGFyc2VkT2JqW2ldLndpbmRvdyk7XG4gICAgICAgICAgICB3YW5kLmFwbmRyKHNlbGVjdCwgb3B0KTtcbiAgICAgICAgICAgIHdhbmQucXVlckFwbmRyKFwiI2Ryb3Bkb3duXCIsIHNlbGVjdCk7XG4gICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGNoYW5nZVBsb3QocGFyc2VkT2JqW2ldLmVxdWF0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuLy9Mb2FkIGluIHRoZSBjb25maWd1cmF0aW9uIGZpbGVcbiAgICBmdW5jdGlvbiBsb2FkQ29uZmlnKGZ1bmMsIHNlYXJjaCkge1xuICAgICAgICB2YXIgeGh0dHAgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgeGh0dHAub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHhodHRwLnJlYWR5U3RhdGUgPT0gNCAmJiB4aHR0cC5zdGF0dXMgPT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnID0geGh0dHAucmVzcG9uc2VUZXh0O1xuICAgICAgICAgICAgICAgIGZ1bmMoY29uZmlnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgeGh0dHAub3BlbihcIkdFVFwiLCBzZWFyY2gsIHRydWUpO1xuICAgICAgICB4aHR0cC5zZW5kKCk7XG4gICAgfVxuXG4gICAgbG9hZENvbmZpZyhkaXNwQ29uZmlnLCBcIi4uL2Z1bmNNYWNoaW5lU2V0dGluZ3MuanNvblwiKTtcbiIsInZhciBsYXN0U2hlZXQgPSBkb2N1bWVudC5zdHlsZVNoZWV0c1tkb2N1bWVudC5zdHlsZVNoZWV0cy5sZW5ndGggLSAxXTtcblxuLy9UT0RPOiBGdW5jdGlvbiBtYWNoaW5lIGluXG5cbi8vQWxwaGEgSUQgaXMgdG8gaWRlbnRpZnkgdGhlIDE1IGRpZmZlcmVudCBhbmltYXRpb25zIHRoYXQgY291bGQgaGFwcGVuIGluIHRoZSBhcHBsaWNhdGlvblxudmFyIGFscGhhaWQgPSBbJ2EnLCAnYicsICdjJywgJ2QnLCAnZScsICdmJywgJ2cnLCAnaCcsICdpJywgJ2onLCAnaycsICdsJywgJ20nLCAnbicsICdvJywgJ3AnLCAncScsICdyJ10sXG4gICAgc3RhdHVzQmFyID0gd2FuZC5xdWVyQXBuZHIoXCIjc3RhdHVzIHBcIik7XG5cbi8vQ2hhbmdlIHRoZSBLYXRleCBlcXVhdGlvbiBmcm9tIHRoZSBzZWxlY3RlZCBpbnB1dCBib3guXG5mdW5jdGlvbiB0b0Z1bmNNYWNoRW5kKGUpIHtcbiAgICAvL2dsb2JhbEVxdSBhbmQgZXF1UGFyYSBhc3NpZ25lZCBpbiBhamF4LmpzXG4gICAgdmFyIGNoYW5nZUVxdSA9IGdsb2JhbEVxdS5yZXBsYWNlKFwieFwiLCBgKiR7ZS50YXJnZXQuaW5uZXJUZXh0fWApO1xuICAgIGVxdVBhcmEuaW5uZXJUZXh0ID0gXCJcIjtcbiAgICBrYXRleC5yZW5kZXIoYHkgPSAke2NoYW5nZUVxdX1gLCBlcXVQYXJhKTtcblxuICAgIGNvbnNvbGUubG9nKHN0YXR1c0Jhcik7XG4vLyAgICBzdGF0dXMuaW5uZXJUZXh0ID0gXCJcIjtcbiAgICB3YW5kLmFwbmRyKHN0YXR1c0JhciwgXCI+PiBDYWxjdWxhdGluZ1wiKTtcblxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAvL0V2YWx1YXRlIHRoZSBtYXRoIGV4cHJlc3Npb24gYW5kIGFuaW1hdGUgaXRcbiAgICAgICAgdmFyIGV2YWxOdW0gPSBtYXRoLmV2YWwoY2hhbmdlRXF1KTtcbiAgICAgICAgZXF1UGFyYS5pbm5lclRleHQgPSBcIlwiO1xuICAgICAgICBrYXRleC5yZW5kZXIoYHkgPSAke2V2YWxOdW0udG9TdHJpbmcoKX1gLCBlcXVQYXJhKTtcbiAgICB9LCAyMDAwKTtcbn1cblxuLy9EeW5hbWljYWxseSBtb2RpZnkgdGhlIENTUyBhbmltYXRpb25zIG9mIHRoZSAxNSBpbnB1dCBib3hlc1xuZnVuY3Rpb24gYW5pbWVUb0Z1bmNNYWNoKG51bWUsIGF3LCBpZCwgZGVsYXkpIHtcbiAgICB2YXIgbGVmdENvb3JPZmYgPSBhdy5yaWdodCAtIDUwLFxuICAgICAgICB0b3BDb29yT2ZmID0gYXcudG9wICsgNztcblxuICAgIG51bWUuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgbnVtZS5zdHlsZS50b3AgPSBgJHt0b3BDb29yT2ZmfXB4YDtcbiAgICBudW1lLnN0eWxlLmxlZnQgPSBgJHtsZWZ0Q29vck9mZn1weGA7XG4gICAgbnVtZS5jbGFzc05hbWUgPSBgYW5pbWUke2lkfWBcblxuICAgIGxhc3RTaGVldC5pbnNlcnRSdWxlKGBAa2V5ZnJhbWVzIHRvRnVuY01hY2hpbmUke2lkfSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMCUge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6ICR7dG9wQ29vck9mZn1weDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogJHtsZWZ0Q29vck9mZn1weDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMTAlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMzMlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAke3RvcENvb3JPZmZ9cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IDI0MHB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA2NiUge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6IDU1cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IDI0MHB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA5MCUge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMDAlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiA1NXB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAzMDBweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9YCwgbGFzdFNoZWV0LmNzc1J1bGVzLmxlbmd0aCk7XG5cbiAgICBudW1lLnN0eWxlLmFuaW1hdGlvbiA9IGB0b0Z1bmNNYWNoaW5lJHtpZH0gM3MgZWFzZS1pbi1vdXQgJHtkZWxheVswXX1zIDFgO1xuXG4gICAgbnVtZS5zdHlsZS5vcGFjaXR5ID0gJzAnO1xuICAgIG51bWUuc3R5bGUuekluZGV4ID0gJzEwMCc7XG5cbiAgICBudW1lLmFkZEV2ZW50TGlzdGVuZXIoXCJhbmltYXRpb25lbmRcIiwgdG9GdW5jTWFjaEVuZCk7XG5cbiAgICByZXR1cm4gbnVtZTtcbn1cblxuLy9IYW5kbGUgYWxsIENTUyBhbmltYXRpb25zXG5mdW5jdGlvbiBhbmltYXRvcihhdykge1xuICAgIHZhciBudW1Db250YWluZXIgPSB3YW5kLnF1ZXJBcG5kcihcIiNudW1Db250YWluZXJcIik7XG4gICAgbnVtQ29udGFpbmVyLmlubmVySFRNTCA9IFwiXCI7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGF3Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBudW1lID0gd2FuZC5jcnRFbG0oXCJwXCIsIGF3W2ldLm51bSk7XG5cbiAgICAgICAgdmFyIG51bVdpdGhBbmltZSA9IGFuaW1lVG9GdW5jTWFjaChudW1lLCBhd1tpXS5jb29yRGF0YSwgYWxwaGFpZFtpXSwgW2ldKTtcbiAgICAgICAgd2FuZC5hcG5kcihudW1Db250YWluZXIsIG51bVdpdGhBbmltZSk7XG4gICAgfVxufVxuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIC8vcmVnaXN0ZXIgYWxsIGlucHV0cyBvbiB0aGUgYXBwbGljYXRpb25cbiAgICB2YXIgaW5wdXRPcHQgPSBbXCJpbnB1dDFcIiwgXCJpbnB1dDJcIiwgXCJpbnB1dDNcIiwgXCJpbnB1dDRcIiwgXCJpbnB1dDVcIiwgXCJpbnB1dDZcIiwgXCJpbnB1dDdcIiwgXCJpbnB1dDhcIiwgXCJpbnB1dDlcIiwgXCJpbnB1dDEwXCIsIFwiaW5wdXQxMVwiLCBcImlucHV0MTJcIiwgXCJpbnB1dDEzXCIsIFwiaW5wdXQxNFwiLCBcImlucHV0MTVcIiwgXCJpbnB1dDE2XCIsIFwiaW5wdXQxN1wiLCBcImlucHV0MThcIiwgXCJpbnB1dDE5XCJdLFxuICAgICAgICBhbmltYXRlV2FpdCA9IFtdO1xuXG4gICAgLyoqKipET0NVTUVOVCBPTkNIQU5HRSBFVkVOVCBIQU5ETEVSKioqKi9cbiAgICBkb2N1bWVudC5vbmNoYW5nZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmIChlLnRhcmdldC5sb2NhbE5hbWUgPT09IFwic2VsZWN0XCIpIHtcbiAgICAgICAgICAgIC8vY2hhbmdlUGxvdCBmdW5jdGlvbiBpbiBhamF4LmpzXG4gICAgICAgICAgICBjaGFuZ2VQbG90KGUudGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGdsb2JhbEVxdSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqKioqRE9DVU1FTlQgQ0xJQ0sgSEFORExFUioqKioqL1xuICAgIGRvY3VtZW50Lm9uY2xpY2sgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAoZS50YXJnZXQudmFsdWUgPT09IFwiR28hXCIpIHtcbiAgICAgICAgICAgIGFuaW1hdGVXYWl0ID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlucHV0T3B0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gd2FuZC5xdWVyQXBuZHIoYFtuYW1lPScke2lucHV0T3B0W2ldfSddYCk7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhbmlEYXRhID0ge307XG4gICAgICAgICAgICAgICAgICAgIGFuaURhdGEuY29vckRhdGEgPSBpbnB1dC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgYW5pRGF0YS5udW0gPSBpbnB1dC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZVdhaXQucHVzaChhbmlEYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmltYXRvcihhbmltYXRlV2FpdCk7XG4gICAgICAgIH1cbiAgICB9O1xufSgpKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICAvKioqKlRBQkxFIE1BS0VSKioqKi9cbiAgICB2YXIgdGJvZHkgPSB3YW5kLnF1ZXJBcG5kcihcInRib2R5XCIpLFxuICAgICAgICB0ZDEsXG4gICAgICAgIHRkMixcbiAgICAgICAgdHIsXG4gICAgICAgIGlucHV0LFxuICAgICAgICByb3dDb3VudCA9IDE5O1xuXG4gICAgZm9yICh2YXIgaiA9IDE7IGogPD0gcm93Q291bnQ7IGorKykge1xuICAgICAgICBpbnB1dCA9IHdhbmQuY3J0RWxtKFwiaW5wdXRcIik7XG4gICAgICAgIHRkMSA9IHdhbmQuY3J0RWxtKFwidGRcIik7XG4gICAgICAgIHRkMiA9IHdhbmQuY3J0RWxtKFwidGRcIik7XG4gICAgICAgIHRyID0gd2FuZC5jcnRFbG0oXCJ0clwiKTtcblxuICAgICAgICBpbnB1dC5uYW1lID0gYGlucHV0JHtqfWA7XG4gICAgICAgIGlucHV0LnR5cGUgPSAnbnVtYmVyJztcblxuICAgICAgICB3YW5kLmFwbmRyKHRkMSwgaW5wdXQpO1xuICAgICAgICB3YW5kLmFwbmRyKHRyLCBbdGQxLCB0ZDJdKTtcbiAgICAgICAgd2FuZC5hcG5kcih0Ym9keSwgdHIpO1xuICAgIH1cbn0oKSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
