"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol?"symbol":typeof t};!function(t,e){t.wand=e()}("undefined"!=typeof window?window:void 0,function(){var t={apndr:function(t,e){if("object"!==("undefined"==typeof t?"undefined":_typeof(t))||"object"!==("undefined"==typeof e?"undefined":_typeof(e))||Array.isArray(e))if("object"!==("undefined"==typeof t?"undefined":_typeof(t)))console.error("First parameter passed is not an object element.");else if("object"!==("undefined"==typeof e?"undefined":_typeof(e)))"string"!=typeof e&&"number"!=typeof e||t.appendChild(this.txt(e));else if(Array.isArray(e))for(var r=e,n=0;n<r.length;n++)this.apndr(t,r[n]);else console.error("Parameters are not compatible in the lib.apndr function.  Hit the arrow on the left for call stack.");else t.appendChild(e)},querApndr:function(t,e,r){var n=document.querySelector(t);if(null!=n){if(Array.isArray(e))for(var o=e,i=0;i<o.length;i++)this.apndr(n,this.crtElm(o[i]));else r?this.apndr(n,this.crtElm(e,r)):this.apndr(n,e);return n}console.error("No tag exists in the DOM. Hit the arrow on the left for call stack.")},querAttr:function(t,e,r){var n=document.querySelector(t);null==n?console.error("No tag exists in the DOM. Hit the arrow on the left for call stack."):e&&n.setAttribute(e,r)},txt:function(t){return"string"==typeof t?document.createTextNode(t):"number"==typeof t?document.createTextNode(t.toString()):void console.error("Parameter passed to lib.txt is not a string nor a number.  Hit the arrow on the left for call stack.")},crtElm:function(t,e){var r,n=document.createElement(t);return e&&("string"==typeof e?(r=this.txt(e),this.apndr(n,r)):console.error("Must pass a string as the second param in lib.crtElm function.  Hit the arrow on the left for call stack.")),n}};return t});
"use strict";function changePlot(n){equPara.innerText="";var a="y = ",e=""+n;katex.render(a,yPara),katex.render(e,equPara),globalEqu=n,graphConfig.equation=e}function dispConfig(n){var a=JSON.parse(n),e=wand.crtElm("select");e.name="equDrop";for(var o=0;o<a.length;o++){var r=wand.crtElm("option",a[o].name);r.value=a[o].equation,wand.apndr(e,r),wand.querApndr("#dropdown",e),0===o&&changePlot(a[o].equation)}}function loadConfig(n,a){var e=new XMLHttpRequest;e.onreadystatechange=function(){4==e.readyState&&200==e.status&&(config=e.responseText,n(config),graphConfig.appConfig=JSON.parse(config))},e.open("GET",a,!0),e.send()}var config,globalEqu,equPara=wand.querApndr("#functionMachine #equ"),yPara=wand.querApndr("#functionMachine #y"),graphConfig={};loadConfig(dispConfig,"../funcMachineSettings.json");
"use strict";function aniConfig(t,n,e,a,o){var r={};return r.begCoorData=t,r.endCoorData=n,r.num=e,r.alphaid=a,r.delay=o,r}function animationTemplate(t){var n=t.begCoorData.top+5,e=t.begCoorData.right-30,a=t.endCoorData.top,o=t.endCoorData.right,r=246,i=wand.querApndr("#numContainer");return t.num.style.position="absolute",t.num.style.top=n+"px",t.num.style.left=e+"px",wand.apndr(i,t.num),lastSheet.insertRule("@keyframes toFuncMachine"+t.alphaid+" {\n                            0% {\n                                opacity: 0;\n                                top: "+n+"px;\n                                left: "+e+"px;\n                            }\n                            10% {\n                                opacity: 1;\n                            }\n                            33% {\n                                top: "+n+"px;\n                                left: "+r+"px;\n                            }\n                            66% {\n                                top: "+a+"px;\n                                left: "+r+"px;\n                            }\n                            90% {\n                                opacity: 1;\n                            }\n                            100% {\n                                opacity: 0;\n                                top: "+a+"px;\n                                left: "+o+"px;\n                            }\n                        }",lastSheet.cssRules.length),t.num.style.animation="toFuncMachine"+t.alphaid+" 3s ease-in-out "+14*t.delay+"s",t.num.style.opacity="0",t.num.style.zIndex="100",new Promise(function(n){window.setTimeout(function(){n(t.num)},3e3*t.delay)})}function animateToStatusBar(){console.log("Animate to status bar and pass the information to the graph function")}function equAppear(t){return new Promise(function(n){setTimeout(function(){"number"==typeof t&&(statusBar.innerText="",statusBar.innerText=">> Returning answer."),equPara.innerHTML="",equPara.style.opacity=0,katex.render(""+t,equPara),equPara.style.animation="textAppear 1s ease-in-out",equPara.style.opacity=1,n(t)},1500)})}function equAnimeDisappear(t){return new Promise(function(n){var e;if("object"===("undefined"==typeof t?"undefined":_typeof(t)))e=globalEqu.replace("x","*("+t.innerText+")"),statusBar.innerText="",statusBar.innerText=">> Calculating",setTimeout(function(){equPara.style.animation="textDisappear 1.5s ease-in-out",n(e)},1500);else{if("string"!=typeof t)return;e=math.eval(t),setTimeout(function(){equPara.style.animation="textDisappear 1.5s ease-in-out",n(e)},1500)}})}function createAns(t){var n=wand.querApndr("#ansContainer"),e=wand.crtElm("p",t.toString());return n.innerHTML="",new Promise(function(t){setTimeout(function(){var n={top:55,right:300},a={};a.top=startingData[0].top+7.5,a.right=startingData[0].right;var o=aniConfig(n,a,e,"zz",0);startingData.pop(),t(o)},1500)})}function animate(t,n){var e=wand.crtElm("p",n[t].num),a={top:55,right:300},o=aniConfig(n[t].coorData,a,e,alphaid[t],t),r=n[t].inputTag.name.match(/\d+/);startingData.push(n[t].coorData),animationTemplate(o).then(equAnimeDisappear).then(equAppear).then(equAnimeDisappear).then(equAppear).then(createAns).then(animationTemplate).then(function(e){return new Promise(function(a){setTimeout(function(){var i=wand.querApndr("#row"+1*r[0]+" td:nth-child(2)"),u="y = ",s=""+globalEqu,p=e.innerText,l={top:150,right:400};katex.render(u,yPara),katex.render(s,equPara),wand.apndr(i,p),o=aniConfig(n[t].coorData,l,e,"za",0),statusBar.innerText="",statusBar.innerText=">> Plotting answer.",a(o)},3e3)})}).then(animationTemplate)}function animatorControl(t,n){var e=wand.querApndr("#numContainer");e.innerHTML="";for(var a=0;a<t.length;a++)animate(a,t)}var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol?"symbol":typeof t},lastSheet=document.styleSheets[document.styleSheets.length-1],alphaid=["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r"],statusBar=wand.querApndr("#status p"),startingData=[];
"use strict";!function(){function n(){u=[];for(var n=0;n<t.length;n++){var i=wand.querApndr("[name='"+t[n]+"']");if(i.value){var a={};a.coorData=i.getBoundingClientRect(),a.num=i.value,a.inputTag=i,u.push(a),graphConfig.aniData=a}}animatorControl(u)}var t=["input1","input2","input3","input4","input5","input6","input7","input8","input9","input10","input11","input12","input13","input14","input15","input16","input17","input18","input19"],u=[];document.onchange=function(n){"select"===n.target.localName&&changePlot(n.target.value)},document.onkeydown=function(t){13===t.keyCode&&n()},document.onclick=function(t){"Go!"===t.target.value&&n()}}();
"use strict";!function(){for(var n,d,r,t,a=wand.querApndr("tbody"),w=19,p=1;w>=p;p++)t=wand.crtElm("input"),n=wand.crtElm("td"),d=wand.crtElm("td"),r=wand.crtElm("tr"),r.id="row"+p,t.name="input"+p,t.type="number",wand.apndr(n,t),wand.apndr(r,[n,d]),wand.apndr(a,r)}();
//# sourceMappingURL=data:application/json;base64,
