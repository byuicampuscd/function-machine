"use strict";$(document).ready(function(){$.getJSON("../funcMachineSettings.json",function(n){window.professorConfigFile=n,$.each(n,function(n,e){var o=$("<option></option>").append(e.name);$(o).val(e.equation),$("select").append(o),0===n&&changePlot(e.equation)})})});
"use strict";function startFuncMach(){var t=$("input[type='number']"),e=$("#animate:checked").length>0,n=$("#showGraph:checked").length>0,o={callback:function(t){return new Promise(function(e){console.log("finished!"),e(t)})},animateHide:e,graphHide:n,equation:profOpt.equation},i={datapoints:[],currentRound:0,graphOpt:o};t.each(function(t){var e=+$(this).val(),n=profOpt.equation;if(e){var o=n.replace("x","("+e+")"),a=math.eval(o),c=this.getBoundingClientRect(),u={x:e,y:a,id:t,changeEqu:profOpt.equation.replace("x","("+e+")"),updatePoint:xMemory[t]!==e,element:$("<p>"+e+"</p>")[0],beginCoor:{top:c.top,left:c.left},endCoor:{top:55,left:300}};u.updatePoint&&$("td#yval"+(t+1)).html(""),xMemory[t]=e,i.datapoints.push(u)}}),animatorControl(i)}function checkConfig(t){var e;return $.each(professorConfigFile,function(n,o){o.equation===t&&(e=o)}),e}function changePlot(t){window.profOpt=checkConfig(t);var e="y = ",n=""+t,o=$("#functionMachine #equ")[0],i=$("#functionMachine #y");$(o).empty(""),katex.render(e,i[0]),katex.render(n,o)}for(var xMemory=[],inputs=document.querySelectorAll("input[type='number']"),inputCount=inputs.length,i=0;inputCount>i;i++)xMemory[i]=null;$("select").change(function(t){changePlot(t.target.value)}),$(document).keypress(function(t){13==t.which&&startFuncMach()}),$("input[type='button'][value='Go!']").click(function(){startFuncMach()});
"use strict";function animationTemplate(n){var t=n.datapoints[n.currentRound],e=t.beginCoor.top+5,a=t.beginCoor.left+30,o=t.endCoor.top+5,i=t.endCoor.left+30,r=246.5,u=t.id.toString(),s=$("#numContainer"),p=t.element;return lastSheet.insertRule("@keyframes animationPath"+u+" {\n                            0% {\n                                opacity: 0;\n                                top: "+e+"px;\n                                left: "+a+"px;\n                            }\n                            10% {\n                                opacity: 1;\n                            }\n                            33% {\n                                top: "+e+"px;\n                                left: "+r+"px;\n                            }\n                            66% {\n                                top: "+o+"px;\n                                left: "+r+"px;\n                            }\n                            90% {\n                                opacity: 1;\n                            }\n                            100% {\n                                opacity: 0;\n                                top: "+o+"px;\n                                left: "+i+"px;\n                            }\n                        }",lastSheet.cssRules.length),$(s).append(p),new Promise(function(t){$(p).css({position:"absolute",top:e+"px",left:a+"px",animation:"animationPath"+u+" "+aniDuration+"s ease-in-out",opacity:"0",zIndex:"100"}).bind("animationend",function(e){t(n)})})}function updateRound(n){var t=n.datapoints[n.currentRound];return new Promise(function(e){n.currentRound+=1,t.updatePoint=!1,e(n)})}function replaceXEqu(n){return new Promise(function(t){$(statusBar).html("<p>Calculating</p>"),$(equPara).css("animation","textDisappear "+aniDur+"s ease-in-out").bind("animationend",function(e){$(equPara).css("opacity",0),t(n)})})}function showEvaluateEqu(n){var t=n.datapoints[n.currentRound],e=t.changeEqu;return new Promise(function(t){katex.render(""+e,equPara),$(equPara).css("animation","textAppear "+aniDur+"s ease-in-out").bind("animationend",function(e){$(equPara).css("opacity",1),t(n)})})}function showYAns(n){var t=n.datapoints[n.currentRound],e=t.beginCoor.top,a=t.beginCoor.left+100,o=t.endCoor.top,i=t.endCoor.left;return t.endCoor={top:e,left:a},t.beginCoor={top:o,left:i},t.element.innerText=t.y,new Promise(function(e){$(equPara).css("animation","textDisappear "+aniDur+"s ease-in-out").bind("animationend",function(a){$(equPara).css("opacity",0),katex.render(""+t.y,equPara),$(equPara).css("animation","textAppear 1s ease-in-out").bind("animationend",function(t){$(equPara).css("opacity",1),e(n)})})})}function placeYValue(n){var t=n.datapoints[n.currentRound],e=t.endCoor.top,a=t.endCoor.left;return t.beginCoor={top:e,left:a},t.endCoor={top:150,left:300},new Promise(function(e){var a=$("td#yval"+(t.id+1))[0];$(a).html(""),$(a).append("<p>"+t.y+"</p>"),e(n)})}function resetRound(n){n.datapoints[n.currentRound];return new Promise(function(t){$(equPara).css("animation","textDisappear "+aniDur+"s ease-in-out").bind("animationend",function(e){$(equPara).css("opacity",0),katex.render(""+profOpt.equation,equPara),$(equPara).css("animation","textAppear "+aniDur+"s ease-in-out").bind("animationend",function(e){$(equPara).css("opacity",1),$(statusBar).html(""),t(n)})})})}function plotter(n){n.graphOpt.callback()}function animatorControl(n){var t=$("#numContainer"),e=Promise.resolve(n);t.innerHTML="";for(var a=0;a<n.datapoints.length;a++)n.datapoints[a].updatePoint===!0&&(e=e.then(animationTemplate).then(replaceXEqu).then(showEvaluateEqu).then(showYAns).then(animationTemplate).then(placeYValue).then(animationTemplate).then(resetRound)),e=e.then(updateRound)}var statusBar=$("#status p"),lastSheet=document.styleSheets[document.styleSheets.length-1],equPara=$("#functionMachine #equ")[0],aniDur=1,aniDuration=3;
"use strict";!function(){for(var t,a,d,p,r=$("tbody"),n=19,e=1;n>=e;e++)p=$("<input>"),t=$("<td></td>"),a=$("<td></td>"),d=$("<tr></tr>"),$(d).attr("id","row"+e),$(p).attr("name","input"+e).attr("type","number"),$(a).attr("id","yval"+e),$(t).append(p),$(d).append(t).append(a),$(r).append(d)}();
//# sourceMappingURL=data:application/json;base64,
