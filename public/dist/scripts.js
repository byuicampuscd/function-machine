"use strict";!function(){for(var t,a,d,p,r=$("tbody"),n=19,e=1;n>=e;e++)p=$("<input>"),t=$("<td></td>"),a=$("<td></td>"),d=$("<tr></tr>"),$(d).attr("id","row"+e),$(p).attr("name","input"+e).attr("type","number"),$(a).attr("id","yval"+e),$(t).append(p),$(d).append(t).append(a),$(r).append(d)}();
"use strict";$(document).ready(function(){$.getJSON("../funcMachineSettings.json",function(n){window.professorConfigFile=n,$.each(n,function(n,e){var o=$("<option></option>").append(e.name);$(o).val(e.equation),$("select").append(o),0===n&&changePlot(e.equation)})})});
"use strict";function stairStep(t){var n=246.5;lastSheet.insertRule("@keyframes "+t.name+" {\n                            0% {\n                                opacity: 0;\n                                top: "+t.startTopOff+"px;\n                                left: "+t.startLeftOff+"px;\n                            }\n                            10% {\n                                opacity: 1;\n                            }\n                            33% {\n                                top: "+t.startTopOff+"px;\n                                left: "+n+"px;\n                            }\n                            66% {\n                                top: "+t.endTopOff+"px;\n                                left: "+n+"px;\n                            }\n                            90% {\n                                opacity: 1;\n                            }\n                            100% {\n                                opacity: 0;\n                                top: "+t.endTopOff+"px;\n                                left: "+t.endLeftOff+"px;\n                            }\n                        }",lastSheet.cssRules.length)}function makeXToMachine(t,n){stairStep({startTopOff:t.top+5,startLeftOff:t.left+30,endTopOff:55,endLeftOff:300,name:"xToMachine"+n})}function makeMachineToY(t,n){stairStep({startTopOff:55,startLeftOff:300,endTopOff:t.top+5,endLeftOff:t.right+5,name:"machineToY"+n})}function makeYToStatusBar(t,n){stairStep({startTopOff:t.top+5,startLeftOff:t.right+10,endTopOff:150,endLeftOff:300,name:"yToStatusBar"+n})}function startFuncMach(){var t=$("input[type='number']"),n=$("#animate:checked").length>0,e=$("#showGraph:checked").length>0,o={callback:function(t){return new Promise(function(n){console.log("finished!"),n(t)})},animateHide:n,graphHide:e,equation:profOpt.equation},a={datapoints:[],currentRound:0,graphOpt:o};t.each(function(t){var n=+$(this).val(),e=profOpt.equation;if(n){var o=e.replace("x","("+n+")"),i=math.eval(o),f=this.getBoundingClientRect(),p={x:n,y:i,id:t,changeEqu:profOpt.equation.replace("x","("+n+")"),updatePoint:xMemory[t]!==n,element:$("#numContainer p").get(t),beginCoor:{top:f.top,left:f.left},endCoor:{top:55,left:300}};p.updatePoint&&$("td#yval"+(t+1)).html(""),xMemory[t]=n,a.datapoints.push(p)}}),animatorControl(a)}function checkConfig(t){var n;return $.each(professorConfigFile,function(e,o){o.equation===t&&(n=o)}),n}function changePlot(t){window.profOpt=checkConfig(t);var n="y = ",e=""+t,o=$("#functionMachine #equ")[0],a=$("#functionMachine #y");$(o).empty(""),katex.render(n,a[0]),katex.render(e,o)}for(var xMemory=[],inputs=document.querySelectorAll("input[type='number']"),inputCount=inputs.length,lastSheet=document.styleSheets[document.styleSheets.length-1],i=0;inputCount>i;i++){xMemory[i]=null;var inputCoor=inputs[i].getBoundingClientRect();makeXToMachine(inputCoor,i),makeMachineToY(inputCoor,i),makeYToStatusBar(inputCoor,i),$("#numContainer").append($("<p></p>"))}$("select").change(function(t){changePlot(t.target.value)}),$(document).keypress(function(t){13==t.which&&startFuncMach()}),$("input[type='button'][value='Go!']").click(function(){startFuncMach()});
"use strict";function runAnimation(n,t){return function(a){var e=a.datapoints[a.currentRound],i=e.element;return new Promise(function(e){$(i).html(t).css({animation:""+n+a.currentRound+" "+aniDuration+"s ease-in-out"}).one("animationend",function(n){e(a)})})}}function replaceXEqu(n){return new Promise(function(t){$(statusBar).html("<p>Calculating</p>"),$(equPara).css("animation","textDisappear "+aniDuration+"s ease-in-out").one("animationend",function(a){$(equPara).css("opacity",0),t(n)})})}function showEvaluateEqu(n){var t=n.datapoints[n.currentRound],a=t.changeEqu;return new Promise(function(t){katex.render(""+a,equPara),$(equPara).css("animation","textAppear "+aniDuration+"s ease-in-out").one("animationend",function(a){$(equPara).css("opacity",1),t(n)})})}function showYAns(n){var t=n.datapoints[n.currentRound];return new Promise(function(a){$(equPara).css("animation","textDisappear "+aniDuration+"s ease-in-out").one("animationend",function(){$(equPara).css("opacity",0),katex.render(""+t.y,equPara),a(n)})})}function showEquationAgain(n){return new Promise(function(t){$(equPara).css("animation","textAppear "+aniDuration+"s ease-in-out").one("animationend",function(a){$(equPara).css("opacity",1),t(n)})})}function placeYValue(n){var t=n.datapoints[n.currentRound];return new Promise(function(a){var e=$("td#yval"+(t.id+1))[0];$(e).html(""),$(e).append("<p>"+t.y+"</p>"),a(n)})}function resetRound(n){n.datapoints[n.currentRound];return new Promise(function(t){$(equPara).css("animation","textDisappear "+aniDuration+"s ease-in-out").one("animationend",function(a){$(equPara).css("opacity",0),katex.render(""+profOpt.equation,equPara),t(n)})})}function showDefaultEqu(n){return new Promise(function(t){$(equPara).css("animation","textAppear "+aniDuration+"s ease-in-out").one("animationend",function(a){$(equPara).css("opacity",1),$(statusBar).html(""),t(n)})})}function plotter(n){n.graphOpt.callback()}function updateRound(n){var t=n.datapoints[n.currentRound];return new Promise(function(a){n.currentRound+=1,t.updatePoint=!1,a(n)})}function animatorControl(n){var t=$("#numContainer"),a=Promise.resolve(n);t.innerHTML="";for(var e=0;e<n.datapoints.length;e++){var i=n.datapoints[e];i.updatePoint===!0&&(a=a.then(runAnimation("xToMachine",i.x)).then(replaceXEqu).then(showEvaluateEqu).then(showYAns).then(showEquationAgain).then(runAnimation("machineToY",i.y)).then(placeYValue).then(runAnimation("yToStatusBar","("+i.x+","+i.y+")")).then(resetRound).then(showDefaultEqu)),a=a.then(updateRound)}}var statusBar=$("#status p"),lastSheet=document.styleSheets[document.styleSheets.length-1],equPara=$("#functionMachine #equ")[0],aniDuration=2;
//# sourceMappingURL=data:application/json;base64,
