"use strict";!function(){for(var t,a,d,p,r=$("tbody"),n=19,e=1;e<=n;e++)p=$("<input>"),t=$("<td></td>"),a=$("<td></td>"),d=$("<tr></tr>"),$(d).attr("id","row"+e),$(p).attr("name","input"+e).attr("type","number"),$(a).attr("id","yval"+e),$(t).append(p),$(d).append(t).append(a),$(r).append(d)}();
"use strict";$(document).ready(function(){function n(n){var t=$("<option></option>").append(n.name);$(t).val(n.equation),$("select").append(t)}var t=location.search.substring(1),o=t.split("=")[1]+".json";$.getJSON(o,function(t){window.professorConfigFile=t,$.each(t,function(t,o){n(o),0===t&&changePlot(o.equation)})}).fail(function(){$("#status p").append("Add a query string")})});
"use strict";function changePlot(t){xMemory=[],clearValues(),window.profOpt=checkConfig(t);var n="y = ",e=""+t,o=$("#functionMachine #equ")[0],i=$("#functionMachine #y");$(o).empty(""),katex.render(n,i[0]),katex.render(e,o)}function stairStep(t){var n=246.5,e=document.styleSheets[document.styleSheets.length-1];e.insertRule("@keyframes "+t.name+" {\n                            0% {\n                                opacity: 1;\n                                top: "+t.startTopOff+"px;\n                                left: "+t.startLeftOff+"px;\n                            }\n                            10% {\n                                opacity: 1;\n                            }\n                            33% {\n                                top: "+t.startTopOff+"px;\n                                left: "+n+"px;\n                            }\n                            66% {\n                                top: "+t.endTopOff+"px;\n                                left: "+n+"px;\n                            }\n                            90% {\n                                opacity: 1;\n                            }\n                            100% {\n                                opacity: 0;\n                                top: "+t.endTopOff+"px;\n                                left: "+t.endLeftOff+"px;\n                            }\n                        }",e.cssRules.length)}function makeXToMachine(t,n){stairStep({startTopOff:t.top+5,startLeftOff:t.left+30,endTopOff:55,endLeftOff:300,name:"xToMachine"+n})}function makeMachineToY(t,n){stairStep({startTopOff:100,startLeftOff:530,endTopOff:t.top+5,endLeftOff:t.right+5,name:"machineToY"+n})}function makeYToStatusBar(t,n){stairStep({startTopOff:t.top+5,startLeftOff:t.right+10,endTopOff:150,endLeftOff:300,name:"yToStatusBar"+n})}function setUpObject(t,n,e){t.each(function(t){var o,i,a=$(this).val();if(a&&(o=+a,i=o.toFixed(profOpt.rounding),$(this).val(i),profOpt.view.x.min<=i&&i<=profOpt.view.x.max)){var p=n.equation.replace("x","("+i+")"),r=math.eval(p),u=(this.getBoundingClientRect(),{x:i,y:r.toFixed(profOpt.rounding),id:t,changeEqu:profOpt.equation.replace("x","("+i+")"),updatePoint:xMemory[t]!==i,element:$("#numContainer p").get(t)});u.updatePoint&&$("td#yval"+(t+1)).html(""),xMemory[t]=i,e.datapoints.push(u)}})}function startFuncMach(){var t=$("input[type='number']"),n=$("#animate:checked").length>0,e=$("#showGraph:checked").length>0,o={callback:function(t){return new Promise(function(n){console.log("finished plotting datapoint!"),n(t)})},animateHide:n,graphHide:e,equation:profOpt.equation,view:profOpt.view},i={datapoints:[],currentRound:0,graphOpt:o};setUpObject(t,o,i),animatorControl(i)}function checkConfig(t){var n;return $.each(professorConfigFile,function(e,o){o.equation===t&&(n=o)}),n}function clearValues(){var t=$("input[type='number']"),n=$("tr td:nth-of-type(2)");t.each(function(t,n){n.value=""}),n.each(function(t,n){n.innerHTML=""})}for(var xMemory=[],inputs=document.querySelectorAll("input[type='number']"),inputCount=inputs.length,run=!0,i=0;i<inputs.length;i++)inputs[i].oninput=function(t){var n=t.srcElement.value;profOpt.view.x.min<=n&&n<=profOpt.view.x.max?(run=!0,$("input[type='button'][value='Go!']").prop("disabled",!1).css({cursor:"pointer"}),$("#status p").html("")):(run=!1,$("input[type='button'][value='Go!']").prop("disabled",!0).css({cursor:"not-allowed"}),$("#status p").html(n+" x-value out of domains."))};for(var i=0;i<inputCount;i++){xMemory[i]=null;var inputCoor=inputs[i].getBoundingClientRect();makeXToMachine(inputCoor,i),makeMachineToY(inputCoor,i),makeYToStatusBar(inputCoor,i),$("#numContainer").append($("<p></p>"))}$("select").change(function(t){changePlot(t.target.value)}),$(document).keypress(function(t){13==t.which&&run&&startFuncMach()}),$("input[type='button'][value='Go!']").click(function(){run&&startFuncMach()});
"use strict";function runAnimation(n,t){return function(a){var e=a.datapoints[a.currentRound],i=e.element;return new Promise(function(e){$(i).html(t).css({animation:""+n+a.currentRound+" "+aniDuration+"s ease-in-out"}).one("animationend",function(n){e(a)})})}}function statusMessage(n){var t=$("#status p");return function(a){return new Promise(function(e){t.html(n),e(a)})}}function replaceXEqu(n){return new Promise(function(t){$(equPara).css("animation","textDisappear "+aniDuration+"s ease-in-out").one("animationend",function(a){$(equPara).css("opacity",0),t(n)})})}function showEvaluateEqu(n){var t=n.datapoints[n.currentRound],a=t.changeEqu;return new Promise(function(t){katex.render(""+a,equPara),$(equPara).css("animation","textAppear "+aniDuration+"s ease-in-out").one("animationend",function(a){$(equPara).css("opacity",1),t(n)})})}function showYAns(n){var t=n.datapoints[n.currentRound];return new Promise(function(a){$(equPara).css("animation","textDisappear "+aniDuration+"s ease-in-out").one("animationend",function(){$(equPara).css("opacity",0),katex.render(""+t.y,equPara),a(n)})})}function showEquationAgain(n){return new Promise(function(t){$(equPara).css("animation","textAppear "+aniDuration+"s ease-in-out").one("animationend",function(a){$(equPara).css("opacity",1),t(n)})})}function placeYValue(n){var t=n.datapoints[n.currentRound];return new Promise(function(a){var e=$("td#yval"+(t.id+1))[0];$(e).html(""),$(e).append("<p>"+t.y+"</p>"),a(n)})}function resetRound(n){n.datapoints[n.currentRound];return new Promise(function(t){$(equPara).css("animation","textDisappear "+aniDuration+"s ease-in-out").one("animationend",function(a){$(equPara).css("opacity",0),katex.render(""+profOpt.equation,equPara),t(n)})})}function showDefaultEqu(n){return new Promise(function(t){$(equPara).css("animation","textAppear "+aniDuration+"s ease-in-out").one("animationend",function(a){$(equPara).css("opacity",1),t(n)})})}function plotter(n){n.datapoints[n.currentRound];return new Promise(function(t){n.graphOpt.callback(),t(n)})}function updateRound(n){var t=n.datapoints[n.currentRound];return new Promise(function(a){n.currentRound+=1,t.updatePoint=!1,a(n)})}function animateFuncMachine(n){return new Promise(function(t){$("#functionMachine").css({"background-image":"url(./functionMachineAni.gif)"}),t(n)})}function stopAniFuncMachine(n){return new Promise(function(t){$("#functionMachine").css({"background-image":"url(./functionMachineStill.gif)"}),t(n)})}function miniAni(n){return new Promise(function(t){var a=n.datapoints[n.currentRound],e=a.y,i=$("<p>"+e+"</p>");$("body").append(i),i.css({position:"absolute",opacity:0,left:550,top:50}).animate({opacity:1,top:100},function(a){i.css({display:"none"}),t(n)})})}function aniPromiseChain(n,t){n.datapoints.forEach(function(n){n.updatePoint===!0&&(t=t.then(runAnimation("xToMachine",n.x)).then(animateFuncMachine).then(statusMessage("Calculating")).then(replaceXEqu).then(showEvaluateEqu).then(showYAns).then(showEquationAgain).then(stopAniFuncMachine).then(miniAni).then(runAnimation("machineToY",n.y)).then(placeYValue).then(runAnimation("yToStatusBar","("+n.x+","+n.y+")")).then(statusMessage("Plotting ("+n.x+","+n.y+")")).then(plotter).then(resetRound).then(statusMessage("")).then(showDefaultEqu)),t=t.then(updateRound)})}function noAniPromiseChain(n,t){n.datapoints.forEach(function(n){n.updatePoint===!0&&(t=t.then(placeYValue).then(plotter)),t=t.then(updateRound)})}function animatorControl(n){var t=$("#numContainer"),a=Promise.resolve(n);t.innerHTML="",n.graphOpt.animateHide?noAniPromiseChain(n,a):aniPromiseChain(n,a)}var equPara=$("#functionMachine #equ")[0],aniDuration=2;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiLCJhamF4LmpzIiwiZXZlbnRzLmpzIiwiYW5pbWF0b3Jjb250cm9sLmpzIl0sIm5hbWVzIjpbInRkMSIsInRkMiIsInRyIiwiaW5wdXQiLCJ0Ym9keSIsIiQiLCJyb3dDb3VudCIsImoiLCJhdHRyIiwiYXBwZW5kIiwiZG9jdW1lbnQiLCJyZWFkeSIsInNob3dQcm9mT3B0aW9ucyIsInByb2ZPcHQiLCJvcHQiLCJuYW1lIiwidmFsIiwiZXF1YXRpb24iLCJxdWVyeVN0cmluZyIsImxvY2F0aW9uIiwic2VhcmNoIiwic3Vic3RyaW5nIiwicXVlcnkiLCJzcGxpdCIsImdldEpTT04iLCJyZXN1bHQiLCJ3aW5kb3ciLCJwcm9mZXNzb3JDb25maWdGaWxlIiwiZWFjaCIsImkiLCJjaGFuZ2VQbG90IiwiZmFpbCIsInhNZW1vcnkiLCJjbGVhclZhbHVlcyIsImNoZWNrQ29uZmlnIiwieSIsImVxdWF0IiwiZXF1UGFyYSIsInlQYXJhIiwiZW1wdHkiLCJrYXRleCIsInJlbmRlciIsInN0YWlyU3RlcCIsIm9wdGlvbnMiLCJoaWdod2F5UGF0aCIsImxhc3RTaGVldCIsInN0eWxlU2hlZXRzIiwibGVuZ3RoIiwiaW5zZXJ0UnVsZSIsInN0YXJ0VG9wT2ZmIiwic3RhcnRMZWZ0T2ZmIiwiZW5kVG9wT2ZmIiwiZW5kTGVmdE9mZiIsImNzc1J1bGVzIiwibWFrZVhUb01hY2hpbmUiLCJpbnB1dENvcmRzIiwiaW5kZXgiLCJ0b3AiLCJsZWZ0IiwibWFrZU1hY2hpbmVUb1kiLCJyaWdodCIsIm1ha2VZVG9TdGF0dXNCYXIiLCJzZXRVcE9iamVjdCIsInhpbnB1dHMiLCJncmFwaE9wdCIsImFuaVNldHRpbmdzIiwieHZhbCIsInJvdW5kaXQiLCJ4dmFsdWUiLCJ0aGlzIiwidG9GaXhlZCIsInJvdW5kaW5nIiwidmlldyIsIngiLCJtaW4iLCJtYXgiLCJyZXBsYWNlWCIsInJlcGxhY2UiLCJ5dmFsIiwibWF0aCIsImV2YWwiLCJwb2ludCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImlkIiwiY2hhbmdlRXF1IiwidXBkYXRlUG9pbnQiLCJlbGVtZW50IiwiZ2V0IiwiaHRtbCIsImRhdGFwb2ludHMiLCJwdXNoIiwic3RhcnRGdW5jTWFjaCIsImhpZGVBbmltYXRpb25DaGVja2VkIiwiaGlkZUdyYXBoQ2hlY2tlZCIsImNhbGxiYWNrIiwiUHJvbWlzZSIsInJlc29sdmUiLCJjb25zb2xlIiwibG9nIiwiYW5pbWF0ZUhpZGUiLCJncmFwaEhpZGUiLCJjdXJyZW50Um91bmQiLCJhbmltYXRvckNvbnRyb2wiLCJpdGVtIiwieWlucHV0cyIsInZhbHVlIiwiaW5uZXJIVE1MIiwiaW5wdXRzIiwicXVlcnlTZWxlY3RvckFsbCIsImlucHV0Q291bnQiLCJydW4iLCJvbmlucHV0IiwiZSIsInhJbnB1dFZhbCIsInNyY0VsZW1lbnQiLCJwcm9wIiwiY3NzIiwiY3Vyc29yIiwiaW5wdXRDb29yIiwiY2hhbmdlIiwidGFyZ2V0Iiwia2V5cHJlc3MiLCJ3aGljaCIsImNsaWNrIiwicnVuQW5pbWF0aW9uIiwiZGF0YXBvaW50IiwibnVtUGFyYSIsImFuaW1hdGlvbiIsImFuaUR1cmF0aW9uIiwib25lIiwic3RhdHVzTWVzc2FnZSIsIm1lc3NhZ2UiLCJzdGF0dXNCYXIiLCJyZXBsYWNlWEVxdSIsInNob3dFdmFsdWF0ZUVxdSIsInBvaW50RGF0YSIsInNob3dZQW5zIiwic2hvd0VxdWF0aW9uQWdhaW4iLCJwbGFjZVlWYWx1ZSIsInJlc2V0Um91bmQiLCJzaG93RGVmYXVsdEVxdSIsInBsb3R0ZXIiLCJ1cGRhdGVSb3VuZCIsInBsYWNlaG9sZGVyIiwiYW5pbWF0ZUZ1bmNNYWNoaW5lIiwiYmFja2dyb3VuZC1pbWFnZSIsInN0b3BBbmlGdW5jTWFjaGluZSIsIm1pbmlBbmkiLCJ5dmFsdWUiLCJwYXJhIiwicG9zaXRpb24iLCJvcGFjaXR5IiwiYW5pbWF0ZSIsImRpc3BsYXkiLCJhbmlQcm9taXNlQ2hhaW4iLCJkcHMiLCJjaGFpbiIsImZvckVhY2giLCJ0aGVuIiwibm9BbmlQ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SCxZQUFjIiwiZmlsZSI6InNjcmlwdHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgLypcclxuICAgIE1ha2UgdGhlIHdob2xlIHRhYmxlIGFuZCBjZWxscyBmb3IgdGhlIGlucHV0IGJveGVzIGFuZCB1c2VyIGludGVyYWN0aW9uLlxyXG4gICAgKi9cclxuICAgIHZhciB0Ym9keSA9ICQoXCJ0Ym9keVwiKSxcclxuICAgICAgICB0ZDEsXHJcbiAgICAgICAgdGQyLFxyXG4gICAgICAgIHRyLFxyXG4gICAgICAgIGlucHV0LFxyXG4gICAgICAgIHJvd0NvdW50ID0gMTk7XHJcblxyXG4gICAgZm9yICh2YXIgaiA9IDE7IGogPD0gcm93Q291bnQ7IGorKykge1xyXG4gICAgICAgIGlucHV0ID0gJChcIjxpbnB1dD5cIik7XHJcbiAgICAgICAgdGQxID0gJChcIjx0ZD48L3RkPlwiKTtcclxuICAgICAgICB0ZDIgPSAkKFwiPHRkPjwvdGQ+XCIpO1xyXG4gICAgICAgIHRyID0gJChcIjx0cj48L3RyPlwiKTtcclxuXHJcbiAgICAgICAgJCh0cikuYXR0cihcImlkXCIsIGByb3cke2p9YCk7XHJcblxyXG4gICAgICAgICQoaW5wdXQpLmF0dHIoXCJuYW1lXCIsIGBpbnB1dCR7an1gKS5hdHRyKFwidHlwZVwiLCBcIm51bWJlclwiKTtcclxuXHJcbiAgICAgICAgJCh0ZDIpLmF0dHIoXCJpZFwiLCBgeXZhbCR7an1gKTtcclxuXHJcbiAgICAgICAgJCh0ZDEpLmFwcGVuZChpbnB1dCk7XHJcbiAgICAgICAgJCh0cikuYXBwZW5kKHRkMSkuYXBwZW5kKHRkMik7XHJcbiAgICAgICAgJCh0Ym9keSkuYXBwZW5kKHRyKTtcclxuICAgIH1cclxufSgpKTtcclxuIiwiJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xyXG5cclxuICAgIC8qXHJcbiAgICBMb2FkIFF1ZXJ5IHN1YnN0cmluZ1xyXG4gICAgKi9cclxuICAgIHZhciBxdWVyeVN0cmluZyA9IGxvY2F0aW9uLnNlYXJjaC5zdWJzdHJpbmcoMSksXHJcbiAgICAgICAgcXVlcnkgPSBxdWVyeVN0cmluZy5zcGxpdChcIj1cIilbMV0gKyBcIi5qc29uXCI7XHJcblxyXG4gICAgZnVuY3Rpb24gc2hvd1Byb2ZPcHRpb25zKHByb2ZPcHQpIHtcbiAgICAgICAgLypcclxuICAgICAgICBBcHBlbmQgdGhlIHByb2Zlc3NvcidzIGNob3NlbiBlcXVhdGlvbnMgdG8gdGhlIGFwcGxpY2F0aW9uXHJcbiAgICAgICAgKi9cclxuXHJcbiAgICAgICAgdmFyIG9wdCA9ICQoXCI8b3B0aW9uPjwvb3B0aW9uPlwiKS5hcHBlbmQocHJvZk9wdC5uYW1lKTtcblxyXG4gICAgICAgICQob3B0KS52YWwocHJvZk9wdC5lcXVhdGlvbik7XG5cclxuICAgICAgICAkKFwic2VsZWN0XCIpLmFwcGVuZChvcHQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qXHJcbiAgICBMb2FkIHRoZSBwcm9mZXNzb3IgY29uZmlndXJhdGlvbiBmaWxlXHJcbiAgICAqL1xyXG5cclxuICAgICQuZ2V0SlNPTihxdWVyeSwgZnVuY3Rpb24gKHJlc3VsdCkge1xyXG5cclxuICAgICAgICB3aW5kb3cucHJvZmVzc29yQ29uZmlnRmlsZSA9IHJlc3VsdDtcclxuXHJcbiAgICAgICAgJC5lYWNoKHJlc3VsdCwgZnVuY3Rpb24gKGksIHByb2ZPcHQpIHtcblxyXG4gICAgICAgICAgICBzaG93UHJvZk9wdGlvbnMocHJvZk9wdCk7XG5cclxuICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgRGlzcGxheSB0aGUgZGVmYXVsdCBlcXVhdGlvbiB0byB0aGUgZnVuY3Rpb24gbWFjaGluZVxyXG4gICAgICAgICAgICAqL1xyXG5cclxuICAgICAgICAgICAgaWYgKGkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIC8vaW4gZXZlbnRzLmpzXG4gICAgICAgICAgICAgICAgY2hhbmdlUGxvdChwcm9mT3B0LmVxdWF0aW9uKTtcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfSkuZmFpbChmdW5jdGlvbigpIHtcclxuICAgICAgICAkKFwiI3N0YXR1cyBwXCIpLmFwcGVuZChcIkFkZCBhIHF1ZXJ5IHN0cmluZ1wiKVxyXG4gICAgfSk7O1xyXG5cclxufSk7XHJcbiIsIi8qXG5TZXQgdXAgdGhlIGJhc2ljIHZhcmlhYmxlcy5cbiovXG52YXIgeE1lbW9yeSA9IFtdLFxuICAgIGlucHV0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFt0eXBlPSdudW1iZXInXVwiKSxcbiAgICBpbnB1dENvdW50ID0gaW5wdXRzLmxlbmd0aCxcbiAgICBydW4gPSB0cnVlO1xuXG4vKlxuQXR0YWNoIGFuIG9uaW5wdXQgZXZlbnQgdG8gYWxsIHRoZSBpbnB1dCBib3hlcyBpbiBvcmRlciB0byB2YWxpZGF0ZSB0aGVtIHdpdGhpbiB0aGUgYm91bmRzXG50aGF0IHRoZSBwcm9mZXNzb3IgaGFzIGNob3Nlbi4gIElmIHRoZSBib3VuZHMgYXJlIGV4Y2VlZGVkLCB0aGVuIGRpc2FibGUgdGhlIFwiR28hXCIgYnV0dG9uXG5hbmQgb3V0cHV0IGEgbWVzc2FnZSB0byB0aGUgc3RhdHVzIGJhci5cbiovXG5mb3IgKHZhciBpID0gMDsgaSA8IGlucHV0cy5sZW5ndGg7IGkrKykge1xuXG4gICAgaW5wdXRzW2ldLm9uaW5wdXQgPSBmdW5jdGlvbiAoZSkge1xuXG4gICAgICAgIHZhciB4SW5wdXRWYWwgPSBlLnNyY0VsZW1lbnQudmFsdWU7XG4gICAgICAgIGlmIChwcm9mT3B0LnZpZXcueC5taW4gPD0geElucHV0VmFsICYmIHhJbnB1dFZhbCA8PSBwcm9mT3B0LnZpZXcueC5tYXgpIHtcbiAgICAgICAgICAgIHJ1biA9IHRydWU7XG4gICAgICAgICAgICAkKFwiaW5wdXRbdHlwZT0nYnV0dG9uJ11bdmFsdWU9J0dvISddXCIpXG4gICAgICAgICAgICAgICAgLnByb3AoXCJkaXNhYmxlZFwiLCBmYWxzZSlcbiAgICAgICAgICAgICAgICAuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgXCJjdXJzb3JcIjogXCJwb2ludGVyXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICQoXCIjc3RhdHVzIHBcIikuaHRtbChgYCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBydW4gPSBmYWxzZTtcbiAgICAgICAgICAgICQoXCJpbnB1dFt0eXBlPSdidXR0b24nXVt2YWx1ZT0nR28hJ11cIilcbiAgICAgICAgICAgICAgICAucHJvcChcImRpc2FibGVkXCIsIHRydWUpXG4gICAgICAgICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIFwiY3Vyc29yXCI6IFwibm90LWFsbG93ZWRcIlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgJChcIiNzdGF0dXMgcFwiKS5odG1sKGAke3hJbnB1dFZhbH0geC12YWx1ZSBvdXQgb2YgZG9tYWlucy5gKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbi8qXG5EaXBzbGF5IEthdGV4IGVxdWF0aW9uLiBBTFNPIHVzZWQgaW4gYWpheC5qc1xuKi9cbmZ1bmN0aW9uIGNoYW5nZVBsb3QodmFsKSB7XG5cbiAgICB4TWVtb3J5ID0gW107XG5cbiAgICBjbGVhclZhbHVlcygpO1xuXG4gICAgd2luZG93LnByb2ZPcHQgPSBjaGVja0NvbmZpZyh2YWwpO1xuICAgIHZhciB5ID0gYHkgPSBgLFxuICAgICAgICBlcXVhdCA9IGAke3ZhbH1gLFxuICAgICAgICBlcXVQYXJhID0gJChcIiNmdW5jdGlvbk1hY2hpbmUgI2VxdVwiKVswXSxcbiAgICAgICAgeVBhcmEgPSAkKFwiI2Z1bmN0aW9uTWFjaGluZSAjeVwiKTtcblxuICAgICQoZXF1UGFyYSkuZW1wdHkoXCJcIik7XG5cbiAgICBrYXRleC5yZW5kZXIoeSwgeVBhcmFbMF0pO1xuICAgIGthdGV4LnJlbmRlcihlcXVhdCwgZXF1UGFyYSk7XG59XG5cbi8qXG5BbmltYXRpb24gcGF0aCBmb3IgdGhlIHN0YWlyc3RlcFxuKi9cbmZ1bmN0aW9uIHN0YWlyU3RlcChvcHRpb25zKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdmFyIGhpZ2h3YXlQYXRoID0gMjQ2LjUsXG4gICAgICAgIGxhc3RTaGVldCA9IGRvY3VtZW50LnN0eWxlU2hlZXRzW2RvY3VtZW50LnN0eWxlU2hlZXRzLmxlbmd0aCAtIDFdO1xuICAgIGxhc3RTaGVldC5pbnNlcnRSdWxlKGBAa2V5ZnJhbWVzICR7b3B0aW9ucy5uYW1lfSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMCUge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6ICR7b3B0aW9ucy5zdGFydFRvcE9mZn1weDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogJHtvcHRpb25zLnN0YXJ0TGVmdE9mZn1weDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMTAlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMzMlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAke29wdGlvbnMuc3RhcnRUb3BPZmZ9cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6ICR7aGlnaHdheVBhdGh9cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDY2JSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogJHtvcHRpb25zLmVuZFRvcE9mZn1weDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogJHtoaWdod2F5UGF0aH1weDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOTAlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMTAwJSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogJHtvcHRpb25zLmVuZFRvcE9mZn1weDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogJHtvcHRpb25zLmVuZExlZnRPZmZ9cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfWAsIGxhc3RTaGVldC5jc3NSdWxlcy5sZW5ndGgpO1xufVxuXG4vKlxuQSBzZXQgb2YgZnVuY3Rpb25zIHVzaW5nIHRoZSBzdGFpcnN0ZXAgYW5pbWF0aW9uIHRlbXBsYXRlXG50byBjcmVhdGUgcGF0aHdheXMgd2l0aCBjb29yZGluYXRlIGRhdGFcbiovXG5mdW5jdGlvbiBtYWtlWFRvTWFjaGluZShpbnB1dENvcmRzLCBpbmRleCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIHN0YWlyU3RlcCh7XG4gICAgICAgIHN0YXJ0VG9wT2ZmOiBpbnB1dENvcmRzLnRvcCArIDUsXG4gICAgICAgIHN0YXJ0TGVmdE9mZjogaW5wdXRDb3Jkcy5sZWZ0ICsgMzAsXG4gICAgICAgIGVuZFRvcE9mZjogNTUsXG4gICAgICAgIGVuZExlZnRPZmY6IDMwMCxcbiAgICAgICAgbmFtZTogYHhUb01hY2hpbmUke2luZGV4fWBcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gbWFrZU1hY2hpbmVUb1koaW5wdXRDb3JkcywgaW5kZXgpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICBzdGFpclN0ZXAoe1xuICAgICAgICBzdGFydFRvcE9mZjogMTAwLFxuICAgICAgICBzdGFydExlZnRPZmY6IDUzMCxcbiAgICAgICAgZW5kVG9wT2ZmOiBpbnB1dENvcmRzLnRvcCArIDUsXG4gICAgICAgIGVuZExlZnRPZmY6IGlucHV0Q29yZHMucmlnaHQgKyA1LFxuICAgICAgICBuYW1lOiBgbWFjaGluZVRvWSR7aW5kZXh9YFxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBtYWtlWVRvU3RhdHVzQmFyKGlucHV0Q29yZHMsIGluZGV4KSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgc3RhaXJTdGVwKHtcbiAgICAgICAgc3RhcnRUb3BPZmY6IGlucHV0Q29yZHMudG9wICsgNSxcbiAgICAgICAgc3RhcnRMZWZ0T2ZmOiBpbnB1dENvcmRzLnJpZ2h0ICsgMTAsXG4gICAgICAgIGVuZFRvcE9mZjogMTUwLFxuICAgICAgICBlbmRMZWZ0T2ZmOiAzMDAsXG4gICAgICAgIG5hbWU6IGB5VG9TdGF0dXNCYXIke2luZGV4fWBcbiAgICB9KTtcbn1cblxuLypcblNldCB1cCB0aGUgeE1lbW9yeSBhcnJheSBhbmQgdGhlIGFuaW1hdGlvbiBwYXRocyBmb3IgZWFjaCBpbnB1dCBib3guXG5cbk5PVEU6IFNldHRpbmcgdXAgdGhlIHhNZW1vcnkgYXJyYXkgYWxzbyBtYWtlcyBpdCBzbyB0aGF0IG5vIGFuaW1hdGlvbnNcbiAgICAgIGFyZSByZXBlYXRlZCBieSBtdWx0aXBsZSBjbGlja3Mgb24gdGhlIFwiR28hXCIgYnV0dG9uLlxuKi9cbmZvciAodmFyIGkgPSAwOyBpIDwgaW5wdXRDb3VudDsgaSsrKSB7XG4gICAgeE1lbW9yeVtpXSA9IG51bGw7XG5cbiAgICB2YXIgaW5wdXRDb29yID0gaW5wdXRzW2ldLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgbWFrZVhUb01hY2hpbmUoaW5wdXRDb29yLCBpKTtcbiAgICBtYWtlTWFjaGluZVRvWShpbnB1dENvb3IsIGkpO1xuICAgIG1ha2VZVG9TdGF0dXNCYXIoaW5wdXRDb29yLCBpKTtcbiAgICAkKFwiI251bUNvbnRhaW5lclwiKS5hcHBlbmQoJChgPHA+PC9wPmApKTtcbn1cblxuLypcblNldCB1cCB0aGUgb2JqZWN0IHRoYXQgd2lsbCBiZSBwYXNzZWQgdGhyb3VnaCB0aGUgcHJvbWlzZSBjaGFpblxuaW4gYW5pbWF0b3Jjb250cm9sLlxuKi9cbmZ1bmN0aW9uIHNldFVwT2JqZWN0KHhpbnB1dHMsIGdyYXBoT3B0LCBhbmlTZXR0aW5ncykge1xuICAgIHhpbnB1dHMuZWFjaChmdW5jdGlvbiAoaSkge1xuICAgICAgICB2YXIgeHZhbHVlID0gJCh0aGlzKS52YWwoKSxcbiAgICAgICAgICAgIHh2YWwsXG4gICAgICAgICAgICByb3VuZGl0O1xuXG4gICAgICAgIGlmICh4dmFsdWUpIHtcbiAgICAgICAgICAgIHh2YWwgPSAreHZhbHVlO1xuICAgICAgICAgICAgcm91bmRpdCA9IHh2YWwudG9GaXhlZChwcm9mT3B0LnJvdW5kaW5nKTtcblxuICAgICAgICAgICAgJCh0aGlzKS52YWwocm91bmRpdCk7XG5cbiAgICAgICAgICAgIGlmIChwcm9mT3B0LnZpZXcueC5taW4gPD0gcm91bmRpdCAmJiByb3VuZGl0IDw9IHByb2ZPcHQudmlldy54Lm1heCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIHJlcGxhY2VYID0gZ3JhcGhPcHQuZXF1YXRpb24ucmVwbGFjZShcInhcIiwgYCgke3JvdW5kaXR9KWApLFxuICAgICAgICAgICAgICAgICAgICB5dmFsID0gbWF0aC5ldmFsKHJlcGxhY2VYKSxcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRDb29yID0gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiByb3VuZGl0LFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogeXZhbC50b0ZpeGVkKHByb2ZPcHQucm91bmRpbmcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGksXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VFcXU6IHByb2ZPcHQuZXF1YXRpb24ucmVwbGFjZShcInhcIiwgYCgke3JvdW5kaXR9KWApLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlUG9pbnQ6IHhNZW1vcnlbaV0gIT09IHJvdW5kaXQsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiAkKFwiI251bUNvbnRhaW5lciBwXCIpLmdldChpKVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICBDbGVhciBvdXQgdGhlIFlzIHdoZW4gdGhleSBkb24ndCBlcXVhbCBlYWNoIG90aGVyIGFuZCBuZWVkIHRvIGJlIHVwZGF0ZWRcbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGlmIChwb2ludC51cGRhdGVQb2ludCkge1xuICAgICAgICAgICAgICAgICAgICAkKGB0ZCN5dmFsJHtpICsgMX1gKS5odG1sKFwiXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8qVXBkYXRlIHRoZSB4bWVtb3J5Ki9cbiAgICAgICAgICAgICAgICB4TWVtb3J5W2ldID0gcm91bmRpdDtcbiAgICAgICAgICAgICAgICBhbmlTZXR0aW5ncy5kYXRhcG9pbnRzLnB1c2gocG9pbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59XG5cbi8qXG5TZXQgYWxsIHRoZSBkYXRhIHRoYXQgd2lsbCBiZSBzZXQgdG8gYW5pU2V0dGluZ3MgaW4gdGhlIHNldFVwT2JqZWN0IGZ1bmN0aW9uXG5cbk5PVEVcbmdyYXBoT3B0LmNhbGxiYWNrIHN0aWxsIG5lZWRzIGEgdmlhYmxlIG1ldGhvZCFcbiovXG5mdW5jdGlvbiBzdGFydEZ1bmNNYWNoKCkge1xuXG4gICAgdmFyIHhpbnB1dHMgPSAkKFwiaW5wdXRbdHlwZT0nbnVtYmVyJ11cIiksXG4gICAgICAgIGhpZGVBbmltYXRpb25DaGVja2VkID0gJChcIiNhbmltYXRlOmNoZWNrZWRcIikubGVuZ3RoID4gMCxcbiAgICAgICAgaGlkZUdyYXBoQ2hlY2tlZCA9ICQoXCIjc2hvd0dyYXBoOmNoZWNrZWRcIikubGVuZ3RoID4gMCxcbiAgICAgICAgZ3JhcGhPcHQgPSB7XG4gICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gKGFuaVNldHRpbmdzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZmluaXNoZWQgcGxvdHRpbmcgZGF0YXBvaW50IVwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShhbmlTZXR0aW5ncyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYW5pbWF0ZUhpZGU6IGhpZGVBbmltYXRpb25DaGVja2VkLFxuICAgICAgICAgICAgZ3JhcGhIaWRlOiBoaWRlR3JhcGhDaGVja2VkLFxuICAgICAgICAgICAgZXF1YXRpb246IHByb2ZPcHQuZXF1YXRpb24sXG4gICAgICAgICAgICB2aWV3OiBwcm9mT3B0LnZpZXdcbiAgICAgICAgfSxcbiAgICAgICAgYW5pU2V0dGluZ3MgPSB7XG4gICAgICAgICAgICBkYXRhcG9pbnRzOiBbXSxcbiAgICAgICAgICAgIGN1cnJlbnRSb3VuZDogMCxcbiAgICAgICAgICAgIGdyYXBoT3B0OiBncmFwaE9wdFxuICAgICAgICB9O1xuXG4gICAgc2V0VXBPYmplY3QoeGlucHV0cywgZ3JhcGhPcHQsIGFuaVNldHRpbmdzKTtcbiAgICBhbmltYXRvckNvbnRyb2woYW5pU2V0dGluZ3MpO1xufVxuXG4vKlxuRnVuY3Rpb24gdG8gc2VsZWN0IHRoZSBjaG9zZW4gZXF1YXRpb24gd2l0aCBpdHMgbmFtZSBhbmQgZ3JhcGggd2luZG93IGJvdW5kYXJpZXMuXG4qL1xuZnVuY3Rpb24gY2hlY2tDb25maWcodmFsKSB7XG4gICAgdmFyIHByb2ZPcHQ7XG4gICAgJC5lYWNoKHByb2Zlc3NvckNvbmZpZ0ZpbGUsIGZ1bmN0aW9uIChpLCBpdGVtKSB7XG4gICAgICAgIGlmIChpdGVtLmVxdWF0aW9uID09PSB2YWwpIHtcbiAgICAgICAgICAgIHByb2ZPcHQgPSBpdGVtO1xuICAgICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gcHJvZk9wdDtcbn1cblxuLypcblVwb24gY2hvb3NpbmcgYW5vdGhlciBlcXVhdGlvbiB0byBncmFwaCwgY2xlYXIgYWxsIHRoZSB2YWx1ZXNcbiovXG5mdW5jdGlvbiBjbGVhclZhbHVlcygpIHtcbiAgICB2YXIgeGlucHV0cyA9ICQoXCJpbnB1dFt0eXBlPSdudW1iZXInXVwiKSxcbiAgICAgICAgeWlucHV0cyA9ICQoYHRyIHRkOm50aC1vZi10eXBlKDIpYCk7XG5cbiAgICB4aW5wdXRzLmVhY2goZnVuY3Rpb24gKGksIGl0ZW0pIHtcbiAgICAgICAgaXRlbS52YWx1ZSA9IFwiXCI7XG4gICAgfSk7XG5cbiAgICB5aW5wdXRzLmVhY2goZnVuY3Rpb24gKGksIGl0ZW0pIHtcbiAgICAgICAgaXRlbS5pbm5lckhUTUwgPSBcIlwiO1xuICAgIH0pO1xufVxuXG4vKlxuT25jaGFuZ2UgZXZlbnQgaGFuZGxlciBmb3IgdGhlIHNlbGVjdCBodG1sIGVsZW1lbnQuXG4qL1xuJChcInNlbGVjdFwiKS5jaGFuZ2UoZnVuY3Rpb24gKGUpIHtcbiAgICBjaGFuZ2VQbG90KGUudGFyZ2V0LnZhbHVlKTtcbn0pO1xuXG4vKlxuRE9DVU1FTlQga2V5ZG93biBldmVudCBoYW5kbGVyXG4qL1xuJChkb2N1bWVudCkua2V5cHJlc3MoZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoZS53aGljaCA9PSAxMyAmJiBydW4pIHtcbiAgICAgICAgc3RhcnRGdW5jTWFjaCgpO1xuICAgIH1cbn0pO1xuXG4vKlxuR08hIENsaWNrIGV2ZW50IGhhbmRsZXJcbiovXG4kKFwiaW5wdXRbdHlwZT0nYnV0dG9uJ11bdmFsdWU9J0dvISddXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocnVuKSB7XG4gICAgICAgIHN0YXJ0RnVuY01hY2goKTtcbiAgICB9XG59KTsiLCJ2YXIgZXF1UGFyYSA9ICQoXCIjZnVuY3Rpb25NYWNoaW5lICNlcXVcIilbMF0sXHJcbiAgICBhbmlEdXJhdGlvbiA9IDI7XHJcblxyXG5mdW5jdGlvbiBydW5BbmltYXRpb24obmFtZSwgdmFsdWUpIHtcclxuICAgIC8qXHJcbiAgICBUaGlzIGlzIGEgZnVuY3Rpb24gZmFjdG9yeSB3aGljaCB3aWxsIGdyYWIgdGhlXHJcbiAgICBuZWNlc3NhcnkgZGF0YSBhbmQgdGhlbiByZXR1cm4gdGhlIGZ1bmN0aW9uIHByb21pc2VcclxuICAgICovXHJcbiAgICByZXR1cm4gZnVuY3Rpb24gYW5pbWF0aW9uKGFuaVNldHRpbmdzKSB7XHJcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICAgICAgdmFyIGRhdGFwb2ludCA9IGFuaVNldHRpbmdzLmRhdGFwb2ludHNbYW5pU2V0dGluZ3MuY3VycmVudFJvdW5kXSxcclxuICAgICAgICAgICAgbnVtUGFyYSA9IGRhdGFwb2ludC5lbGVtZW50O1xyXG5cclxuICAgICAgICAvKlxyXG4gICAgICAgIE1ha2UgdGhlIHByb21pc2UgdGhhdCB3aGVuIHRoZSBkeW5hbWljXHJcbiAgICAgICAgYW5pbWF0aW9uIHBhdGggaXMgZG9uZSB0aGVuIHRoaXMgcHJvbWlzZSBpcyBmaW5pc2hlZFxyXG4gICAgICAgICovXHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XHJcbiAgICAgICAgICAgICQobnVtUGFyYSlcclxuICAgICAgICAgICAgICAgIC5odG1sKHZhbHVlKVxyXG4gICAgICAgICAgICAgICAgLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJhbmltYXRpb25cIjogYCR7bmFtZX0ke2FuaVNldHRpbmdzLmN1cnJlbnRSb3VuZH0gJHthbmlEdXJhdGlvbn1zIGVhc2UtaW4tb3V0YCxcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAub25lKCdhbmltYXRpb25lbmQnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoYW5pU2V0dGluZ3MpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gc3RhdHVzTWVzc2FnZShtZXNzYWdlKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIC8qXHJcbiAgICBUaGlzIGlzIGEgZnVuY3Rpb24gZmFjdG9yeSB3aGljaCB3aWxsIGdyYWIgdGhlXHJcbiAgICBuZWNlc3NhcnkgZGF0YSBhbmQgdGhlbiByZXR1cm4gdGhlIGZ1bmN0aW9uIHByb21pc2VcclxuICAgICovXHJcbiAgICB2YXIgc3RhdHVzQmFyID0gJChcIiNzdGF0dXMgcFwiKTtcclxuXHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFuaVNldHRpbmdzKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XHJcbiAgICAgICAgICAgIHN0YXR1c0Jhci5odG1sKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICByZXNvbHZlKGFuaVNldHRpbmdzKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXBsYWNlWEVxdShhbmlTZXR0aW5ncykge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgLypcclxuICAgIFJlcGxhY2UgdGhlIHggaW4gdGhlIGRpc2FwcGVhcmVkIGVxdWF0aW9uIHdpdGhvdXQgaGF2aW5nIHRoZSB5IGRpc2FwcGVhci5cclxuICAgICovXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcclxuICAgICAgICAkKGVxdVBhcmEpXHJcbiAgICAgICAgICAgIC5jc3MoXCJhbmltYXRpb25cIiwgYHRleHREaXNhcHBlYXIgJHthbmlEdXJhdGlvbn1zIGVhc2UtaW4tb3V0YClcclxuICAgICAgICAgICAgLm9uZShcImFuaW1hdGlvbmVuZFwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgJChlcXVQYXJhKS5jc3MoXCJvcGFjaXR5XCIsIDApO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShhbmlTZXR0aW5ncyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNob3dFdmFsdWF0ZUVxdShhbmlTZXR0aW5ncykge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgLypcclxuICAgIEdldCB0aGUgeSBhbnN3ZXIgYW5kIHRoZSB4LWNoYW5nZWQgZXF1YXRpb25cclxuICAgICovXHJcbiAgICB2YXIgcG9pbnREYXRhID0gYW5pU2V0dGluZ3MuZGF0YXBvaW50c1thbmlTZXR0aW5ncy5jdXJyZW50Um91bmRdLFxyXG4gICAgICAgIGNoYW5nZUVxdSA9IHBvaW50RGF0YS5jaGFuZ2VFcXU7XHJcblxyXG4gICAgLypcclxuICAgIFNob3cgdGhlIG5ldyBlcXVhdGlvbiB3aXRoIHRoZSByZXBsYWNlZCB4LXZhbHVlIGVxdWF0aW9uXHJcbiAgICAqL1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XHJcbiAgICAgICAga2F0ZXgucmVuZGVyKGAke2NoYW5nZUVxdX1gLCBlcXVQYXJhKTtcclxuXHJcbiAgICAgICAgJChlcXVQYXJhKVxyXG4gICAgICAgICAgICAuY3NzKFwiYW5pbWF0aW9uXCIsIGB0ZXh0QXBwZWFyICR7YW5pRHVyYXRpb259cyBlYXNlLWluLW91dGApXHJcbiAgICAgICAgICAgIC5vbmUoXCJhbmltYXRpb25lbmRcIiwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICQoZXF1UGFyYSkuY3NzKFwib3BhY2l0eVwiLCAxKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoYW5pU2V0dGluZ3MpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNob3dZQW5zKGFuaVNldHRpbmdzKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICAvKlxyXG4gICAgR2V0IHRoZSBjdXJyZW50IHJvdW5kIGFuZCBjdXJyZW50IGRhdGEgcG9pbnRzXHJcbiAgICAqL1xyXG4gICAgdmFyIHBvaW50RGF0YSA9IGFuaVNldHRpbmdzLmRhdGFwb2ludHNbYW5pU2V0dGluZ3MuY3VycmVudFJvdW5kXTtcclxuXHJcbiAgICAvKlxyXG4gICAgQW5pbWF0ZSB0aGUgbmV3IHkgdmFsdWUgdG8gdGhlIGNvb3JkaW5hdGVkIHkgY29sdW1uIGFuZCBvbmNlXHJcbiAgICBhbmltYXRpb24gaXMgZG9uZSB0aGVuIHJldHVybiB0aGUgcHJvbWlzZVxyXG4gICAgKi9cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xyXG4gICAgICAgICQoZXF1UGFyYSlcclxuICAgICAgICAgICAgLmNzcyhcImFuaW1hdGlvblwiLCBgdGV4dERpc2FwcGVhciAke2FuaUR1cmF0aW9ufXMgZWFzZS1pbi1vdXRgKVxyXG4gICAgICAgICAgICAub25lKFwiYW5pbWF0aW9uZW5kXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICQoZXF1UGFyYSkuY3NzKFwib3BhY2l0eVwiLCAwKTtcclxuICAgICAgICAgICAgICAgIGthdGV4LnJlbmRlcihgJHtwb2ludERhdGEueX1gLCBlcXVQYXJhKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoYW5pU2V0dGluZ3MpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcblxyXG4vKlxyXG5TaG93IHRoZSBjaG9zZW4gZXF1YXRpb24gdG8gZ3JhcGhcclxuKi9cclxuZnVuY3Rpb24gc2hvd0VxdWF0aW9uQWdhaW4oYW5pU2V0dGluZ3MpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xyXG4gICAgICAgICQoZXF1UGFyYSlcclxuICAgICAgICAgICAgLmNzcyhcImFuaW1hdGlvblwiLCBgdGV4dEFwcGVhciAke2FuaUR1cmF0aW9ufXMgZWFzZS1pbi1vdXRgKVxyXG4gICAgICAgICAgICAub25lKFwiYW5pbWF0aW9uZW5kXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAkKGVxdVBhcmEpLmNzcyhcIm9wYWNpdHlcIiwgMSk7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKGFuaVNldHRpbmdzKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuLypcclxuT25jZSB0aGUgeS12YWx1ZSBhcHBlYXJzIGluIHRoZSBjb3JyZWN0IHktY29sdW1uIHRoZW4gZnVsZmlsbCB0aGUgcHJvbWlzZS5cclxuKi9cclxuZnVuY3Rpb24gcGxhY2VZVmFsdWUoYW5pU2V0dGluZ3MpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgdmFyIHBvaW50RGF0YSA9IGFuaVNldHRpbmdzLmRhdGFwb2ludHNbYW5pU2V0dGluZ3MuY3VycmVudFJvdW5kXTtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xyXG4gICAgICAgIHZhciBpbnB1dCA9ICQoYHRkI3l2YWwke3BvaW50RGF0YS5pZCArIDF9YClbMF07XHJcbiAgICAgICAgJChpbnB1dCkuaHRtbChcIlwiKTtcclxuICAgICAgICAkKGlucHV0KS5hcHBlbmQoYDxwPiR7cG9pbnREYXRhLnl9PC9wPmApO1xyXG4gICAgICAgIHJlc29sdmUoYW5pU2V0dGluZ3MpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbi8qXHJcbk9uY2UgdGhlIGVxdWF0aW9uIGlzIGNsZWFyZWQgYW5kIHJlc2V0IHRvIHRoZSBkZWZhdWx0IGVxdWF0aW9uXHJcbnRoZW4gZnVsZmlsbCB0aGUgcHJvbWlzZVxyXG4qL1xyXG5mdW5jdGlvbiByZXNldFJvdW5kKGFuaVNldHRpbmdzKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICB2YXIgcG9pbnREYXRhID0gYW5pU2V0dGluZ3MuZGF0YXBvaW50c1thbmlTZXR0aW5ncy5jdXJyZW50Um91bmRdO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xyXG4gICAgICAgICQoZXF1UGFyYSlcclxuICAgICAgICAgICAgLmNzcyhcImFuaW1hdGlvblwiLCBgdGV4dERpc2FwcGVhciAke2FuaUR1cmF0aW9ufXMgZWFzZS1pbi1vdXRgKVxyXG4gICAgICAgICAgICAub25lKFwiYW5pbWF0aW9uZW5kXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAkKGVxdVBhcmEpLmNzcyhcIm9wYWNpdHlcIiwgMCk7XHJcbiAgICAgICAgICAgICAgICBrYXRleC5yZW5kZXIoYCR7cHJvZk9wdC5lcXVhdGlvbn1gLCBlcXVQYXJhKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoYW5pU2V0dGluZ3MpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcblxyXG4vKlxyXG5SZXR1cm4gdG8gZGVmYXVsdCBiZWdpbm5pbmcgZXF1YXRpb24gZm9yIHRoZSBuZXh0IGFuaW1hdGlvbiBvciBmb3IgdGhlIGVuZFxyXG4qL1xyXG5mdW5jdGlvbiBzaG93RGVmYXVsdEVxdShhbmlTZXR0aW5ncykge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XHJcbiAgICAgICAgJChlcXVQYXJhKVxyXG4gICAgICAgICAgICAuY3NzKFwiYW5pbWF0aW9uXCIsIGB0ZXh0QXBwZWFyICR7YW5pRHVyYXRpb259cyBlYXNlLWluLW91dGApXHJcbiAgICAgICAgICAgIC5vbmUoXCJhbmltYXRpb25lbmRcIiwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICQoZXF1UGFyYSkuY3NzKFwib3BhY2l0eVwiLCAxKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoYW5pU2V0dGluZ3MpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcblxyXG4vKlxyXG5BY2NlcHQgdGhlIGRhdGFwb2ludCBhbmQgaXRzIGl0ZXJhdG9yIGFuZCBwbG90IHRoYXQgcG9pbnQgYmVpbmcgcGFzc2VkIHRocm91Z2hcclxuKi9cclxuZnVuY3Rpb24gcGxvdHRlcihhbmlTZXR0aW5ncykge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICB2YXIgcG9pbnREYXRhID0gYW5pU2V0dGluZ3MuZGF0YXBvaW50c1thbmlTZXR0aW5ncy5jdXJyZW50Um91bmRdO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xyXG4gICAgICAgIGFuaVNldHRpbmdzLmdyYXBoT3B0LmNhbGxiYWNrKCk7XHJcbiAgICAgICAgcmVzb2x2ZShhbmlTZXR0aW5ncyk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuLypcclxuVGhpcyBmdW5jdGlvbiBhY3RzIGFzIGFuIGl0ZXJhdG9yIHNvIHRoYXQgdGhlIHByb21pc2UgY2hhaW4ga25vd3Mgd2hpY2hcclxuZGF0YXBvaW50IHRvIGhhbmRsZSBhbmQgdG8gYW5pbWF0ZVxyXG4qL1xyXG5mdW5jdGlvbiB1cGRhdGVSb3VuZChhbmlTZXR0aW5ncykge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgdmFyIHBsYWNlaG9sZGVyID0gYW5pU2V0dGluZ3MuZGF0YXBvaW50c1thbmlTZXR0aW5ncy5jdXJyZW50Um91bmRdO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xyXG4gICAgICAgIGFuaVNldHRpbmdzLmN1cnJlbnRSb3VuZCArPSAxO1xyXG4gICAgICAgIHBsYWNlaG9sZGVyLnVwZGF0ZVBvaW50ID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHJlc29sdmUoYW5pU2V0dGluZ3MpO1xyXG4gICAgfSk7XHJcbn07XHJcblxyXG4vKlxyXG5Ud28gZnVuY3Rpb25zIGluIG9yZGVyIHRvIHJlcGxhY2UgdGhlIGZ1bmN0aW9uIG1hY2hpbmUgZ2lmIHdpdGggdGhlIGFuaW1hdGVkXHJcbmdpZiBhbmQgYmFja3dhcmRzLlxyXG4qL1xyXG5mdW5jdGlvbiBhbmltYXRlRnVuY01hY2hpbmUoYW5pU2V0dGluZ3MpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xyXG4gICAgICAgICQoXCIjZnVuY3Rpb25NYWNoaW5lXCIpLmNzcyh7XHJcbiAgICAgICAgICAgIFwiYmFja2dyb3VuZC1pbWFnZVwiOiBcInVybCguL2Z1bmN0aW9uTWFjaGluZUFuaS5naWYpXCJcclxuICAgICAgICB9KVxyXG4gICAgICAgIHJlc29sdmUoYW5pU2V0dGluZ3MpXHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gc3RvcEFuaUZ1bmNNYWNoaW5lKGFuaVNldHRpbmdzKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcclxuICAgICAgICAkKFwiI2Z1bmN0aW9uTWFjaGluZVwiKS5jc3Moe1xyXG4gICAgICAgICAgICBcImJhY2tncm91bmQtaW1hZ2VcIjogXCJ1cmwoLi9mdW5jdGlvbk1hY2hpbmVTdGlsbC5naWYpXCJcclxuICAgICAgICB9KVxyXG4gICAgICAgIHJlc29sdmUoYW5pU2V0dGluZ3MpXHJcbiAgICB9KTtcclxufVxyXG5cclxuLypcclxuQSBmdW5jdGlvbiB0byBzaG93IHRoZSB5IGFuc3dlciBsZWF2aW5nIHRoZSBmdW5jdGlvbiBtYWNoaW5lIHRvXHJcbnN0YXJ0IHRoZSBuZXh0IGFuaW1hdGlvbiBvZiBnb2luZyBiYWNrIHRvIHRoZSB5IGNvbHVtbi5cclxuKi9cclxuZnVuY3Rpb24gbWluaUFuaShhbmlTZXR0aW5ncykge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XHJcblxyXG4gICAgICAgIHZhciBwbGFjZWhvbGRlciA9IGFuaVNldHRpbmdzLmRhdGFwb2ludHNbYW5pU2V0dGluZ3MuY3VycmVudFJvdW5kXSxcclxuICAgICAgICAgICAgeXZhbHVlID0gcGxhY2Vob2xkZXIueSxcclxuICAgICAgICAgICAgcGFyYSA9ICQoYDxwPiR7eXZhbHVlfTwvcD5gKTtcclxuXHJcbiAgICAgICAgJChcImJvZHlcIikuYXBwZW5kKHBhcmEpO1xyXG5cclxuICAgICAgICBwYXJhXHJcbiAgICAgICAgICAgIC5jc3Moe1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcclxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAsXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiA1NTAsXHJcbiAgICAgICAgICAgICAgICB0b3A6IDUwXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsXHJcbiAgICAgICAgICAgICAgICB0b3A6IDEwMFxyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgcGFyYS5jc3Moe1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IFwibm9uZVwiXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoYW5pU2V0dGluZ3MpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcblxyXG4vKlxyXG5BIHByb21pc2UgY2hhaW4gdG8gcnVuIHRocm91Z2ggdGhlIHdob2xlIGFuaW1hdGlvbiBwcm9jZXNzXHJcblxyXG5OT1RFXHJcbkEgcHJvbWlzZSBjaGFpbiBoYXMgYmVlbiB1dGl6aWxlZCBpbiBvcmRlciB0byBlYXNpbHkgcGx1Z2luXHJcbmV4dHJhIGZ1bmN0aW9ucyB0aGF0IHdvdWxkIGJlIGdyZWF0IHRvIGhhdmUgaW4gdGhlIGFuaW1hdGlvblxyXG5wcm9jZXNzLiAgQSBwcm9taXNlIGNoYWluIGhhcyBhbHNvIGJlZW4gdXNlZCBpbiBvcmRlciB0byB3YWl0XHJcbmZvciBhIGFuaW1hdGlvbiB0byBlbmQgdG8gc3RhcnQgdGhlIG5leHQgYW5pbWF0aW9uLlxyXG4qL1xyXG5cclxuZnVuY3Rpb24gYW5pUHJvbWlzZUNoYWluKGRwcywgY2hhaW4pIHtcclxuICAgIGRwcy5kYXRhcG9pbnRzLmZvckVhY2goZnVuY3Rpb24gKGRhdGFwb2ludCkge1xyXG4gICAgICAgIGlmIChkYXRhcG9pbnQudXBkYXRlUG9pbnQgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgY2hhaW4gPSBjaGFpblxyXG4gICAgICAgICAgICAgICAgLnRoZW4ocnVuQW5pbWF0aW9uKFwieFRvTWFjaGluZVwiLCBkYXRhcG9pbnQueCkpXHJcbiAgICAgICAgICAgICAgICAudGhlbihhbmltYXRlRnVuY01hY2hpbmUpXHJcbiAgICAgICAgICAgICAgICAudGhlbihzdGF0dXNNZXNzYWdlKFwiQ2FsY3VsYXRpbmdcIikpXHJcbiAgICAgICAgICAgICAgICAudGhlbihyZXBsYWNlWEVxdSlcclxuICAgICAgICAgICAgICAgIC50aGVuKHNob3dFdmFsdWF0ZUVxdSlcclxuICAgICAgICAgICAgICAgIC50aGVuKHNob3dZQW5zKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oc2hvd0VxdWF0aW9uQWdhaW4pXHJcbiAgICAgICAgICAgICAgICAudGhlbihzdG9wQW5pRnVuY01hY2hpbmUpXHJcbiAgICAgICAgICAgICAgICAudGhlbihtaW5pQW5pKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4ocnVuQW5pbWF0aW9uKFwibWFjaGluZVRvWVwiLCBkYXRhcG9pbnQueSkpXHJcbiAgICAgICAgICAgICAgICAudGhlbihwbGFjZVlWYWx1ZSlcclxuICAgICAgICAgICAgICAgIC50aGVuKHJ1bkFuaW1hdGlvbihcInlUb1N0YXR1c0JhclwiLCBgKCR7ZGF0YXBvaW50Lnh9LCR7ZGF0YXBvaW50Lnl9KWApKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oc3RhdHVzTWVzc2FnZShgUGxvdHRpbmcgKCR7ZGF0YXBvaW50Lnh9LCR7ZGF0YXBvaW50Lnl9KWApKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4ocGxvdHRlcilcclxuICAgICAgICAgICAgICAgIC50aGVuKHJlc2V0Um91bmQpXHJcbiAgICAgICAgICAgICAgICAudGhlbihzdGF0dXNNZXNzYWdlKGBgKSlcclxuICAgICAgICAgICAgICAgIC50aGVuKHNob3dEZWZhdWx0RXF1KTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNoYWluID0gY2hhaW4udGhlbih1cGRhdGVSb3VuZCk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuLypcclxuSWYgdGhlIFwiSGlkZSBBbmltYXRpb25cIiBjaGVja2JveCBpcyBjaGVja2VkIHRoZW4gc2tpcCB0aGUgd2hvbGUgYW5pbWF0aW9uXHJcbnByb21pc2UgY2hhaW4gYW5kIGp1c3QgYXBwZW5kIHRoZSB5IHZhbHVlc1xyXG4qL1xyXG5mdW5jdGlvbiBub0FuaVByb21pc2VDaGFpbihkcHMsIGNoYWluKSB7XHJcbiAgICBkcHMuZGF0YXBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uIChkYXRhcG9pbnQpIHtcclxuICAgICAgICBpZiAoZGF0YXBvaW50LnVwZGF0ZVBvaW50ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIGNoYWluID0gY2hhaW5cclxuICAgICAgICAgICAgICAgIC50aGVuKHBsYWNlWVZhbHVlKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4ocGxvdHRlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNoYWluID0gY2hhaW4udGhlbih1cGRhdGVSb3VuZCk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuLypcclxuSGFuZGxlIGFsbCBDU1MgYW5pbWF0aW9ucyBieSBjcmVhdGluZyBhIFByb21pc2UgY2hhaW4gdGhyb3VnaCBhIGZvciBsb29wLlxyXG4qL1xyXG5mdW5jdGlvbiBhbmltYXRvckNvbnRyb2woZHBzKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICB2YXIgbnVtQ29udGFpbmVyID0gJChcIiNudW1Db250YWluZXJcIiksXHJcbiAgICAgICAgY2hhaW4gPSBQcm9taXNlLnJlc29sdmUoZHBzKTtcclxuXHJcbiAgICBudW1Db250YWluZXIuaW5uZXJIVE1MID0gXCJcIjtcclxuXHJcbiAgICBpZiAoZHBzLmdyYXBoT3B0LmFuaW1hdGVIaWRlKSB7XHJcbiAgICAgICAgbm9BbmlQcm9taXNlQ2hhaW4oZHBzLCBjaGFpbik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGFuaVByb21pc2VDaGFpbihkcHMsIGNoYWluKTtcclxuICAgIH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
