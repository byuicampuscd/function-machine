"use strict";var plotGraph=function(){function t(t){return function(e){var n=(0).toFixed(2);return function(e){var a=t.x*e;this.textContent="( "+a.toFixed(2)+", "+n+")"}}}function e(t){return function(){var e=t.x.toFixed(2),n=t.y;return function(t){this.textContent="( "+e+", "+(n*t).toFixed(2)+")"}}}function n(t){return"graphPoint"+t}function a(t){var e=d3.selectAll(c).append("g").attr("class","point").attr("id",n(t.id));return e.append("circle").attr("r",4).attr("cx",0).attr("cy",0),e.append("text").text("(0, 0)").attr("x",5).attr("y",15),e.attr("transform","translate("+d(0)+" "+l(0)+")"),e}function r(r,i){var o,u,s=r.datapoints[r.currentRound];document.querySelectorAll(c+" .graph .line").length>0;r.datapoints.forEach(function(t){t.updatePoint&&d3.select("#"+n(t.id)).remove()}),r.graphOpt.graphHide?d3.select(c+" .graph .line").attr("display","none"):d3.select(c+" .graph .line").attr("display","inline"),s.updatePoint?(o=a(s),r.graphOpt.animateHide?(o.attr("transform","translate("+d(s.x)+" "+l(s.y)+")"),o.select("text").text("("+s.x+", "+s.y+")"),i(r)):(u=o.transition().duration(1500).ease("cubic-out").attr("transform","translate("+d(s.x)+" "+l(0)+")"),u.select("text").tween("text",t(s)),u.transition().duration(1500).ease("cubic-out").attr("transform","translate("+d(s.x)+" "+l(s.y)+")").each("end",function(){i(r)}).select("text").tween("text",e(s)))):i(r)}function i(t,e){var n=t.graphOpt,a={target:e,data:[{fn:n.equation}],xAxis:{domain:[n.view.x.min,n.view.x.max]},yAxis:{domain:[n.view.y.min,n.view.y.max]}};o=e,c=o+" .content",u=n.equation,s=functionPlot(a),d=s.meta.xScale,l=s.meta.yScale,d3.selectAll(c+" .point").remove()}var o,c,u,s,d,l;return{update:r,setup:i}}();
"use strict";!function(){for(var t,a,d,p,r=$("tbody"),n=19,e=1;e<=n;e++)p=$("<input>"),t=$("<td></td>"),a=$("<td></td>"),d=$("<tr></tr>"),$(d).attr("id","row"+e),$(p).attr("name","input"+e).attr("type","number"),$(a).attr("id","yval"+e),$(t).append(p),$(d).append(t).append(a),$(r).append(d)}();
"use strict";$(document).ready(function(){function n(n){var t=$("<option></option>").append(n.name);$(t).val(n.equation),$("select").append(t)}var t=location.search.substring(1),o=t.split("=")[1]+".json";$.getJSON(o,function(t){window.professorConfigFile=t,$.each(t,function(t,o){n(o),0===t&&changePlot(o.equation)})}).fail(function(){$("#status p").append("Add a query string")})});
"use strict";function changePlot(t){xMemory=[],clearValues(),window.profOpt=checkConfig(t);var n="y = ",e=""+t,o=$("#functionMachine #equ")[0],i=$("#functionMachine #y");$(o).empty(""),katex.render(n,i[0]),katex.render(e,o)}function stairStep(t){var n=246.5,e=document.styleSheets[document.styleSheets.length-1];e.insertRule("@keyframes "+t.name+" {\n                            0% {\n                                opacity: 1;\n                                top: "+t.startTopOff+"px;\n                                left: "+t.startLeftOff+"px;\n                            }\n                            10% {\n                                opacity: 1;\n                            }\n                            33% {\n                                top: "+t.startTopOff+"px;\n                                left: "+n+"px;\n                            }\n                            66% {\n                                top: "+t.endTopOff+"px;\n                                left: "+n+"px;\n                            }\n                            90% {\n                                opacity: 1;\n                            }\n                            100% {\n                                opacity: 0;\n                                top: "+t.endTopOff+"px;\n                                left: "+t.endLeftOff+"px;\n                            }\n                        }",e.cssRules.length)}function makeXToMachine(t,n){stairStep({startTopOff:t.top+5,startLeftOff:t.left+30,endTopOff:55,endLeftOff:300,name:"xToMachine"+n})}function makeMachineToY(t,n){stairStep({startTopOff:100,startLeftOff:530,endTopOff:t.top+5,endLeftOff:t.right+5,name:"machineToY"+n})}function makeYToStatusBar(t,n){stairStep({startTopOff:t.top+5,startLeftOff:t.right+10,endTopOff:150,endLeftOff:300,name:"yToStatusBar"+n})}function setUpObject(t,n,e){t.each(function(t){var o,i,a=$(this).val();if(a&&(o=+a,i=o.toFixed(profOpt.rounding),$(this).val(i),profOpt.view.x.min<=i&&i<=profOpt.view.x.max)){var p=n.equation.replace("x","("+i+")"),r=math.eval(p),u=(this.getBoundingClientRect(),{x:i,y:r.toFixed(profOpt.rounding),id:t,changeEqu:profOpt.equation.replace("x","("+i+")"),updatePoint:xMemory[t]!==i,element:$("#numContainer p").get(t)});u.updatePoint&&$("td#yval"+(t+1)).html(""),xMemory[t]=i,e.datapoints.push(u)}})}function startFuncMach(){var t=$("input[type='number']"),n=$("#animate:checked").length>0,e=$("#showGraph:checked").length>0,o={callback:function(t){return new Promise(function(n){console.log("finished plotting datapoint!"),n(t)})},animateHide:n,graphHide:e,equation:profOpt.equation,view:profOpt.view},i={datapoints:[],currentRound:0,graphOpt:o};setUpObject(t,o,i),animatorControl(i)}function checkConfig(t){var n;return $.each(professorConfigFile,function(e,o){o.equation===t&&(n=o)}),n}function clearValues(){var t=$("input[type='number']"),n=$("tr td:nth-of-type(2)");t.each(function(t,n){n.value=""}),n.each(function(t,n){n.innerHTML=""})}for(var xMemory=[],inputs=document.querySelectorAll("input[type='number']"),inputCount=inputs.length,run=!0,i=0;i<inputs.length;i++)inputs[i].oninput=function(t){var n=t.srcElement.value;profOpt.view.x.min<=n&&n<=profOpt.view.x.max?(run=!0,$("input[type='button'][value='Go!']").prop("disabled",!1).css({cursor:"pointer"}),$("#status p").html("")):(run=!1,$("input[type='button'][value='Go!']").prop("disabled",!0).css({cursor:"not-allowed"}),$("#status p").html(n+" x-value out of domains."))};for(var i=0;i<inputCount;i++){xMemory[i]=null;var inputCoor=inputs[i].getBoundingClientRect();makeXToMachine(inputCoor,i),makeMachineToY(inputCoor,i),makeYToStatusBar(inputCoor,i),$("#numContainer").append($("<p></p>"))}$("select").change(function(t){changePlot(t.target.value)}),$(document).keypress(function(t){13==t.which&&run&&startFuncMach()}),$("input[type='button'][value='Go!']").click(function(){run&&startFuncMach()});
"use strict";function runAnimation(n,t){return function(a){var e=a.datapoints[a.currentRound],i=e.element;return new Promise(function(e){$(i).html(t).css({animation:""+n+a.currentRound+" "+aniDuration+"s ease-in-out"}).one("animationend",function(n){e(a)})})}}function statusMessage(n){var t=$("#status p");return function(a){return new Promise(function(e){t.html(n),e(a)})}}function replaceXEqu(n){return new Promise(function(t){$(equPara).css("animation","textDisappear "+aniDuration+"s ease-in-out").one("animationend",function(a){$(equPara).css("opacity",0),t(n)})})}function showEvaluateEqu(n){var t=n.datapoints[n.currentRound],a=t.changeEqu;return new Promise(function(t){katex.render(""+a,equPara),$(equPara).css("animation","textAppear "+aniDuration+"s ease-in-out").one("animationend",function(a){$(equPara).css("opacity",1),t(n)})})}function showYAns(n){var t=n.datapoints[n.currentRound];return new Promise(function(a){$(equPara).css("animation","textDisappear "+aniDuration+"s ease-in-out").one("animationend",function(){$(equPara).css("opacity",0),katex.render(""+t.y,equPara),a(n)})})}function showEquationAgain(n){return new Promise(function(t){$(equPara).css("animation","textAppear "+aniDuration+"s ease-in-out").one("animationend",function(a){$(equPara).css("opacity",1),t(n)})})}function placeYValue(n){var t=n.datapoints[n.currentRound];return new Promise(function(a){var e=$("td#yval"+(t.id+1))[0];$(e).html(""),$(e).append("<p>"+t.y+"</p>"),a(n)})}function resetRound(n){n.datapoints[n.currentRound];return new Promise(function(t){$(equPara).css("animation","textDisappear "+aniDuration+"s ease-in-out").one("animationend",function(a){$(equPara).css("opacity",0),katex.render(""+profOpt.equation,equPara),t(n)})})}function showDefaultEqu(n){return new Promise(function(t){$(equPara).css("animation","textAppear "+aniDuration+"s ease-in-out").one("animationend",function(a){$(equPara).css("opacity",1),t(n)})})}function plotter(n){n.datapoints[n.currentRound];return new Promise(function(t){n.graphOpt.callback(),t(n)})}function updateRound(n){var t=n.datapoints[n.currentRound];return new Promise(function(a){n.currentRound+=1,t.updatePoint=!1,a(n)})}function animateFuncMachine(n){return new Promise(function(t){$("#functionMachine").css({"background-image":"url(./functionMachineAni.gif)"}),t(n)})}function stopAniFuncMachine(n){return new Promise(function(t){$("#functionMachine").css({"background-image":"url(./functionMachineStill.gif)"}),t(n)})}function miniAni(n){return new Promise(function(t){var a=n.datapoints[n.currentRound],e=a.y,i=$("<p>"+e+"</p>");$("body").append(i),i.css({position:"absolute",opacity:0,left:550,top:50}).animate({opacity:1,top:100},function(a){i.css({display:"none"}),t(n)})})}function aniPromiseChain(n,t){n.datapoints.forEach(function(n){n.updatePoint===!0&&(t=t.then(runAnimation("xToMachine",n.x)).then(animateFuncMachine).then(statusMessage("Calculating")).then(replaceXEqu).then(showEvaluateEqu).then(showYAns).then(showEquationAgain).then(stopAniFuncMachine).then(miniAni).then(runAnimation("machineToY",n.y)).then(placeYValue).then(runAnimation("yToStatusBar","("+n.x+","+n.y+")")).then(statusMessage("Plotting ("+n.x+","+n.y+")")).then(plotter).then(resetRound).then(statusMessage("")).then(showDefaultEqu)),t=t.then(updateRound)})}function noAniPromiseChain(n,t){n.datapoints.forEach(function(n){n.updatePoint===!0&&(t=t.then(placeYValue).then(plotter)),t=t.then(updateRound)})}function animatorControl(n){var t=$("#numContainer"),a=Promise.resolve(n);t.innerHTML="",n.graphOpt.animateHide?noAniPromiseChain(n,a):aniPromiseChain(n,a)}var equPara=$("#functionMachine #equ")[0],aniDuration=2;
//# sourceMappingURL=data:application/json;base64,
