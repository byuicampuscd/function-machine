"use strict";var plotGraph=function(){function t(t){return function(e){var n=(0).toFixed(2);return function(e){var a=t.x*e;this.textContent="( "+a.toFixed(2)+", "+n+")"}}}function e(t){return function(){var e=t.x,n=t.y;return function(t){this.textContent="( "+e+", "+(n*t).toFixed(2)+")"}}}function n(t){return"graphPoint"+t}function a(t){var e=d3.selectAll(c).append("g").attr("class","point").attr("id",n(t.id));return e.append("circle").attr("r",4).attr("cx",0).attr("cy",0),e.append("text").text("(0, 0)").attr("x",5).attr("y",15),e.attr("transform","translate("+l(0)+" "+d(0)+")"),e}function r(r,i){var o,u,s=r.datapoints[r.currentRound];document.querySelectorAll(c+" .graph .line").length>0;r.datapoints.forEach(function(t){t.updatePoint&&d3.select("#"+n(t.id)).remove()}),r.graphOpt.graphHide?d3.select(c+" .graph .line").attr("display","none"):d3.select(c+" .graph .line").attr("display","inline"),s.updatePoint?(o=a(s),r.graphOpt.animateHide?(o.attr("transform","translate("+l(s.x)+" "+d(s.y)+")"),o.select("text").text("("+s.x+", "+s.y+")"),i(r)):(u=o.transition().duration(1500).ease("cubic-out").attr("transform","translate("+l(s.x)+" "+d(0)+")"),u.select("text").tween("text",t(s)),u.transition().duration(1500).ease("cubic-out").attr("transform","translate("+l(s.x)+" "+d(s.y)+")").each("end",function(){i(r)}).select("text").tween("text",e(s)))):i(r)}function i(t,e){var n=t.graphOpt,a={target:e,data:[{fn:n.equation}],xAxis:{domain:[n.view.x.min,n.view.x.max]},yAxis:{domain:[n.view.y.min,n.view.y.max]},disableZoom:!0};o=e,c=o+" .content",u=n.equation,s=functionPlot(a),l=s.meta.xScale,d=s.meta.yScale,d3.selectAll(c+" .point").remove()}var o,c,u,s,l,d;return{update:r,setup:i}}();
"use strict";!function(){for(var t,a,d,p,r=$("tbody"),n=19,e=1;e<=n;e++)p=$("<input>"),t=$("<td></td>"),a=$("<td></td>"),d=$("<tr></tr>"),$(d).attr("id","row"+e),$(p).attr("name","input"+e).attr("type","number"),$(a).attr("id","yval"+e),$(t).append(p),$(d).append(t).append(a),$(r).append(d)}();
"use strict";$(document).ready(function(){function n(n){var t=$("<option></option>").append(n.name);$(t).val(n.equation),$("select").append(t)}var t=location.search.substring(1),o=t.split("=")[1]+".json";$.getJSON(o,function(t){window.professorConfigFile=t,$.each(t,function(t,o){n(o),0===t&&changePlot(o.equation)})}).fail(function(){$("#status p").append("Add a query string")})});
"use strict";function changePlot(t){xMemory=[],clearValues(),window.profOpt=checkConfig(t);var n="y = ",e=""+t,o=$("#functionMachine #equ")[0],a=$("#functionMachine #y");$(o).empty(""),katex.render(n,a[0]),katex.render(e,o)}function stairStep(t){var n=246.5,e=document.styleSheets[document.styleSheets.length-1];e.insertRule("@keyframes "+t.name+" {\n                            0% {\n                                opacity: 1;\n                                top: "+t.startTopOff+"px;\n                                left: "+t.startLeftOff+"px;\n                            }\n                            10% {\n                                opacity: 1;\n                            }\n                            33% {\n                                top: "+t.startTopOff+"px;\n                                left: "+n+"px;\n                            }\n                            66% {\n                                top: "+t.endTopOff+"px;\n                                left: "+n+"px;\n                            }\n                            90% {\n                                opacity: 1;\n                            }\n                            100% {\n                                opacity: 0;\n                                top: "+t.endTopOff+"px;\n                                left: "+t.endLeftOff+"px;\n                            }\n                        }",e.cssRules.length)}function makeXToMachine(t,n){stairStep({startTopOff:t.top+5,startLeftOff:t.left+30,endTopOff:55,endLeftOff:300,name:"xToMachine"+n})}function makeMachineToY(t,n){stairStep({startTopOff:100,startLeftOff:530,endTopOff:t.top+5,endLeftOff:t.right+5,name:"machineToY"+n})}function makeYToStatusBar(t,n){stairStep({startTopOff:t.top+5,startLeftOff:t.right+10,endTopOff:150,endLeftOff:300,name:"yToStatusBar"+n})}function setUpObject(t,n,e){t.each(function(t){var o,a,i=$(this).val();if(i&&(o=+i,a=o.toFixed(profOpt.rounding),$(this).val(a),profOpt.view.x.min<=a&&a<=profOpt.view.x.max)){var p=n.equation.replace("x","("+a+")"),r=math.eval(p),u=(this.getBoundingClientRect(),{x:a,y:r.toFixed(profOpt.rounding),id:t,changeEqu:profOpt.equation.replace("x","("+a+")"),updatePoint:xMemory[t]!==a,element:$("#numContainer p").get(t)});u.updatePoint&&$("td#yval"+(t+1)).html(""),xMemory[t]=a,e.datapoints.push(u)}})}function startFuncMach(){var t=$("input[type='number']"),n=$("#animate:checked").length>0,e=$("#showGraph:checked").length>0,o={callback:function(t){return new Promise(function(n){t.datapoints[t.currentRound].updatePoint=!1,n(t)})},animateHide:n,graphHide:e,equation:profOpt.equation,view:profOpt.view},a={datapoints:[],currentRound:0,graphOpt:o};setUpObject(t,o,a),animatorControl(a)}function checkConfig(t){var n;return $.each(professorConfigFile,function(e,o){o.equation===t&&(n=o)}),n}function clearValues(){var t=$("input[type='number']"),n=$("tr td:nth-of-type(2)");t.each(function(t,n){n.value=""}),n.each(function(t,n){n.innerHTML=""})}for(var xMemory=[],inputs=document.querySelectorAll("input[type='number']"),inputCount=inputs.length,run=!0,i=0;i<inputs.length;i++)inputs[i].oninput=function(t){var n=t.srcElement.value;profOpt.view.x.min<=n&&n<=profOpt.view.x.max?(run=!0,$("input[type='button'][value='Go!']").prop("disabled",!1).css({cursor:"pointer"}),$("#status p").html("")):(run=!1,$("input[type='button'][value='Go!']").prop("disabled",!0).css({cursor:"not-allowed"}),$("#status p").html(n+" x-value out of domains."))};for(var i=0;i<inputCount;i++){xMemory[i]=null;var inputCoor=inputs[i].getBoundingClientRect();makeXToMachine(inputCoor,i),makeMachineToY(inputCoor,i),makeYToStatusBar(inputCoor,i),$("#numContainer").append($("<p></p>"))}$("select").change(function(t){changePlot(t.target.value)}),$(document).keypress(function(t){13==t.which&&run&&startFuncMach()}),$("input[type='button'][value='Go!']").click(function(){run&&startFuncMach()});
"use strict";function runAnimation(n,t){return function(e){var a=e.datapoints[e.currentRound],i=a.element;return new Promise(function(a){$(i).html(t).css({animation:""+n+e.currentRound+" "+aniDuration+"s ease-in-out"}).one("animationend",function(n){a(e)})})}}function statusMessage(n){var t=$("#status p");return function(e){return new Promise(function(a){t.html(n),a(e)})}}function replaceXEqu(n){return new Promise(function(t){$(equPara).css("animation","textDisappear "+aniDuration+"s ease-in-out").one("animationend",function(e){$(equPara).css("opacity",0),t(n)})})}function showEvaluateEqu(n){var t=n.datapoints[n.currentRound],e=t.changeEqu;return new Promise(function(t){katex.render(""+e,equPara),$(equPara).css("animation","textAppear "+aniDuration+"s ease-in-out").one("animationend",function(e){$(equPara).css("opacity",1),t(n)})})}function showYAns(n){var t=n.datapoints[n.currentRound];return new Promise(function(e){$(equPara).css("animation","textDisappear "+aniDuration+"s ease-in-out").one("animationend",function(){$(equPara).css("opacity",0),katex.render(""+t.y,equPara),e(n)})})}function showEquationAgain(n){return new Promise(function(t){$(equPara).css("animation","textAppear "+aniDuration+"s ease-in-out").one("animationend",function(e){$(equPara).css("opacity",1),t(n)})})}function placeYValue(n){var t=n.datapoints[n.currentRound];return new Promise(function(e){var a=$("td#yval"+(t.id+1))[0];$(a).html(""),$(a).append("<p>"+t.y+"</p>"),e(n)})}function resetRound(n){return new Promise(function(t){$(equPara).css("animation","textDisappear "+aniDuration+"s ease-in-out").one("animationend",function(e){$(equPara).css("opacity",0),katex.render(""+profOpt.equation,equPara),t(n)})})}function showDefaultEqu(n){return new Promise(function(t){$(equPara).css("animation","textAppear "+aniDuration+"s ease-in-out").one("animationend",function(e){$(equPara).css("opacity",1),t(n)})})}function plotter(n){n.datapoints[n.currentRound];return new Promise(function(t){plotGraph.update(n,n.graphOpt.callback),t(n)})}function updateRound(n){var t=n.datapoints[n.currentRound];return new Promise(function(e){n.currentRound+=1,t.updatePoint=!1,e(n)})}function animateFuncMachine(n){return new Promise(function(t){$("#functionMachine").css({"background-image":"url(../img/functionMachineAni.gif)"}),t(n)})}function stopAniFuncMachine(n){return new Promise(function(t){$("#functionMachine").css({"background-image":"url(../img/functionMachineStill.gif)"}),t(n)})}function miniAni(n){return new Promise(function(t){var e=n.datapoints[n.currentRound],a=e.y,i=$("<p>"+a+"</p>");$("body").append(i),i.css({position:"absolute",opacity:0,left:550,top:50}).animate({opacity:1,top:100},function(e){i.css({display:"none"}),t(n)})})}function aniPromiseChain(n,t){plotGraph.setup(n,"#graph"),n.datapoints.forEach(function(n){n.updatePoint===!0&&(t=t.then(runAnimation("xToMachine",n.x)).then(animateFuncMachine).then(statusMessage("Calculating")).then(replaceXEqu).then(showEvaluateEqu).then(showYAns).then(showEquationAgain).then(stopAniFuncMachine).then(miniAni).then(runAnimation("machineToY",n.y)).then(placeYValue).then(runAnimation("yToStatusBar","("+n.x+","+n.y+")")).then(statusMessage("Plotting ("+n.x+","+n.y+")")).then(plotter).then(statusMessage("Resetting")).then(resetRound).then(statusMessage("")).then(showDefaultEqu)),t=t.then(updateRound)})}function animateHide(n,t){plotGraph.setup(n,"#graph"),n.datapoints.forEach(function(n){n.updatePoint===!0&&(t=t.then(placeYValue).then(statusMessage("Plotting ("+n.x+","+n.y+")")).then(plotter).then(statusMessage("Resetting")).then(resetRound).then(showDefaultEqu)),t=t.then(updateRound)})}function noGraph(n,t){n.datapoints.forEach(function(n){n.updatePoint===!0&&(t=t.then(runAnimation("xToMachine",n.x)).then(animateFuncMachine).then(statusMessage("Calculating")).then(replaceXEqu).then(showEvaluateEqu).then(showYAns).then(showEquationAgain).then(stopAniFuncMachine).then(miniAni).then(runAnimation("machineToY",n.y)).then(placeYValue).then(statusMessage("Resetting")).then(resetRound).then(statusMessage("")).then(showDefaultEqu)),t=t.then(updateRound)})}function solveForY(n,t){n.datapoints.forEach(function(n){n.updatePoint===!0&&(t=t.then(placeYValue)),t=t.then(updateRound)})}function animatorControl(n){var t=$("#numContainer"),e=Promise.resolve(n);t.innerHTML="",n.graphOpt.graphHide&&n.graphOpt.animateHide?solveForY(n,e):n.graphOpt.animateHide?animateHide(n,e):n.graphOpt.graphHide?noGraph(n,e):aniPromiseChain(n,e)}var equPara=$("#functionMachine #equ")[0],aniDuration=2;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsb3RHcmFwaC5qcyIsIm1haW4uanMiLCJhamF4LmpzIiwiZXZlbnRzLmpzIiwiYW5pbWF0b3Jjb250cm9sLmpzIl0sIm5hbWVzIjpbInBsb3RHcmFwaCIsInVwZGF0ZVRleHRYIiwiY3VycmVudFBvaW50IiwiZCIsInplcm8iLCJ0b0ZpeGVkIiwidCIsImxvY2F0aW9uIiwieCIsInRoaXMiLCJ0ZXh0Q29udGVudCIsInVwZGF0ZVRleHRZIiwieFJvdW5kZWQiLCJ5VmFsIiwieSIsIm1ha2VQb2ludElkIiwibnVtSW4iLCJtYWtlUG9pbnRHcm91cCIsInBvaW50R3JvdXAiLCJkMyIsInNlbGVjdEFsbCIsImRvdExvY2F0aW9uIiwiYXBwZW5kIiwiYXR0ciIsImlkIiwidGV4dCIsInhTY2FsZSIsInlTY2FsZSIsInVwZGF0ZSIsImFuaU9wdGlvbnMiLCJjYWxsYmFjayIsInRyYW5zaXRpb24iLCJkYXRhcG9pbnRzIiwiY3VycmVudFJvdW5kIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwibGVuZ3RoIiwiZm9yRWFjaCIsInBvaW50IiwidXBkYXRlUG9pbnQiLCJzZWxlY3QiLCJyZW1vdmUiLCJncmFwaE9wdCIsImdyYXBoSGlkZSIsImFuaW1hdGVIaWRlIiwiZHVyYXRpb24iLCJlYXNlIiwidHdlZW4iLCJlYWNoIiwic2V0dXAiLCJzZWxlY3RvciIsIm9wdHNJbiIsImdyYXBoT3B0aW9ucyIsInRhcmdldCIsImRhdGEiLCJmbiIsImVxdWF0aW9uIiwieEF4aXMiLCJkb21haW4iLCJ2aWV3IiwibWluIiwibWF4IiwieUF4aXMiLCJkaXNhYmxlWm9vbSIsImdyYXBoTG9jYXRpb25TZWxlY3RvciIsImN1cnJlbnRFcXVhdGlvbiIsImZ1blBsb3QiLCJmdW5jdGlvblBsb3QiLCJtZXRhIiwidGQxIiwidGQyIiwidHIiLCJpbnB1dCIsInRib2R5IiwiJCIsInJvd0NvdW50IiwiaiIsInJlYWR5Iiwic2hvd1Byb2ZPcHRpb25zIiwicHJvZk9wdCIsIm9wdCIsIm5hbWUiLCJ2YWwiLCJxdWVyeVN0cmluZyIsInNlYXJjaCIsInN1YnN0cmluZyIsInF1ZXJ5Iiwic3BsaXQiLCJnZXRKU09OIiwicmVzdWx0Iiwid2luZG93IiwicHJvZmVzc29yQ29uZmlnRmlsZSIsImkiLCJjaGFuZ2VQbG90IiwiZmFpbCIsInhNZW1vcnkiLCJjbGVhclZhbHVlcyIsImNoZWNrQ29uZmlnIiwiZXF1YXQiLCJlcXVQYXJhIiwieVBhcmEiLCJlbXB0eSIsImthdGV4IiwicmVuZGVyIiwic3RhaXJTdGVwIiwib3B0aW9ucyIsImhpZ2h3YXlQYXRoIiwibGFzdFNoZWV0Iiwic3R5bGVTaGVldHMiLCJpbnNlcnRSdWxlIiwic3RhcnRUb3BPZmYiLCJzdGFydExlZnRPZmYiLCJlbmRUb3BPZmYiLCJlbmRMZWZ0T2ZmIiwiY3NzUnVsZXMiLCJtYWtlWFRvTWFjaGluZSIsImlucHV0Q29yZHMiLCJpbmRleCIsInRvcCIsImxlZnQiLCJtYWtlTWFjaGluZVRvWSIsInJpZ2h0IiwibWFrZVlUb1N0YXR1c0JhciIsInNldFVwT2JqZWN0IiwieGlucHV0cyIsImFuaVNldHRpbmdzIiwieHZhbCIsInJvdW5kaXQiLCJ4dmFsdWUiLCJyb3VuZGluZyIsInJlcGxhY2VYIiwicmVwbGFjZSIsInl2YWwiLCJtYXRoIiwiZXZhbCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImNoYW5nZUVxdSIsImVsZW1lbnQiLCJnZXQiLCJodG1sIiwicHVzaCIsInN0YXJ0RnVuY01hY2giLCJoaWRlQW5pbWF0aW9uQ2hlY2tlZCIsImhpZGVHcmFwaENoZWNrZWQiLCJQcm9taXNlIiwicmVzb2x2ZSIsImFuaW1hdG9yQ29udHJvbCIsIml0ZW0iLCJ5aW5wdXRzIiwidmFsdWUiLCJpbm5lckhUTUwiLCJpbnB1dHMiLCJpbnB1dENvdW50IiwicnVuIiwib25pbnB1dCIsImUiLCJ4SW5wdXRWYWwiLCJzcmNFbGVtZW50IiwicHJvcCIsImNzcyIsImN1cnNvciIsImlucHV0Q29vciIsImNoYW5nZSIsImtleXByZXNzIiwid2hpY2giLCJjbGljayIsInJ1bkFuaW1hdGlvbiIsImRhdGFwb2ludCIsIm51bVBhcmEiLCJhbmltYXRpb24iLCJhbmlEdXJhdGlvbiIsIm9uZSIsInN0YXR1c01lc3NhZ2UiLCJtZXNzYWdlIiwic3RhdHVzQmFyIiwicmVwbGFjZVhFcXUiLCJzaG93RXZhbHVhdGVFcXUiLCJwb2ludERhdGEiLCJzaG93WUFucyIsInNob3dFcXVhdGlvbkFnYWluIiwicGxhY2VZVmFsdWUiLCJyZXNldFJvdW5kIiwic2hvd0RlZmF1bHRFcXUiLCJwbG90dGVyIiwidXBkYXRlUm91bmQiLCJwbGFjZWhvbGRlciIsImFuaW1hdGVGdW5jTWFjaGluZSIsImJhY2tncm91bmQtaW1hZ2UiLCJzdG9wQW5pRnVuY01hY2hpbmUiLCJtaW5pQW5pIiwieXZhbHVlIiwicGFyYSIsInBvc2l0aW9uIiwib3BhY2l0eSIsImFuaW1hdGUiLCJkaXNwbGF5IiwiYW5pUHJvbWlzZUNoYWluIiwiZHBzIiwiY2hhaW4iLCJ0aGVuIiwibm9HcmFwaCIsInNvbHZlRm9yWSIsIm51bUNvbnRhaW5lciJdLCJtYXBwaW5ncyI6IkFBQUEsWUFFQSxJQUFJQSxXQUFhLFdBV2IsUUFBU0MsR0FBWUMsR0FDakIsTUFBTyxVQUFVQyxHQUNiLEdBQUlDLElBQVEsR0FBR0MsUUFBUSxFQUV2QixPQUFPLFVBQVVDLEdBQ2IsR0FBSUMsR0FBV0wsRUFBYU0sRUFBSUYsQ0FDaENHLE1BQUtDLFlBQWMsS0FBT0gsRUFBU0YsUUFBUSxHQUFLLEtBQU9ELEVBQU8sTUFLMUUsUUFBU08sR0FBWVQsR0FDakIsTUFBTyxZQUVILEdBQUlVLEdBQVdWLEVBQWFNLEVBQ3hCSyxFQUFPWCxFQUFhWSxDQUV4QixPQUFPLFVBQVVSLEdBQ2JHLEtBQUtDLFlBQWMsS0FBT0UsRUFBVyxNQUFRQyxFQUFPUCxHQUFHRCxRQUFRLEdBQUssTUFLaEYsUUFBU1UsR0FBWUMsR0FDakIsTUFBTyxhQUFlQSxFQUcxQixRQUFTQyxHQUFlZixHQUNwQixHQUFJZ0IsR0FBYUMsR0FBR0Ms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dUIsS0FBS3JCLFVBQ0xxQixLQUFLcEIsbUJBQ0xvQixLQUFLWCxvQkFDTFcsS0FBS1YsU0FDTFUsS0FBS2pDLGFBQWEsYUFBY0MsRUFBVXpKLElBQzFDeUwsS0FBS25CLGFBQ0xtQixLQUFLM0IsY0FBQUEsY0FDTDJCLEtBQUtsQixZQUNMa0IsS0FBSzNCLGNBQUFBLEtBQ0wyQixLQUFLakIsaUJBRWRnQixFQUFRQSxFQUFNQyxLQUFLZixlQVUzQixRQUFTaUIsV0FBVUosRUFBS0MsR0FFcEJELEVBQUlySyxXQUFXSyxRQUFRLFNBQVVrSSxHQUN6QkEsRUFBVWhJLGVBQWdCLElBQzFCK0osRUFBUUEsRUFDSEMsS0FBS25CLGNBRWRrQixFQUFRQSxFQUFNQyxLQUFLZixlQU8zQixRQUFTdEMsaUJBQWdCbUQsR0FHckIsR0FBSUssR0FBZWhJLEVBQUUsaUJBQ2pCNEgsRUFBUXRELFFBQVFDLFFBQVFvRCxFQUU1QkssR0FBYXBELFVBQVksR0FFckIrQyxFQUFJM0osU0FBU0MsV0FBYTBKLEVBQUkzSixTQUFTRSxZQUN2QzZKLFVBQVVKLEVBQUtDLEdBQ1JELEVBQUkzSixTQUFTRSxZQUNwQkEsWUFBWXlKLEVBQUtDLEdBQ1ZELEVBQUkzSixTQUFTQyxVQUNwQjZKLFFBQVFILEVBQUtDLEdBRWJGLGdCQUFnQkMsRUFBS0MsR0FoWTdCLEdBQUluRyxTQUFVekIsRUFBRSx5QkFBeUIsR0FDckNnRyxZQUFjIiwiZmlsZSI6InNjcmlwdHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKmpzbGludCBwbHVzcGx1czogdHJ1ZSwgYnJvd3NlcjogdHJ1ZSwgZGV2ZWw6IHRydWUqL1xuLypnbG9iYWwgZDMsIGZ1bmN0aW9uUGxvdCovXG52YXIgcGxvdEdyYXBoID0gKGZ1bmN0aW9uICgpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICB2YXIgZ3JhcGhMb2NhdGlvblNlbGVjdG9yLFxuICAgICAgICBkb3RMb2NhdGlvbixcbiAgICAgICAgY3VycmVudEVxdWF0aW9uLFxuICAgICAgICBmdW5QbG90LFxuICAgICAgICB4U2NhbGUsXG4gICAgICAgIHlTY2FsZSxcbiAgICAgICAgZnJlZUlkID0gMDtcblxuICAgIC8vdGhlc2UgdHdvIGZ1bmN0aW9ucyBtYWtlIHRoZSBmYWN0b3J5IGZ1bmN0aW9uIHRoYXQgaXMgdXNlZCBpbiB0aGUgYW5pbWF0aW9ucyBmb3IgdGhlIHBvaW50IGxhYmVsc1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVRleHRYKGN1cnJlbnRQb2ludCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgIHZhciB6ZXJvID0gKDApLnRvRml4ZWQoMik7XG5cbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHZhciBsb2NhdGlvbiA9IGN1cnJlbnRQb2ludC54ICogdDtcbiAgICAgICAgICAgICAgICB0aGlzLnRleHRDb250ZW50ID0gXCIoIFwiICsgbG9jYXRpb24udG9GaXhlZCgyKSArIFwiLCBcIiArIHplcm8gKyBcIilcIjtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlVGV4dFkoY3VycmVudFBvaW50KSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIHZhciB4Um91bmRlZCA9IGN1cnJlbnRQb2ludC54LFxuICAgICAgICAgICAgICAgIHlWYWwgPSBjdXJyZW50UG9pbnQueTtcblxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0Q29udGVudCA9IFwiKCBcIiArIHhSb3VuZGVkICsgXCIsIFwiICsgKHlWYWwgKiB0KS50b0ZpeGVkKDIpICsgXCIpXCI7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VQb2ludElkKG51bUluKSB7XG4gICAgICAgIHJldHVybiAnZ3JhcGhQb2ludCcgKyBudW1JbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlUG9pbnRHcm91cChjdXJyZW50UG9pbnQpIHtcbiAgICAgICAgdmFyIHBvaW50R3JvdXAgPSBkMy5zZWxlY3RBbGwoZG90TG9jYXRpb24pLmFwcGVuZCgnZycpXG4gICAgICAgICAgICAuYXR0cignY2xhc3MnLCAncG9pbnQnKVxuICAgICAgICAgICAgLmF0dHIoJ2lkJywgbWFrZVBvaW50SWQoY3VycmVudFBvaW50LmlkKSk7XG5cbiAgICAgICAgLy9hZGQgdGhlIGNpcmNsZVxuICAgICAgICBwb2ludEdyb3VwLmFwcGVuZCgnY2lyY2xlJylcbiAgICAgICAgICAgIC5hdHRyKCdyJywgNClcbiAgICAgICAgICAgIC5hdHRyKCdjeCcsIDApXG4gICAgICAgICAgICAuYXR0cignY3knLCAwKTtcblxuICAgICAgICAvL2FkZCB0aGUgbGFiZWxcbiAgICAgICAgcG9pbnRHcm91cC5hcHBlbmQoJ3RleHQnKVxuICAgICAgICAgICAgLnRleHQoJygwLCAwKScpXG4gICAgICAgICAgICAuYXR0cigneCcsIDUpXG4gICAgICAgICAgICAuYXR0cigneScsIDE1KTtcbiAgICAgICAgLy9tb3ZlIGl0IHRvICgwLDApXG4gICAgICAgIHBvaW50R3JvdXAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgeFNjYWxlKDApICsgJyAnICsgeVNjYWxlKDApICsgJyknKTtcbiAgICAgICAgcmV0dXJuIHBvaW50R3JvdXA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlKGFuaU9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBjdXJyZW50UG9pbnQgPSBhbmlPcHRpb25zLmRhdGFwb2ludHNbYW5pT3B0aW9ucy5jdXJyZW50Um91bmRdLFxuICAgICAgICAgICAgbGluZUlzUGxvdHRlZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZG90TG9jYXRpb24gKyAnIC5ncmFwaCAubGluZScpLmxlbmd0aCA+IDAsXG4gICAgICAgICAgICBwb2ludEdyb3VwLFxuICAgICAgICAgICAgdHJhbnNpdGlvbjtcblxuICAgICAgICAvL2NsZWFyIGFueSBwb2ludHMgdGhhdCB3aWxsIGdldCB1cGRhdGVkXG4gICAgICAgIGFuaU9wdGlvbnMuZGF0YXBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uIChwb2ludCkge1xuICAgICAgICAgICAgaWYgKHBvaW50LnVwZGF0ZVBvaW50KSB7XG4gICAgICAgICAgICAgICAgZDMuc2VsZWN0KCcjJyArIG1ha2VQb2ludElkKHBvaW50LmlkKSkucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vY2hlY2sgaWYgd2UgbmVlZCB0byBoaWRlIG9yIHNob3cgdGhlIHBsb3RsaW5lXG4gICAgICAgIGlmIChhbmlPcHRpb25zLmdyYXBoT3B0LmdyYXBoSGlkZSkge1xuICAgICAgICAgICAgZDMuc2VsZWN0KGRvdExvY2F0aW9uICsgJyAuZ3JhcGggLmxpbmUnKS5hdHRyKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGQzLnNlbGVjdChkb3RMb2NhdGlvbiArICcgLmdyYXBoIC5saW5lJykuYXR0cignZGlzcGxheScsICdpbmxpbmUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vZG9lcyB0aGUgY3VycmVudFJvdW5kIG5lZWQgdG8gYmUgdXBkYXRlZGVkP1xuICAgICAgICBpZiAoIWN1cnJlbnRQb2ludC51cGRhdGVQb2ludCkge1xuICAgICAgICAgICAgLy9ub3RoaXRuZyB0byBzZWUgaGVyZSBqdXN0IGtlZXAgb24gbW92aW5nXG4gICAgICAgICAgICBjYWxsYmFjayhhbmlPcHRpb25zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vZHJhdyBwb2ludFxuICAgICAgICAgICAgcG9pbnRHcm91cCA9IG1ha2VQb2ludEdyb3VwKGN1cnJlbnRQb2ludCk7XG5cbiAgICAgICAgICAgIC8vaXMgYW5pbWF0aW9uIG9uP1xuICAgICAgICAgICAgaWYgKGFuaU9wdGlvbnMuZ3JhcGhPcHQuYW5pbWF0ZUhpZGUpIHtcbiAgICAgICAgICAgICAgICAvL21vdmUgaXQgaW50byBwbGFjZSB3aXRob3V0IGFuaW1hdGlvblxuICAgICAgICAgICAgICAgIHBvaW50R3JvdXAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgeFNjYWxlKGN1cnJlbnRQb2ludC54KSArICcgJyArIHlTY2FsZShjdXJyZW50UG9pbnQueSkgKyAnKScpO1xuICAgICAgICAgICAgICAgIC8vdXBkYXRlIHRoZSBsYWJsZVxuICAgICAgICAgICAgICAgIHBvaW50R3JvdXAuc2VsZWN0KCd0ZXh0JykudGV4dCgnKCcgKyBjdXJyZW50UG9pbnQueCArICcsICcgKyBjdXJyZW50UG9pbnQueSArICcpJyk7XG4gICAgICAgICAgICAgICAgLy9jYWxsIGNhbGxiYWNrXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soYW5pT3B0aW9ucyk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy9kcmF3IHBvaW50IHdpdGggYW5pbWFpb25cbiAgICAgICAgICAgICAgICAvL0ZpcnN0IHRyYW5zaXRpb24gLSBtb3ZlIHRoZSBncm91cCBpbiB0aGUgWFxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb24gPSBwb2ludEdyb3VwXG4gICAgICAgICAgICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgICAgICAgICAgLmR1cmF0aW9uKDE1MDApXG4gICAgICAgICAgICAgICAgICAgIC5lYXNlKCdjdWJpYy1vdXQnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgeFNjYWxlKGN1cnJlbnRQb2ludC54KSArICcgJyArIHlTY2FsZSgwKSArICcpJyk7XG4gICAgICAgICAgICAgICAgLy9zdWIgdHJhbnNpdGlvbiAtIHVwZGF0ZSB0aGUgbGFiZWxcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uLnNlbGVjdCgndGV4dCcpLnR3ZWVuKCd0ZXh0JywgdXBkYXRlVGV4dFgoY3VycmVudFBvaW50KSk7XG5cbiAgICAgICAgICAgICAgICAvL1NlY29uZCB0cmFuc2l0aW9uIC0gbW92ZSB0aGUgZ3JvdXAgaW4gdGhlIFlcbiAgICAgICAgICAgICAgICAvL3N1YiB0cmFuc2l0aW9uIC0gdXBkYXRlIHRoZSBsYWJlbFxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb24udHJhbnNpdGlvbigpXG4gICAgICAgICAgICAgICAgICAgIC5kdXJhdGlvbigxNTAwKVxuICAgICAgICAgICAgICAgICAgICAuZWFzZSgnY3ViaWMtb3V0JylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArIHhTY2FsZShjdXJyZW50UG9pbnQueCkgKyAnICcgKyB5U2NhbGUoY3VycmVudFBvaW50LnkpICsgJyknKVxuICAgICAgICAgICAgICAgICAgICAuZWFjaCgnZW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soYW5pT3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5zZWxlY3QoJ3RleHQnKS50d2VlbigndGV4dCcsIHVwZGF0ZVRleHRZKGN1cnJlbnRQb2ludCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0dXAoYW5pT3B0aW9ucywgc2VsZWN0b3IpIHtcbiAgICAgICAgLy9zdWdhclxuICAgICAgICB2YXIgb3B0c0luID0gYW5pT3B0aW9ucy5ncmFwaE9wdCxcbiAgICAgICAgICAgIGdyYXBoT3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IHNlbGVjdG9yLFxuICAgICAgICAgICAgICAgIGRhdGE6IFt7XG4gICAgICAgICAgICAgICAgICAgIGZuOiBvcHRzSW4uZXF1YXRpb25cbiAgICAgICAgICAgICAgICB9XSxcbiAgICAgICAgICAgICAgICB4QXhpczoge1xuICAgICAgICAgICAgICAgICAgICBkb21haW46IFtvcHRzSW4udmlldy54Lm1pbiwgb3B0c0luLnZpZXcueC5tYXhdXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB5QXhpczoge1xuICAgICAgICAgICAgICAgICAgICBkb21haW46IFtvcHRzSW4udmlldy55Lm1pbiwgb3B0c0luLnZpZXcueS5tYXhdXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkaXNhYmxlWm9vbTogdHJ1ZSxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgLy9zYXZlIHNvbWUgdGhpbmdzIGZvciBsYXRlclxuICAgICAgICBncmFwaExvY2F0aW9uU2VsZWN0b3IgPSBzZWxlY3RvcjtcbiAgICAgICAgZG90TG9jYXRpb24gPSBncmFwaExvY2F0aW9uU2VsZWN0b3IgKyAnIC5jb250ZW50JztcbiAgICAgICAgY3VycmVudEVxdWF0aW9uID0gb3B0c0luLmVxdWF0aW9uO1xuXG4gICAgICAgIC8vbWFrZSB0aGUgcGxvdCBhbmQgc2NhbGVzXG4gICAgICAgIGZ1blBsb3QgPSBmdW5jdGlvblBsb3QoZ3JhcGhPcHRpb25zKTtcbiAgICAgICAgeFNjYWxlID0gZnVuUGxvdC5tZXRhLnhTY2FsZTtcbiAgICAgICAgeVNjYWxlID0gZnVuUGxvdC5tZXRhLnlTY2FsZTtcblxuICAgICAgICAvL2NsZWFuIG91dCBhbnkgb2xkIHBvaW50cyBmaXJzdFxuICAgICAgICBkMy5zZWxlY3RBbGwoZG90TG9jYXRpb24gKyAnIC5wb2ludCcpLnJlbW92ZSgpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHVwZGF0ZTogdXBkYXRlLFxuICAgICAgICBzZXR1cDogc2V0dXBcbiAgICB9O1xufSgpKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICAvKlxuICAgIE1ha2UgdGhlIHdob2xlIHRhYmxlIGFuZCBjZWxscyBmb3IgdGhlIGlucHV0IGJveGVzIGFuZCB1c2VyIGludGVyYWN0aW9uLlxuICAgICovXG4gICAgdmFyIHRib2R5ID0gJChcInRib2R5XCIpLFxuICAgICAgICB0ZDEsXG4gICAgICAgIHRkMixcbiAgICAgICAgdHIsXG4gICAgICAgIGlucHV0LFxuICAgICAgICByb3dDb3VudCA9IDE5O1xuXG4gICAgZm9yICh2YXIgaiA9IDE7IGogPD0gcm93Q291bnQ7IGorKykge1xuICAgICAgICBpbnB1dCA9ICQoXCI8aW5wdXQ+XCIpO1xuICAgICAgICB0ZDEgPSAkKFwiPHRkPjwvdGQ+XCIpO1xuICAgICAgICB0ZDIgPSAkKFwiPHRkPjwvdGQ+XCIpO1xuICAgICAgICB0ciA9ICQoXCI8dHI+PC90cj5cIik7XG5cbiAgICAgICAgJCh0cikuYXR0cihcImlkXCIsIGByb3cke2p9YCk7XG5cbiAgICAgICAgJChpbnB1dCkuYXR0cihcIm5hbWVcIiwgYGlucHV0JHtqfWApLmF0dHIoXCJ0eXBlXCIsIFwibnVtYmVyXCIpO1xuXG4gICAgICAgICQodGQyKS5hdHRyKFwiaWRcIiwgYHl2YWwke2p9YCk7XG5cbiAgICAgICAgJCh0ZDEpLmFwcGVuZChpbnB1dCk7XG4gICAgICAgICQodHIpLmFwcGVuZCh0ZDEpLmFwcGVuZCh0ZDIpO1xuICAgICAgICAkKHRib2R5KS5hcHBlbmQodHIpO1xuICAgIH1cbn0oKSk7XG4iLCIkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG5cbiAgICAvKlxuICAgIExvYWQgUXVlcnkgc3Vic3RyaW5nXG4gICAgKi9cbiAgICB2YXIgcXVlcnlTdHJpbmcgPSBsb2NhdGlvbi5zZWFyY2guc3Vic3RyaW5nKDEpLFxuICAgICAgICBxdWVyeSA9IHF1ZXJ5U3RyaW5nLnNwbGl0KFwiPVwiKVsxXSArIFwiLmpzb25cIjtcblxuICAgIGZ1bmN0aW9uIHNob3dQcm9mT3B0aW9ucyhwcm9mT3B0KSB7XG4gICAgICAgIC8qXG4gICAgICAgIEFwcGVuZCB0aGUgcHJvZmVzc29yJ3MgY2hvc2VuIGVxdWF0aW9ucyB0byB0aGUgYXBwbGljYXRpb25cbiAgICAgICAgKi9cblxuICAgICAgICB2YXIgb3B0ID0gJChcIjxvcHRpb24+PC9vcHRpb24+XCIpLmFwcGVuZChwcm9mT3B0Lm5hbWUpO1xuXG4gICAgICAgICQob3B0KS52YWwocHJvZk9wdC5lcXVhdGlvbik7XG5cbiAgICAgICAgJChcInNlbGVjdFwiKS5hcHBlbmQob3B0KTtcbiAgICB9XG5cbiAgICAvKlxuICAgIExvYWQgdGhlIHByb2Zlc3NvciBjb25maWd1cmF0aW9uIGZpbGVcbiAgICAqL1xuXG4gICAgJC5nZXRKU09OKHF1ZXJ5LCBmdW5jdGlvbiAocmVzdWx0KSB7XG5cbiAgICAgICAgd2luZG93LnByb2Zlc3NvckNvbmZpZ0ZpbGUgPSByZXN1bHQ7XG5cbiAgICAgICAgJC5lYWNoKHJlc3VsdCwgZnVuY3Rpb24gKGksIHByb2ZPcHQpIHtcblxuICAgICAgICAgICAgc2hvd1Byb2ZPcHRpb25zKHByb2ZPcHQpO1xuXG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgRGlzcGxheSB0aGUgZGVmYXVsdCBlcXVhdGlvbiB0byB0aGUgZnVuY3Rpb24gbWFjaGluZVxuICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAvL2luIGV2ZW50cy5qc1xuICAgICAgICAgICAgICAgIGNoYW5nZVBsb3QocHJvZk9wdC5lcXVhdGlvbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG5cbiAgICB9KS5mYWlsKGZ1bmN0aW9uKCkge1xuICAgICAgICAkKFwiI3N0YXR1cyBwXCIpLmFwcGVuZChcIkFkZCBhIHF1ZXJ5IHN0cmluZ1wiKVxuICAgIH0pOztcblxufSk7XG4iLCIvKlxuU2V0IHVwIHRoZSBiYXNpYyB2YXJpYWJsZXMuXG4qL1xudmFyIHhNZW1vcnkgPSBbXSxcbiAgICBpbnB1dHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbdHlwZT0nbnVtYmVyJ11cIiksXG4gICAgaW5wdXRDb3VudCA9IGlucHV0cy5sZW5ndGgsXG4gICAgcnVuID0gdHJ1ZTtcblxuLypcbkF0dGFjaCBhbiBvbmlucHV0IGV2ZW50IHRvIGFsbCB0aGUgaW5wdXQgYm94ZXMgaW4gb3JkZXIgdG8gdmFsaWRhdGUgdGhlbSB3aXRoaW4gdGhlIGJvdW5kc1xudGhhdCB0aGUgcHJvZmVzc29yIGhhcyBjaG9zZW4uICBJZiB0aGUgYm91bmRzIGFyZSBleGNlZWRlZCwgdGhlbiBkaXNhYmxlIHRoZSBcIkdvIVwiIGJ1dHRvblxuYW5kIG91dHB1dCBhIG1lc3NhZ2UgdG8gdGhlIHN0YXR1cyBiYXIuXG4qL1xuZm9yICh2YXIgaSA9IDA7IGkgPCBpbnB1dHMubGVuZ3RoOyBpKyspIHtcblxuICAgIGlucHV0c1tpXS5vbmlucHV0ID0gZnVuY3Rpb24gKGUpIHtcblxuICAgICAgICB2YXIgeElucHV0VmFsID0gZS5zcmNFbGVtZW50LnZhbHVlO1xuICAgICAgICBpZiAocHJvZk9wdC52aWV3LngubWluIDw9IHhJbnB1dFZhbCAmJiB4SW5wdXRWYWwgPD0gcHJvZk9wdC52aWV3LngubWF4KSB7XG4gICAgICAgICAgICBydW4gPSB0cnVlO1xuICAgICAgICAgICAgJChcImlucHV0W3R5cGU9J2J1dHRvbiddW3ZhbHVlPSdHbyEnXVwiKVxuICAgICAgICAgICAgICAgIC5wcm9wKFwiZGlzYWJsZWRcIiwgZmFsc2UpXG4gICAgICAgICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIFwiY3Vyc29yXCI6IFwicG9pbnRlclwiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAkKFwiI3N0YXR1cyBwXCIpLmh0bWwoYGApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcnVuID0gZmFsc2U7XG4gICAgICAgICAgICAkKFwiaW5wdXRbdHlwZT0nYnV0dG9uJ11bdmFsdWU9J0dvISddXCIpXG4gICAgICAgICAgICAgICAgLnByb3AoXCJkaXNhYmxlZFwiLCB0cnVlKVxuICAgICAgICAgICAgICAgIC5jc3Moe1xuICAgICAgICAgICAgICAgICAgICBcImN1cnNvclwiOiBcIm5vdC1hbGxvd2VkXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICQoXCIjc3RhdHVzIHBcIikuaHRtbChgJHt4SW5wdXRWYWx9IHgtdmFsdWUgb3V0IG9mIGRvbWFpbnMuYCk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG4vKlxuRGlwc2xheSBLYXRleCBlcXVhdGlvbi4gQUxTTyB1c2VkIGluIGFqYXguanNcbiovXG5mdW5jdGlvbiBjaGFuZ2VQbG90KHZhbCkge1xuXG4gICAgeE1lbW9yeSA9IFtdO1xuXG4gICAgY2xlYXJWYWx1ZXMoKTtcblxuICAgIHdpbmRvdy5wcm9mT3B0ID0gY2hlY2tDb25maWcodmFsKTtcbiAgICB2YXIgeSA9IGB5ID0gYCxcbiAgICAgICAgZXF1YXQgPSBgJHt2YWx9YCxcbiAgICAgICAgZXF1UGFyYSA9ICQoXCIjZnVuY3Rpb25NYWNoaW5lICNlcXVcIilbMF0sXG4gICAgICAgIHlQYXJhID0gJChcIiNmdW5jdGlvbk1hY2hpbmUgI3lcIik7XG5cbiAgICAkKGVxdVBhcmEpLmVtcHR5KFwiXCIpO1xuXG4gICAga2F0ZXgucmVuZGVyKHksIHlQYXJhWzBdKTtcbiAgICBrYXRleC5yZW5kZXIoZXF1YXQsIGVxdVBhcmEpO1xufVxuXG4vKlxuQW5pbWF0aW9uIHBhdGggZm9yIHRoZSBzdGFpcnN0ZXBcbiovXG5mdW5jdGlvbiBzdGFpclN0ZXAob3B0aW9ucykge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIHZhciBoaWdod2F5UGF0aCA9IDI0Ni41LFxuICAgICAgICBsYXN0U2hlZXQgPSBkb2N1bWVudC5zdHlsZVNoZWV0c1tkb2N1bWVudC5zdHlsZVNoZWV0cy5sZW5ndGggLSAxXTtcbiAgICBsYXN0U2hlZXQuaW5zZXJ0UnVsZShgQGtleWZyYW1lcyAke29wdGlvbnMubmFtZX0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAke29wdGlvbnMuc3RhcnRUb3BPZmZ9cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6ICR7b3B0aW9ucy5zdGFydExlZnRPZmZ9cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEwJSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDMzJSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogJHtvcHRpb25zLnN0YXJ0VG9wT2ZmfXB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAke2hpZ2h3YXlQYXRofXB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA2NiUge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6ICR7b3B0aW9ucy5lbmRUb3BPZmZ9cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6ICR7aGlnaHdheVBhdGh9cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDkwJSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEwMCUge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6ICR7b3B0aW9ucy5lbmRUb3BPZmZ9cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6ICR7b3B0aW9ucy5lbmRMZWZ0T2ZmfXB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1gLCBsYXN0U2hlZXQuY3NzUnVsZXMubGVuZ3RoKTtcbn1cblxuLypcbkEgc2V0IG9mIGZ1bmN0aW9ucyB1c2luZyB0aGUgc3RhaXJzdGVwIGFuaW1hdGlvbiB0ZW1wbGF0ZVxudG8gY3JlYXRlIHBhdGh3YXlzIHdpdGggY29vcmRpbmF0ZSBkYXRhXG4qL1xuZnVuY3Rpb24gbWFrZVhUb01hY2hpbmUoaW5wdXRDb3JkcywgaW5kZXgpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICBzdGFpclN0ZXAoe1xuICAgICAgICBzdGFydFRvcE9mZjogaW5wdXRDb3Jkcy50b3AgKyA1LFxuICAgICAgICBzdGFydExlZnRPZmY6IGlucHV0Q29yZHMubGVmdCArIDMwLFxuICAgICAgICBlbmRUb3BPZmY6IDU1LFxuICAgICAgICBlbmRMZWZ0T2ZmOiAzMDAsXG4gICAgICAgIG5hbWU6IGB4VG9NYWNoaW5lJHtpbmRleH1gXG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIG1ha2VNYWNoaW5lVG9ZKGlucHV0Q29yZHMsIGluZGV4KSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgc3RhaXJTdGVwKHtcbiAgICAgICAgc3RhcnRUb3BPZmY6IDEwMCxcbiAgICAgICAgc3RhcnRMZWZ0T2ZmOiA1MzAsXG4gICAgICAgIGVuZFRvcE9mZjogaW5wdXRDb3Jkcy50b3AgKyA1LFxuICAgICAgICBlbmRMZWZ0T2ZmOiBpbnB1dENvcmRzLnJpZ2h0ICsgNSxcbiAgICAgICAgbmFtZTogYG1hY2hpbmVUb1kke2luZGV4fWBcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gbWFrZVlUb1N0YXR1c0JhcihpbnB1dENvcmRzLCBpbmRleCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIHN0YWlyU3RlcCh7XG4gICAgICAgIHN0YXJ0VG9wT2ZmOiBpbnB1dENvcmRzLnRvcCArIDUsXG4gICAgICAgIHN0YXJ0TGVmdE9mZjogaW5wdXRDb3Jkcy5yaWdodCArIDEwLFxuICAgICAgICBlbmRUb3BPZmY6IDE1MCxcbiAgICAgICAgZW5kTGVmdE9mZjogMzAwLFxuICAgICAgICBuYW1lOiBgeVRvU3RhdHVzQmFyJHtpbmRleH1gXG4gICAgfSk7XG59XG5cbi8qXG5TZXQgdXAgdGhlIHhNZW1vcnkgYXJyYXkgYW5kIHRoZSBhbmltYXRpb24gcGF0aHMgZm9yIGVhY2ggaW5wdXQgYm94LlxuXG5OT1RFOiBTZXR0aW5nIHVwIHRoZSB4TWVtb3J5IGFycmF5IGFsc28gbWFrZXMgaXQgc28gdGhhdCBubyBhbmltYXRpb25zXG4gICAgICBhcmUgcmVwZWF0ZWQgYnkgbXVsdGlwbGUgY2xpY2tzIG9uIHRoZSBcIkdvIVwiIGJ1dHRvbi5cbiovXG5mb3IgKHZhciBpID0gMDsgaSA8IGlucHV0Q291bnQ7IGkrKykge1xuICAgIHhNZW1vcnlbaV0gPSBudWxsO1xuXG4gICAgdmFyIGlucHV0Q29vciA9IGlucHV0c1tpXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgIG1ha2VYVG9NYWNoaW5lKGlucHV0Q29vciwgaSk7XG4gICAgbWFrZU1hY2hpbmVUb1koaW5wdXRDb29yLCBpKTtcbiAgICBtYWtlWVRvU3RhdHVzQmFyKGlucHV0Q29vciwgaSk7XG4gICAgJChcIiNudW1Db250YWluZXJcIikuYXBwZW5kKCQoYDxwPjwvcD5gKSk7XG59XG5cbi8qXG5TZXQgdXAgdGhlIG9iamVjdCB0aGF0IHdpbGwgYmUgcGFzc2VkIHRocm91Z2ggdGhlIHByb21pc2UgY2hhaW5cbmluIGFuaW1hdG9yY29udHJvbC5cbiovXG5mdW5jdGlvbiBzZXRVcE9iamVjdCh4aW5wdXRzLCBncmFwaE9wdCwgYW5pU2V0dGluZ3MpIHtcbiAgICB4aW5wdXRzLmVhY2goZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgdmFyIHh2YWx1ZSA9ICQodGhpcykudmFsKCksXG4gICAgICAgICAgICB4dmFsLFxuICAgICAgICAgICAgcm91bmRpdDtcblxuICAgICAgICBpZiAoeHZhbHVlKSB7XG4gICAgICAgICAgICB4dmFsID0gK3h2YWx1ZTtcbiAgICAgICAgICAgIHJvdW5kaXQgPSB4dmFsLnRvRml4ZWQocHJvZk9wdC5yb3VuZGluZyk7XG5cbiAgICAgICAgICAgICQodGhpcykudmFsKHJvdW5kaXQpO1xuXG4gICAgICAgICAgICBpZiAocHJvZk9wdC52aWV3LngubWluIDw9IHJvdW5kaXQgJiYgcm91bmRpdCA8PSBwcm9mT3B0LnZpZXcueC5tYXgpIHtcblxuICAgICAgICAgICAgICAgIHZhciByZXBsYWNlWCA9IGdyYXBoT3B0LmVxdWF0aW9uLnJlcGxhY2UoXCJ4XCIsIGAoJHtyb3VuZGl0fSlgKSxcbiAgICAgICAgICAgICAgICAgICAgeXZhbCA9IG1hdGguZXZhbChyZXBsYWNlWCksXG4gICAgICAgICAgICAgICAgICAgIGlucHV0Q29vciA9IHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICAgICAgICAgICAgICAgIHBvaW50ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogcm91bmRpdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IHl2YWwudG9GaXhlZChwcm9mT3B0LnJvdW5kaW5nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlRXF1OiBwcm9mT3B0LmVxdWF0aW9uLnJlcGxhY2UoXCJ4XCIsIGAoJHtyb3VuZGl0fSlgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVBvaW50OiB4TWVtb3J5W2ldICE9PSByb3VuZGl0LFxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogJChcIiNudW1Db250YWluZXIgcFwiKS5nZXQoaSlcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgQ2xlYXIgb3V0IHRoZSBZcyB3aGVuIHRoZXkgZG9uJ3QgZXF1YWwgZWFjaCBvdGhlciBhbmQgbmVlZCB0byBiZSB1cGRhdGVkXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBpZiAocG9pbnQudXBkYXRlUG9pbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgJChgdGQjeXZhbCR7aSArIDF9YCkuaHRtbChcIlwiKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvKlVwZGF0ZSB0aGUgeG1lbW9yeSovXG4gICAgICAgICAgICAgICAgeE1lbW9yeVtpXSA9IHJvdW5kaXQ7XG4gICAgICAgICAgICAgICAgYW5pU2V0dGluZ3MuZGF0YXBvaW50cy5wdXNoKHBvaW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG4vKlxuU2V0IGFsbCB0aGUgZGF0YSB0aGF0IHdpbGwgYmUgc2V0IHRvIGFuaVNldHRpbmdzIGluIHRoZSBzZXRVcE9iamVjdCBmdW5jdGlvblxuXG5OT1RFXG5ncmFwaE9wdC5jYWxsYmFjayBzdGlsbCBuZWVkcyBhIHZpYWJsZSBtZXRob2QhXG4qL1xuZnVuY3Rpb24gc3RhcnRGdW5jTWFjaCgpIHtcblxuICAgIHZhciB4aW5wdXRzID0gJChcImlucHV0W3R5cGU9J251bWJlciddXCIpLFxuICAgICAgICBoaWRlQW5pbWF0aW9uQ2hlY2tlZCA9ICQoXCIjYW5pbWF0ZTpjaGVja2VkXCIpLmxlbmd0aCA+IDAsXG4gICAgICAgIGhpZGVHcmFwaENoZWNrZWQgPSAkKFwiI3Nob3dHcmFwaDpjaGVja2VkXCIpLmxlbmd0aCA+IDAsXG4gICAgICAgIGdyYXBoT3B0ID0ge1xuICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uIChhbmlTZXR0aW5ncykge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgICAgICBhbmlTZXR0aW5ncy5kYXRhcG9pbnRzW2FuaVNldHRpbmdzLmN1cnJlbnRSb3VuZF0udXBkYXRlUG9pbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShhbmlTZXR0aW5ncyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYW5pbWF0ZUhpZGU6IGhpZGVBbmltYXRpb25DaGVja2VkLFxuICAgICAgICAgICAgZ3JhcGhIaWRlOiBoaWRlR3JhcGhDaGVja2VkLFxuICAgICAgICAgICAgZXF1YXRpb246IHByb2ZPcHQuZXF1YXRpb24sXG4gICAgICAgICAgICB2aWV3OiBwcm9mT3B0LnZpZXdcbiAgICAgICAgfSxcbiAgICAgICAgYW5pU2V0dGluZ3MgPSB7XG4gICAgICAgICAgICBkYXRhcG9pbnRzOiBbXSxcbiAgICAgICAgICAgIGN1cnJlbnRSb3VuZDogMCxcbiAgICAgICAgICAgIGdyYXBoT3B0OiBncmFwaE9wdFxuICAgICAgICB9O1xuXG4gICAgc2V0VXBPYmplY3QoeGlucHV0cywgZ3JhcGhPcHQsIGFuaVNldHRpbmdzKTtcblxuICAgIC8qU2V0IHVwIHRoZSBncmFwaCovXG4gICAgLy8gICAgcGxvdEdyYXBoLnNldHVwKGFuaVNldHRpbmdzLCBcIiNncmFwaFwiKTtcblxuICAgIGFuaW1hdG9yQ29udHJvbChhbmlTZXR0aW5ncyk7XG59XG5cbi8qXG5GdW5jdGlvbiB0byBzZWxlY3QgdGhlIGNob3NlbiBlcXVhdGlvbiB3aXRoIGl0cyBuYW1lIGFuZCBncmFwaCB3aW5kb3cgYm91bmRhcmllcy5cbiovXG5mdW5jdGlvbiBjaGVja0NvbmZpZyh2YWwpIHtcbiAgICB2YXIgcHJvZk9wdDtcbiAgICAkLmVhY2gocHJvZmVzc29yQ29uZmlnRmlsZSwgZnVuY3Rpb24gKGksIGl0ZW0pIHtcbiAgICAgICAgaWYgKGl0ZW0uZXF1YXRpb24gPT09IHZhbCkge1xuICAgICAgICAgICAgcHJvZk9wdCA9IGl0ZW07XG4gICAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBwcm9mT3B0O1xufVxuXG4vKlxuVXBvbiBjaG9vc2luZyBhbm90aGVyIGVxdWF0aW9uIHRvIGdyYXBoLCBjbGVhciBhbGwgdGhlIHZhbHVlc1xuKi9cbmZ1bmN0aW9uIGNsZWFyVmFsdWVzKCkge1xuICAgIHZhciB4aW5wdXRzID0gJChcImlucHV0W3R5cGU9J251bWJlciddXCIpLFxuICAgICAgICB5aW5wdXRzID0gJChgdHIgdGQ6bnRoLW9mLXR5cGUoMilgKTtcblxuICAgIHhpbnB1dHMuZWFjaChmdW5jdGlvbiAoaSwgaXRlbSkge1xuICAgICAgICBpdGVtLnZhbHVlID0gXCJcIjtcbiAgICB9KTtcblxuICAgIHlpbnB1dHMuZWFjaChmdW5jdGlvbiAoaSwgaXRlbSkge1xuICAgICAgICBpdGVtLmlubmVySFRNTCA9IFwiXCI7XG4gICAgfSk7XG59XG5cbi8qXG5PbmNoYW5nZSBldmVudCBoYW5kbGVyIGZvciB0aGUgc2VsZWN0IGh0bWwgZWxlbWVudC5cbiovXG4kKFwic2VsZWN0XCIpLmNoYW5nZShmdW5jdGlvbiAoZSkge1xuICAgIGNoYW5nZVBsb3QoZS50YXJnZXQudmFsdWUpO1xufSk7XG5cbi8qXG5ET0NVTUVOVCBrZXlkb3duIGV2ZW50IGhhbmRsZXJcbiovXG4kKGRvY3VtZW50KS5rZXlwcmVzcyhmdW5jdGlvbiAoZSkge1xuICAgIGlmIChlLndoaWNoID09IDEzICYmIHJ1bikge1xuICAgICAgICBzdGFydEZ1bmNNYWNoKCk7XG4gICAgfVxufSk7XG5cbi8qXG5HTyEgQ2xpY2sgZXZlbnQgaGFuZGxlclxuKi9cbiQoXCJpbnB1dFt0eXBlPSdidXR0b24nXVt2YWx1ZT0nR28hJ11cIikuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgIGlmIChydW4pIHtcbiAgICAgICAgc3RhcnRGdW5jTWFjaCgpO1xuICAgIH1cbn0pO1xuIiwidmFyIGVxdVBhcmEgPSAkKFwiI2Z1bmN0aW9uTWFjaGluZSAjZXF1XCIpWzBdLFxuICAgIGFuaUR1cmF0aW9uID0gMjtcblxuZnVuY3Rpb24gcnVuQW5pbWF0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgLypcbiAgICBUaGlzIGlzIGEgZnVuY3Rpb24gZmFjdG9yeSB3aGljaCB3aWxsIGdyYWIgdGhlXG4gICAgbmVjZXNzYXJ5IGRhdGEgYW5kIHRoZW4gcmV0dXJuIHRoZSBmdW5jdGlvbiBwcm9taXNlXG4gICAgKi9cbiAgICByZXR1cm4gZnVuY3Rpb24gYW5pbWF0aW9uKGFuaVNldHRpbmdzKSB7XG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICB2YXIgZGF0YXBvaW50ID0gYW5pU2V0dGluZ3MuZGF0YXBvaW50c1thbmlTZXR0aW5ncy5jdXJyZW50Um91bmRdLFxuICAgICAgICAgICAgbnVtUGFyYSA9IGRhdGFwb2ludC5lbGVtZW50O1xuXG4gICAgICAgIC8qXG4gICAgICAgIE1ha2UgdGhlIHByb21pc2UgdGhhdCB3aGVuIHRoZSBkeW5hbWljXG4gICAgICAgIGFuaW1hdGlvbiBwYXRoIGlzIGRvbmUgdGhlbiB0aGlzIHByb21pc2UgaXMgZmluaXNoZWRcbiAgICAgICAgKi9cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICAkKG51bVBhcmEpXG4gICAgICAgICAgICAgICAgLmh0bWwodmFsdWUpXG4gICAgICAgICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIFwiYW5pbWF0aW9uXCI6IGAke25hbWV9JHthbmlTZXR0aW5ncy5jdXJyZW50Um91bmR9ICR7YW5pRHVyYXRpb259cyBlYXNlLWluLW91dGAsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAub25lKCdhbmltYXRpb25lbmQnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGFuaVNldHRpbmdzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICB9O1xufVxuXG5mdW5jdGlvbiBzdGF0dXNNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAvKlxuICAgIFRoaXMgaXMgYSBmdW5jdGlvbiBmYWN0b3J5IHdoaWNoIHdpbGwgZ3JhYiB0aGVcbiAgICBuZWNlc3NhcnkgZGF0YSBhbmQgdGhlbiByZXR1cm4gdGhlIGZ1bmN0aW9uIHByb21pc2VcbiAgICAqL1xuICAgIHZhciBzdGF0dXNCYXIgPSAkKFwiI3N0YXR1cyBwXCIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhbmlTZXR0aW5ncykge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgIHN0YXR1c0Jhci5odG1sKG1lc3NhZ2UpO1xuICAgICAgICAgICAgcmVzb2x2ZShhbmlTZXR0aW5ncyk7XG4gICAgICAgIH0pO1xuXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZVhFcXUoYW5pU2V0dGluZ3MpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIC8qXG4gICAgUmVwbGFjZSB0aGUgeCBpbiB0aGUgZGlzYXBwZWFyZWQgZXF1YXRpb24gd2l0aG91dCBoYXZpbmcgdGhlIHkgZGlzYXBwZWFyLlxuICAgICovXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICQoZXF1UGFyYSlcbiAgICAgICAgICAgIC5jc3MoXCJhbmltYXRpb25cIiwgYHRleHREaXNhcHBlYXIgJHthbmlEdXJhdGlvbn1zIGVhc2UtaW4tb3V0YClcbiAgICAgICAgICAgIC5vbmUoXCJhbmltYXRpb25lbmRcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAkKGVxdVBhcmEpLmNzcyhcIm9wYWNpdHlcIiwgMCk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShhbmlTZXR0aW5ncyk7XG4gICAgICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gc2hvd0V2YWx1YXRlRXF1KGFuaVNldHRpbmdzKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICAvKlxuICAgIEdldCB0aGUgeSBhbnN3ZXIgYW5kIHRoZSB4LWNoYW5nZWQgZXF1YXRpb25cbiAgICAqL1xuICAgIHZhciBwb2ludERhdGEgPSBhbmlTZXR0aW5ncy5kYXRhcG9pbnRzW2FuaVNldHRpbmdzLmN1cnJlbnRSb3VuZF0sXG4gICAgICAgIGNoYW5nZUVxdSA9IHBvaW50RGF0YS5jaGFuZ2VFcXU7XG5cbiAgICAvKlxuICAgIFNob3cgdGhlIG5ldyBlcXVhdGlvbiB3aXRoIHRoZSByZXBsYWNlZCB4LXZhbHVlIGVxdWF0aW9uXG4gICAgKi9cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAga2F0ZXgucmVuZGVyKGAke2NoYW5nZUVxdX1gLCBlcXVQYXJhKTtcblxuICAgICAgICAkKGVxdVBhcmEpXG4gICAgICAgICAgICAuY3NzKFwiYW5pbWF0aW9uXCIsIGB0ZXh0QXBwZWFyICR7YW5pRHVyYXRpb259cyBlYXNlLWluLW91dGApXG4gICAgICAgICAgICAub25lKFwiYW5pbWF0aW9uZW5kXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgJChlcXVQYXJhKS5jc3MoXCJvcGFjaXR5XCIsIDEpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoYW5pU2V0dGluZ3MpO1xuICAgICAgICAgICAgfSlcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gc2hvd1lBbnMoYW5pU2V0dGluZ3MpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIC8qXG4gICAgR2V0IHRoZSBjdXJyZW50IHJvdW5kIGFuZCBjdXJyZW50IGRhdGEgcG9pbnRzXG4gICAgKi9cbiAgICB2YXIgcG9pbnREYXRhID0gYW5pU2V0dGluZ3MuZGF0YXBvaW50c1thbmlTZXR0aW5ncy5jdXJyZW50Um91bmRdO1xuXG4gICAgLypcbiAgICBBbmltYXRlIHRoZSBuZXcgeSB2YWx1ZSB0byB0aGUgY29vcmRpbmF0ZWQgeSBjb2x1bW4gYW5kIG9uY2VcbiAgICBhbmltYXRpb24gaXMgZG9uZSB0aGVuIHJldHVybiB0aGUgcHJvbWlzZVxuICAgICovXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICQoZXF1UGFyYSlcbiAgICAgICAgICAgIC5jc3MoXCJhbmltYXRpb25cIiwgYHRleHREaXNhcHBlYXIgJHthbmlEdXJhdGlvbn1zIGVhc2UtaW4tb3V0YClcbiAgICAgICAgICAgIC5vbmUoXCJhbmltYXRpb25lbmRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICQoZXF1UGFyYSkuY3NzKFwib3BhY2l0eVwiLCAwKTtcbiAgICAgICAgICAgICAgICBrYXRleC5yZW5kZXIoYCR7cG9pbnREYXRhLnl9YCwgZXF1UGFyYSk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShhbmlTZXR0aW5ncyk7XG4gICAgICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuLypcblNob3cgdGhlIGNob3NlbiBlcXVhdGlvbiB0byBncmFwaFxuKi9cbmZ1bmN0aW9uIHNob3dFcXVhdGlvbkFnYWluKGFuaVNldHRpbmdzKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICQoZXF1UGFyYSlcbiAgICAgICAgICAgIC5jc3MoXCJhbmltYXRpb25cIiwgYHRleHRBcHBlYXIgJHthbmlEdXJhdGlvbn1zIGVhc2UtaW4tb3V0YClcbiAgICAgICAgICAgIC5vbmUoXCJhbmltYXRpb25lbmRcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAkKGVxdVBhcmEpLmNzcyhcIm9wYWNpdHlcIiwgMSk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShhbmlTZXR0aW5ncyk7XG4gICAgICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuLypcbk9uY2UgdGhlIHktdmFsdWUgYXBwZWFycyBpbiB0aGUgY29ycmVjdCB5LWNvbHVtbiB0aGVuIGZ1bGZpbGwgdGhlIHByb21pc2UuXG4qL1xuZnVuY3Rpb24gcGxhY2VZVmFsdWUoYW5pU2V0dGluZ3MpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICB2YXIgcG9pbnREYXRhID0gYW5pU2V0dGluZ3MuZGF0YXBvaW50c1thbmlTZXR0aW5ncy5jdXJyZW50Um91bmRdO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICB2YXIgaW5wdXQgPSAkKGB0ZCN5dmFsJHtwb2ludERhdGEuaWQgKyAxfWApWzBdO1xuICAgICAgICAkKGlucHV0KS5odG1sKFwiXCIpO1xuICAgICAgICAkKGlucHV0KS5hcHBlbmQoYDxwPiR7cG9pbnREYXRhLnl9PC9wPmApO1xuICAgICAgICByZXNvbHZlKGFuaVNldHRpbmdzKTtcbiAgICB9KTtcbn1cblxuLypcbk9uY2UgdGhlIGVxdWF0aW9uIGlzIGNsZWFyZWQgYW5kIHJlc2V0IHRvIHRoZSBkZWZhdWx0IGVxdWF0aW9uXG50aGVuIGZ1bGZpbGwgdGhlIHByb21pc2VcbiovXG5mdW5jdGlvbiByZXNldFJvdW5kKGFuaVNldHRpbmdzKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vICAgIHZhciBwb2ludERhdGEgPSBhbmlTZXR0aW5ncy5kYXRhcG9pbnRzW2FuaVNldHRpbmdzLmN1cnJlbnRSb3VuZF07XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgJChlcXVQYXJhKVxuICAgICAgICAgICAgLmNzcyhcImFuaW1hdGlvblwiLCBgdGV4dERpc2FwcGVhciAke2FuaUR1cmF0aW9ufXMgZWFzZS1pbi1vdXRgKVxuICAgICAgICAgICAgLm9uZShcImFuaW1hdGlvbmVuZFwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICQoZXF1UGFyYSkuY3NzKFwib3BhY2l0eVwiLCAwKTtcbiAgICAgICAgICAgICAgICBrYXRleC5yZW5kZXIoYCR7cHJvZk9wdC5lcXVhdGlvbn1gLCBlcXVQYXJhKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKGFuaVNldHRpbmdzKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG4vKlxuUmV0dXJuIHRvIGRlZmF1bHQgYmVnaW5uaW5nIGVxdWF0aW9uIGZvciB0aGUgbmV4dCBhbmltYXRpb24gb3IgZm9yIHRoZSBlbmRcbiovXG5mdW5jdGlvbiBzaG93RGVmYXVsdEVxdShhbmlTZXR0aW5ncykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAkKGVxdVBhcmEpXG4gICAgICAgICAgICAuY3NzKFwiYW5pbWF0aW9uXCIsIGB0ZXh0QXBwZWFyICR7YW5pRHVyYXRpb259cyBlYXNlLWluLW91dGApXG4gICAgICAgICAgICAub25lKFwiYW5pbWF0aW9uZW5kXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgJChlcXVQYXJhKS5jc3MoXCJvcGFjaXR5XCIsIDEpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoYW5pU2V0dGluZ3MpO1xuICAgICAgICAgICAgfSk7XG4gICAgfSk7XG59XG5cbi8qXG5BY2NlcHQgdGhlIGRhdGFwb2ludCBhbmQgaXRzIGl0ZXJhdG9yIGFuZCBwbG90IHRoYXQgcG9pbnQgYmVpbmcgcGFzc2VkIHRocm91Z2hcbiovXG5mdW5jdGlvbiBwbG90dGVyKGFuaVNldHRpbmdzKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdmFyIHBvaW50RGF0YSA9IGFuaVNldHRpbmdzLmRhdGFwb2ludHNbYW5pU2V0dGluZ3MuY3VycmVudFJvdW5kXTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICBwbG90R3JhcGgudXBkYXRlKGFuaVNldHRpbmdzLCBhbmlTZXR0aW5ncy5ncmFwaE9wdC5jYWxsYmFjayk7XG4gICAgICAgIHJlc29sdmUoYW5pU2V0dGluZ3MpO1xuICAgIH0pO1xufVxuXG4vKlxuVGhpcyBmdW5jdGlvbiBhY3RzIGFzIGFuIGl0ZXJhdG9yIHNvIHRoYXQgdGhlIHByb21pc2UgY2hhaW4ga25vd3Mgd2hpY2hcbmRhdGFwb2ludCB0byBoYW5kbGUgYW5kIHRvIGFuaW1hdGVcbiovXG5mdW5jdGlvbiB1cGRhdGVSb3VuZChhbmlTZXR0aW5ncykge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgdmFyIHBsYWNlaG9sZGVyID0gYW5pU2V0dGluZ3MuZGF0YXBvaW50c1thbmlTZXR0aW5ncy5jdXJyZW50Um91bmRdO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIGFuaVNldHRpbmdzLmN1cnJlbnRSb3VuZCArPSAxO1xuICAgICAgICBwbGFjZWhvbGRlci51cGRhdGVQb2ludCA9IGZhbHNlO1xuXG4gICAgICAgIHJlc29sdmUoYW5pU2V0dGluZ3MpO1xuICAgIH0pO1xufTtcblxuLypcblR3byBmdW5jdGlvbnMgaW4gb3JkZXIgdG8gcmVwbGFjZSB0aGUgZnVuY3Rpb24gbWFjaGluZSBnaWYgd2l0aCB0aGUgYW5pbWF0ZWRcbmdpZiBhbmQgYmFja3dhcmRzLlxuKi9cbmZ1bmN0aW9uIGFuaW1hdGVGdW5jTWFjaGluZShhbmlTZXR0aW5ncykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAkKFwiI2Z1bmN0aW9uTWFjaGluZVwiKS5jc3Moe1xuICAgICAgICAgICAgXCJiYWNrZ3JvdW5kLWltYWdlXCI6IFwidXJsKC4uL2ltZy9mdW5jdGlvbk1hY2hpbmVBbmkuZ2lmKVwiXG4gICAgICAgIH0pXG4gICAgICAgIHJlc29sdmUoYW5pU2V0dGluZ3MpXG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHN0b3BBbmlGdW5jTWFjaGluZShhbmlTZXR0aW5ncykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAkKFwiI2Z1bmN0aW9uTWFjaGluZVwiKS5jc3Moe1xuICAgICAgICAgICAgXCJiYWNrZ3JvdW5kLWltYWdlXCI6IFwidXJsKC4uL2ltZy9mdW5jdGlvbk1hY2hpbmVTdGlsbC5naWYpXCJcbiAgICAgICAgfSlcbiAgICAgICAgcmVzb2x2ZShhbmlTZXR0aW5ncylcbiAgICB9KTtcbn1cblxuLypcbkEgZnVuY3Rpb24gdG8gc2hvdyB0aGUgeSBhbnN3ZXIgbGVhdmluZyB0aGUgZnVuY3Rpb24gbWFjaGluZSB0b1xuc3RhcnQgdGhlIG5leHQgYW5pbWF0aW9uIG9mIGdvaW5nIGJhY2sgdG8gdGhlIHkgY29sdW1uLlxuKi9cbmZ1bmN0aW9uIG1pbmlBbmkoYW5pU2V0dGluZ3MpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcblxuICAgICAgICB2YXIgcGxhY2Vob2xkZXIgPSBhbmlTZXR0aW5ncy5kYXRhcG9pbnRzW2FuaVNldHRpbmdzLmN1cnJlbnRSb3VuZF0sXG4gICAgICAgICAgICB5dmFsdWUgPSBwbGFjZWhvbGRlci55LFxuICAgICAgICAgICAgcGFyYSA9ICQoYDxwPiR7eXZhbHVlfTwvcD5gKTtcblxuICAgICAgICAkKFwiYm9keVwiKS5hcHBlbmQocGFyYSk7XG5cbiAgICAgICAgcGFyYVxuICAgICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgICAgICAgIGxlZnQ6IDU1MCxcbiAgICAgICAgICAgICAgICB0b3A6IDUwXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICAgICAgdG9wOiAxMDBcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgcGFyYS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBcIm5vbmVcIlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoYW5pU2V0dGluZ3MpO1xuICAgICAgICAgICAgfSk7XG4gICAgfSk7XG59XG5cbi8qXG5BIHByb21pc2UgY2hhaW4gdG8gcnVuIHRocm91Z2ggdGhlIHdob2xlIGFuaW1hdGlvbiBwcm9jZXNzXG5cbk5PVEVcbkEgcHJvbWlzZSBjaGFpbiBoYXMgYmVlbiB1dGl6aWxlZCBpbiBvcmRlciB0byBlYXNpbHkgcGx1Z2luXG5leHRyYSBmdW5jdGlvbnMgdGhhdCB3b3VsZCBiZSBncmVhdCB0byBoYXZlIGluIHRoZSBhbmltYXRpb25cbnByb2Nlc3MuICBBIHByb21pc2UgY2hhaW4gaGFzIGFsc28gYmVlbiB1c2VkIGluIG9yZGVyIHRvIHdhaXRcbmZvciBhIGFuaW1hdGlvbiB0byBlbmQgdG8gc3RhcnQgdGhlIG5leHQgYW5pbWF0aW9uLlxuKi9cblxuZnVuY3Rpb24gYW5pUHJvbWlzZUNoYWluKGRwcywgY2hhaW4pIHtcblxuICAgIHBsb3RHcmFwaC5zZXR1cChkcHMsIFwiI2dyYXBoXCIpO1xuXG4gICAgZHBzLmRhdGFwb2ludHMuZm9yRWFjaChmdW5jdGlvbiAoZGF0YXBvaW50KSB7XG4gICAgICAgIGlmIChkYXRhcG9pbnQudXBkYXRlUG9pbnQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNoYWluID0gY2hhaW5cbiAgICAgICAgICAgICAgICAudGhlbihydW5BbmltYXRpb24oXCJ4VG9NYWNoaW5lXCIsIGRhdGFwb2ludC54KSlcbiAgICAgICAgICAgICAgICAudGhlbihhbmltYXRlRnVuY01hY2hpbmUpXG4gICAgICAgICAgICAgICAgLnRoZW4oc3RhdHVzTWVzc2FnZShcIkNhbGN1bGF0aW5nXCIpKVxuICAgICAgICAgICAgICAgIC50aGVuKHJlcGxhY2VYRXF1KVxuICAgICAgICAgICAgICAgIC50aGVuKHNob3dFdmFsdWF0ZUVxdSlcbiAgICAgICAgICAgICAgICAudGhlbihzaG93WUFucylcbiAgICAgICAgICAgICAgICAudGhlbihzaG93RXF1YXRpb25BZ2FpbilcbiAgICAgICAgICAgICAgICAudGhlbihzdG9wQW5pRnVuY01hY2hpbmUpXG4gICAgICAgICAgICAgICAgLnRoZW4obWluaUFuaSlcbiAgICAgICAgICAgICAgICAudGhlbihydW5BbmltYXRpb24oXCJtYWNoaW5lVG9ZXCIsIGRhdGFwb2ludC55KSlcbiAgICAgICAgICAgICAgICAudGhlbihwbGFjZVlWYWx1ZSlcbiAgICAgICAgICAgICAgICAudGhlbihydW5BbmltYXRpb24oXCJ5VG9TdGF0dXNCYXJcIiwgYCgke2RhdGFwb2ludC54fSwke2RhdGFwb2ludC55fSlgKSlcbiAgICAgICAgICAgICAgICAudGhlbihzdGF0dXNNZXNzYWdlKGBQbG90dGluZyAoJHtkYXRhcG9pbnQueH0sJHtkYXRhcG9pbnQueX0pYCkpXG4gICAgICAgICAgICAgICAgLnRoZW4ocGxvdHRlcilcbiAgICAgICAgICAgICAgICAudGhlbihzdGF0dXNNZXNzYWdlKGBSZXNldHRpbmdgKSlcbiAgICAgICAgICAgICAgICAudGhlbihyZXNldFJvdW5kKVxuICAgICAgICAgICAgICAgIC50aGVuKHN0YXR1c01lc3NhZ2UoYGApKVxuICAgICAgICAgICAgICAgIC50aGVuKHNob3dEZWZhdWx0RXF1KTtcbiAgICAgICAgfVxuICAgICAgICBjaGFpbiA9IGNoYWluLnRoZW4odXBkYXRlUm91bmQpO1xuICAgIH0pO1xufVxuXG4vKlxuSWYgdGhlIFwiSGlkZSBBbmltYXRpb25cIiBjaGVja2JveCBpcyBjaGVja2VkIHRoZW4gc2tpcCB0aGUgd2hvbGUgYW5pbWF0aW9uXG5wcm9taXNlIGNoYWluIGFuZCBqdXN0IGFwcGVuZCB0aGUgeSB2YWx1ZXNcbiovXG5mdW5jdGlvbiBhbmltYXRlSGlkZShkcHMsIGNoYWluKSB7XG5cbiAgICBwbG90R3JhcGguc2V0dXAoZHBzLCBcIiNncmFwaFwiKTtcbiAgICBcbiAgICBkcHMuZGF0YXBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uIChkYXRhcG9pbnQpIHtcbiAgICAgICAgaWYgKGRhdGFwb2ludC51cGRhdGVQb2ludCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY2hhaW4gPSBjaGFpblxuICAgICAgICAgICAgICAgIC50aGVuKHBsYWNlWVZhbHVlKVxuICAgICAgICAgICAgICAgIC50aGVuKHN0YXR1c01lc3NhZ2UoYFBsb3R0aW5nICgke2RhdGFwb2ludC54fSwke2RhdGFwb2ludC55fSlgKSlcbiAgICAgICAgICAgICAgICAudGhlbihwbG90dGVyKVxuICAgICAgICAgICAgICAgIC50aGVuKHN0YXR1c01lc3NhZ2UoYFJlc2V0dGluZ2ApKVxuICAgICAgICAgICAgICAgIC50aGVuKHJlc2V0Um91bmQpXG4gICAgICAgICAgICAgICAgLnRoZW4oc2hvd0RlZmF1bHRFcXUpO1xuICAgICAgICB9XG4gICAgICAgIGNoYWluID0gY2hhaW4udGhlbih1cGRhdGVSb3VuZCk7XG4gICAgfSk7XG59XG5cbi8qXG5JZiBubyBncmFwaCBpcyBjaGVja2VkLCB0aGVuIGRvIG5vdCBpbmNsdWRlIHRoZSBncmFwaCBwbG90dGluZyBpbiB0aGVcbmFuaW1hdGlvblxuKi9cblxuZnVuY3Rpb24gbm9HcmFwaChkcHMsIGNoYWluKSB7XG4gICAgXG4gICAgZHBzLmRhdGFwb2ludHMuZm9yRWFjaChmdW5jdGlvbiAoZGF0YXBvaW50KSB7XG4gICAgICAgIGlmIChkYXRhcG9pbnQudXBkYXRlUG9pbnQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNoYWluID0gY2hhaW5cbiAgICAgICAgICAgICAgICAudGhlbihydW5BbmltYXRpb24oXCJ4VG9NYWNoaW5lXCIsIGRhdGFwb2ludC54KSlcbiAgICAgICAgICAgICAgICAudGhlbihhbmltYXRlRnVuY01hY2hpbmUpXG4gICAgICAgICAgICAgICAgLnRoZW4oc3RhdHVzTWVzc2FnZShcIkNhbGN1bGF0aW5nXCIpKVxuICAgICAgICAgICAgICAgIC50aGVuKHJlcGxhY2VYRXF1KVxuICAgICAgICAgICAgICAgIC50aGVuKHNob3dFdmFsdWF0ZUVxdSlcbiAgICAgICAgICAgICAgICAudGhlbihzaG93WUFucylcbiAgICAgICAgICAgICAgICAudGhlbihzaG93RXF1YXRpb25BZ2FpbilcbiAgICAgICAgICAgICAgICAudGhlbihzdG9wQW5pRnVuY01hY2hpbmUpXG4gICAgICAgICAgICAgICAgLnRoZW4obWluaUFuaSlcbiAgICAgICAgICAgICAgICAudGhlbihydW5BbmltYXRpb24oXCJtYWNoaW5lVG9ZXCIsIGRhdGFwb2ludC55KSlcbiAgICAgICAgICAgICAgICAudGhlbihwbGFjZVlWYWx1ZSlcbiAgICAgICAgICAgICAgICAudGhlbihzdGF0dXNNZXNzYWdlKGBSZXNldHRpbmdgKSlcbiAgICAgICAgICAgICAgICAudGhlbihyZXNldFJvdW5kKVxuICAgICAgICAgICAgICAgIC50aGVuKHN0YXR1c01lc3NhZ2UoYGApKVxuICAgICAgICAgICAgICAgIC50aGVuKHNob3dEZWZhdWx0RXF1KTtcbiAgICAgICAgfVxuICAgICAgICBjaGFpbiA9IGNoYWluLnRoZW4odXBkYXRlUm91bmQpO1xuICAgIH0pO1xufVxuXG4vKlxuSWYgbm8gZ3JhcGggYW5kIG5vIGFuaW1hdGlvbiBjaGVja2JveGVzIGFyZSBjaGVja2VkLCB0aGVuIGp1c3QgcGxhY2UgdGhlIFkgdmFsdWVzIFxuZm9yIHRoZSBncmFwaC5cbiovXG5cblxuZnVuY3Rpb24gc29sdmVGb3JZKGRwcywgY2hhaW4pIHtcbiAgICBcbiAgICBkcHMuZGF0YXBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uIChkYXRhcG9pbnQpIHtcbiAgICAgICAgaWYgKGRhdGFwb2ludC51cGRhdGVQb2ludCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY2hhaW4gPSBjaGFpblxuICAgICAgICAgICAgICAgIC50aGVuKHBsYWNlWVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjaGFpbiA9IGNoYWluLnRoZW4odXBkYXRlUm91bmQpO1xuICAgIH0pO1xufVxuXG4vKlxuSGFuZGxlIGFsbCBDU1MgYW5pbWF0aW9ucyBieSBjcmVhdGluZyBhIFByb21pc2UgY2hhaW4gdGhyb3VnaCBhIGZvciBsb29wLlxuKi9cbmZ1bmN0aW9uIGFuaW1hdG9yQ29udHJvbChkcHMpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIHZhciBudW1Db250YWluZXIgPSAkKFwiI251bUNvbnRhaW5lclwiKSxcbiAgICAgICAgY2hhaW4gPSBQcm9taXNlLnJlc29sdmUoZHBzKTtcblxuICAgIG51bUNvbnRhaW5lci5pbm5lckhUTUwgPSBcIlwiO1xuICAgIFxuICAgIGlmIChkcHMuZ3JhcGhPcHQuZ3JhcGhIaWRlICYmIGRwcy5ncmFwaE9wdC5hbmltYXRlSGlkZSkge1xuICAgICAgICBzb2x2ZUZvclkoZHBzLCBjaGFpbik7XG4gICAgfSBlbHNlIGlmIChkcHMuZ3JhcGhPcHQuYW5pbWF0ZUhpZGUpIHtcbiAgICAgICAgYW5pbWF0ZUhpZGUoZHBzLCBjaGFpbik7XG4gICAgfSBlbHNlIGlmIChkcHMuZ3JhcGhPcHQuZ3JhcGhIaWRlKSB7XG4gICAgICAgIG5vR3JhcGgoZHBzLCBjaGFpbik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYW5pUHJvbWlzZUNoYWluKGRwcywgY2hhaW4pO1xuICAgIH1cbiAgICBcbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
