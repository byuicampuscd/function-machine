"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};!function(e,t){e.wand=t()}("undefined"!=typeof window?window:void 0,function(){var e={apndr:function(e,t){if("object"!==("undefined"==typeof e?"undefined":_typeof(e))||"object"!==("undefined"==typeof t?"undefined":_typeof(t))||Array.isArray(t))if("object"!==("undefined"==typeof e?"undefined":_typeof(e)))console.error("First parameter passed is not an object element.");else if("object"!==("undefined"==typeof t?"undefined":_typeof(t)))"string"!=typeof t&&"number"!=typeof t||e.appendChild(this.txt(t));else if(Array.isArray(t))for(var r=t,o=0;o<r.length;o++)this.apndr(e,r[o]);else console.error("Parameters are not compatible in the lib.apndr function.  Hit the arrow on the left for call stack.");else e.appendChild(t)},querApndr:function(e,t,r){var o=document.querySelector(e);if(null!=o){if(Array.isArray(t))for(var n=t,i=0;i<n.length;i++)this.apndr(o,this.crtElm(n[i]));else t&&this.apndr(o,this.crtElm(t,r));return o}console.error("No tag exists in the DOM. Hit the arrow on the left for call stack.")},querAttr:function(e,t,r){var o=document.querySelector(e);null==o?console.error("No tag exists in the DOM. Hit the arrow on the left for call stack."):t&&o.setAttribute(t,r)},txt:function(e){return"string"==typeof e?document.createTextNode(e):"number"==typeof e?document.createTextNode(e.toString()):void console.error("Parameter passed to lib.txt is not a string nor a number.  Hit the arrow on the left for call stack.")},crtElm:function(e,t){var r,o=document.createElement(e);return t&&("string"==typeof t?(r=this.txt(t),this.apndr(o,r)):console.error("Must pass a string as the second param in lib.crtElm function.  Hit the arrow on the left for call stack.")),o}};return e});
"use strict";!function(){function n(n){console.log(n)}for(var t,a,d,r,e=wand.querApndr("tbody"),o=15,c=1;o>=c;c++)r=wand.crtElm("input"),t=wand.crtElm("td"),a=wand.crtElm("td"),d=wand.crtElm("tr"),wand.apndr(t,r),wand.apndr(d,[t,a]),wand.apndr(e,d);for(var l=["x^2","x^2","x^2","x^2","x^2","x^3"],i=0;i<l.length;i++){var u=wand.crtElm("div");u.id="equation"+i,katex.render(l[i],u);var w=wand.querApndr("#dropdown");wand.apndr(w,u)}document.onchange=function(t){"select"===t.target.localName&&n(t.target.value)},document.onclick=function(n){console.log(n.target),n.target.id.indexOf("equation")>0&&console.log(n.target.id)}}();
//# sourceMappingURL=data:application/json;base64,
