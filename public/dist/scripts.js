"use strict";!function(){for(var t,a,d,p,r=$("tbody"),n=19,e=1;e<=n;e++)p=$("<input>"),t=$("<td></td>"),a=$("<td></td>"),d=$("<tr></tr>"),$(d).attr("id","row"+e),$(p).attr("name","input"+e).attr("type","number"),$(a).attr("id","yval"+e),$(t).append(p),$(d).append(t).append(a),$(r).append(d)}();
"use strict";var plotGraph=function(){function t(t){return function(e){var n=(0).toFixed(2);return function(e){var a=t.x*e;this.textContent="( "+a.toFixed(2)+", "+n+")"}}}function e(t){return function(){var e=t.x,n=t.y;return function(t){this.textContent="( "+e+", "+(n*t).toFixed(2)+")"}}}function n(t){return"graphPoint"+t}function a(t){var e=d3.selectAll(c).append("g").attr("class","point").attr("id",n(t.id));return e.append("circle").attr("r",4).attr("cx",0).attr("cy",0),e.append("text").text("(0, 0)").attr("x",5).attr("y",15),e.attr("transform","translate("+d(0)+" "+l(0)+")"),e}function r(r,i){var o,u,s=r.datapoints[r.currentRound];document.querySelectorAll(c+" .graph .line").length>0;r.datapoints.forEach(function(t){t.updatePoint&&d3.select("#"+n(t.id)).remove()}),r.graphOpt.graphHide?d3.select(c+" .graph .line").attr("display","none"):d3.select(c+" .graph .line").attr("display","inline"),s.updatePoint?(o=a(s),r.graphOpt.animateHide?(o.attr("transform","translate("+d(s.x)+" "+l(s.y)+")"),o.select("text").text("("+s.x+", "+s.y+")"),i(r)):(u=o.transition().duration(1500).ease("cubic-out").attr("transform","translate("+d(s.x)+" "+l(0)+")"),u.select("text").tween("text",t(s)),u.transition().duration(1500).ease("cubic-out").attr("transform","translate("+d(s.x)+" "+l(s.y)+")").each("end",function(){i(r)}).select("text").tween("text",e(s)))):i(r)}function i(t,e){var n=t.graphOpt,a={target:e,data:[{fn:n.equation,skipTip:!0}],xAxis:{domain:[n.view.x.min,n.view.x.max]},yAxis:{domain:[n.view.y.min,n.view.y.max]},disableZoom:!0,grid:!0};o=e,c=o+" .content",u=n.equation,s=functionPlot(a),d=s.meta.xScale,l=s.meta.yScale,d3.selectAll(c+" .point").remove()}var o,c,u,s,d,l;return{update:r,setup:i}}();
"use strict";$(document).ready(function(){function t(t,n){var a=JSON.stringify(n),o=$("<option></option>").append(t.name);$(o).val(t.equation).attr("data-profOpt",a),$("select").append(o)}var n=location.search.substring(1),a=n.split("=")[1]+".json";$.getJSON(a,function(n){window.professorConfigFile=n,$.each(n,function(n,a){var o={graphOpt:a};t(a,o),0===n&&(plotGraph.setup(o,"#graph"),changePlot(a.equation))})}).fail(function(){$("#status p").append("Add a query string")})});
"use strict";function runAnimation(n,t){return function(e){var a=e.datapoints[e.currentRound],i=a.element;return new Promise(function(a){$(i).html(t).css({animation:""+n+e.currentRound+" "+aniDuration+"s ease-in-out"}).one("animationend",function(n){a(e)})})}}function statusMessage(n){var t=$("#status p");return function(e){return new Promise(function(a){t.html(n),a(e)})}}function replaceXEqu(n){return new Promise(function(t){$(equPara).css("animation","textDisappear "+aniDuration+"s ease-in-out").one("animationend",function(e){$(equPara).css("opacity",0),t(n)})})}function showEvaluateEqu(n){var t=n.datapoints[n.currentRound],e=t.changeEqu;return new Promise(function(t){katex.render(""+e,equPara),$(equPara).css("animation","textAppear "+aniDuration+"s ease-in-out").one("animationend",function(e){$(equPara).css("opacity",1),t(n)})})}function showYAns(n){var t=n.datapoints[n.currentRound];return new Promise(function(e){$(equPara).css("animation","textDisappear "+aniDuration+"s ease-in-out").one("animationend",function(){$(equPara).css("opacity",0),katex.render(""+t.y,equPara),e(n)})})}function showEquationAgain(n){return new Promise(function(t){$(equPara).css("animation","textAppear "+aniDuration+"s ease-in-out").one("animationend",function(e){$(equPara).css("opacity",1),t(n)})})}function placeYValue(n){var t=n.datapoints[n.currentRound];return new Promise(function(e){var a=$("td#yval"+(t.id+1))[0];$(a).html(""),$(a).append("<p>"+t.y+"</p>"),e(n)})}function resetRound(n){return new Promise(function(t){$(equPara).css("animation","textDisappear "+aniDuration+"s ease-in-out").one("animationend",function(e){$(equPara).css("opacity",0),katex.render(""+profOpt.equation,equPara),t(n)})})}function showDefaultEqu(n){return new Promise(function(t){$(equPara).css("animation","textAppear "+aniDuration+"s ease-in-out").one("animationend",function(e){$(equPara).css("opacity",1),t(n)})})}function plotter(n){n.datapoints[n.currentRound];return new Promise(function(t){plotGraph.update(n,n.graphOpt.callback),t(n)})}function updateRound(n){var t=n.datapoints[n.currentRound];return new Promise(function(e){n.currentRound+=1,t.updatePoint=!1,e(n)})}function animateFuncMachine(n){return new Promise(function(t){$("#functionMachine").css({"background-image":"url(../img/functionMachineAni.gif)"}),t(n)})}function stopAniFuncMachine(n){return new Promise(function(t){$("#functionMachine").css({"background-image":"url(../img/functionMachineStill.gif)"}),t(n)})}function miniAni(n){return new Promise(function(t){var e=n.datapoints[n.currentRound],a=e.y,i=$("<p>"+a+"</p>");$("body").append(i),i.css({position:"absolute",opacity:0,left:550,top:50}).animate({opacity:1,top:100},function(e){i.css({display:"none"}),t(n)})})}function aniPromiseChain(n,t){plotGraph.setup(n,"#graph"),n.datapoints.forEach(function(n){n.updatePoint===!0&&(t=t.then(runAnimation("xToMachine",n.x)).then(animateFuncMachine).then(statusMessage("Calculating")).then(replaceXEqu).then(showEvaluateEqu).then(showYAns).then(showEquationAgain).then(stopAniFuncMachine).then(miniAni).then(runAnimation("machineToY",n.y)).then(placeYValue).then(runAnimation("yToStatusBar","("+n.x+","+n.y+")")).then(statusMessage("Plotting ("+n.x+","+n.y+")")).then(plotter).then(statusMessage("Resetting")).then(resetRound).then(statusMessage("")).then(showDefaultEqu)),t=t.then(updateRound)})}function animateHide(n,t){plotGraph.setup(n,"#graph"),n.datapoints.forEach(function(n){n.updatePoint===!0&&(t=t.then(placeYValue).then(statusMessage("Plotting ("+n.x+","+n.y+")")).then(plotter).then(statusMessage("Resetting")).then(resetRound).then(showDefaultEqu)),t=t.then(updateRound)})}function noGraph(n,t){n.datapoints.forEach(function(n){n.updatePoint===!0&&(t=t.then(runAnimation("xToMachine",n.x)).then(animateFuncMachine).then(statusMessage("Calculating")).then(replaceXEqu).then(showEvaluateEqu).then(showYAns).then(showEquationAgain).then(stopAniFuncMachine).then(miniAni).then(runAnimation("machineToY",n.y)).then(placeYValue).then(statusMessage("Resetting")).then(resetRound).then(statusMessage("")).then(showDefaultEqu)),t=t.then(updateRound)})}function solveForY(n,t){n.datapoints.forEach(function(n){n.updatePoint===!0&&(t=t.then(placeYValue)),t=t.then(updateRound)})}function animatorControl(n){var t=$("#numContainer"),e=Promise.resolve(n);t.innerHTML="",n.graphOpt.graphHide&&n.graphOpt.animateHide?solveForY(n,e):n.graphOpt.animateHide?animateHide(n,e):n.graphOpt.graphHide?noGraph(n,e):aniPromiseChain(n,e)}var equPara=$("#functionMachine #equ")[0],aniDuration=2;
"use strict";function changePlot(t){xMemory=[],clearValues(),window.profOpt=checkConfig(t);var e="y = ",n=""+t,o=$("#functionMachine #equ")[0],a=$("#functionMachine #y");$(o).empty(""),katex.render(e,a[0]),katex.render(n,o)}function stairStep(t){var e=246.5,n=document.styleSheets[document.styleSheets.length-1];n.insertRule("@keyframes "+t.name+" {\n                            0% {\n                                opacity: 1;\n                                top: "+t.startTopOff+"px;\n                                left: "+t.startLeftOff+"px;\n                            }\n                            10% {\n                                opacity: 1;\n                            }\n                            33% {\n                                top: "+t.startTopOff+"px;\n                                left: "+e+"px;\n                            }\n                            66% {\n                                top: "+t.endTopOff+"px;\n                                left: "+e+"px;\n                            }\n                            90% {\n                                opacity: 1;\n                            }\n                            100% {\n                                opacity: 0;\n                                top: "+t.endTopOff+"px;\n                                left: "+t.endLeftOff+"px;\n                            }\n                        }",n.cssRules.length)}function makeXToMachine(t,e){stairStep({startTopOff:t.top+5,startLeftOff:t.left+30,endTopOff:55,endLeftOff:300,name:"xToMachine"+e})}function makeMachineToY(t,e){stairStep({startTopOff:100,startLeftOff:530,endTopOff:t.top+5,endLeftOff:t.right+5,name:"machineToY"+e})}function makeYToStatusBar(t,e){stairStep({startTopOff:t.top+5,startLeftOff:t.right+10,endTopOff:150,endLeftOff:300,name:"yToStatusBar"+e})}function setUpObject(t,e,n){t.each(function(t){var o,a,i=$(this).val();if(i&&(o=+i,a=o.toFixed(profOpt.rounding),$(this).val(a),profOpt.view.x.min<=a&&a<=profOpt.view.x.max)){var p=e.equation.replace("x","("+a+")"),r=math.eval(p),u=(this.getBoundingClientRect(),{x:a,y:r.toFixed(profOpt.rounding),id:t,changeEqu:profOpt.equation.replace("x","("+a+")"),updatePoint:xMemory[t]!==a,element:$("#numContainer p").get(t)});u.updatePoint&&$("td#yval"+(t+1)).html(""),xMemory[t]=a,n.datapoints.push(u)}})}function startFuncMach(){var t=$("input[type='number']"),e=$("#animate:checked").length>0,n=$("#showGraph:checked").length>0,o={callback:function(t){return new Promise(function(e){t.datapoints[t.currentRound].updatePoint=!1,e(t)})},animateHide:e,graphHide:n,equation:profOpt.equation,view:profOpt.view},a={datapoints:[],currentRound:0,graphOpt:o};setUpObject(t,o,a),animatorControl(a)}function checkConfig(t){var e;return $.each(professorConfigFile,function(n,o){o.equation===t&&(e=o)}),e}function clearValues(){var t=$("input[type='number']"),e=$("tr td:nth-of-type(2)");t.each(function(t,e){e.value=""}),e.each(function(t,e){e.innerHTML=""})}for(var xMemory=[],inputs=document.querySelectorAll("input[type='number']"),inputCount=inputs.length,run=!0,i=0;i<inputs.length;i++)inputs[i].oninput=function(t){var e=t.srcElement.value;profOpt.view.x.min<=e&&e<=profOpt.view.x.max?(run=!0,$("input[type='button'][value='Go!']").prop("disabled",!1).css({cursor:"pointer"}),$("#status p").html("")):(run=!1,$("input[type='button'][value='Go!']").prop("disabled",!0).css({cursor:"not-allowed"}),$("#status p").html(e+" x-value out of domains."))};for(var i=0;i<inputCount;i++){xMemory[i]=null;var inputCoor=inputs[i].getBoundingClientRect();makeXToMachine(inputCoor,i),makeMachineToY(inputCoor,i),makeYToStatusBar(inputCoor,i),$("#numContainer").append($("<p></p>"))}$("select").change(function(t){var e=$('option[value="'+t.target.value+'"]'),n=JSON.parse(e.attr("data-profopt"));plotGraph.setup(n,"#graph"),changePlot(t.target.value)}),"checked"===$("input#showGraph[type='checkbox']").attr("checked")&&$("#graph").hide(),$("input#showGraph[type='checkbox']").click(function(t){var e=t.target.checked;e?$("#graph").hide(1e3):$("#graph").show(1e3)}),$(document).keypress(function(t){13==t.which&&run&&startFuncMach()}),$("input[type='button'][value='Go!']").click(function(){run&&startFuncMach()});
//# sourceMappingURL=data:application/json;base64,
