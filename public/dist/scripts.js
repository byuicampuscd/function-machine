"use strict";$(document).ready(function(){$.getJSON("../funcMachineSettings.json",function(n){window.professorConfigFile=n,$.each(n,function(n,e){var o=$("<option></option>").append(e.name);$(o).val(e.equation),$("select").append(o),0===n&&changePlot(e.equation)})})});
"use strict";function startFuncMach(){var e=$("input[type='number']"),n=$("#animate:checked").length>0,t=$("#showGraph:checked").length>0,o=({callback:function(){return Promise.resolve(console.log("Done!"))},animate:n,showGraph:t,equation:profOpt.equation},{datapoints:[],currentRound:0});$.each(e,function(e,n){var t=$(n).val(),a=profOpt.equation;if(t){var c=a.replace("x","("+t+")"),i=math.eval(c),r=n.getBoundingClientRect(),u={x:t,y:i,id:e,changeEqu:profOpt.equation.replace("x","("+t+")"),updatePoint:!0,element:$("<p>"+t+"</p>")[0],beginCoor:{top:r.top,left:r.left}};o.datapoints.push(u)}}),animatorControl(o)}function checkConfig(e){var n;return $.each(professorConfigFile,function(t,o){o.equation===e&&(n=o)}),n}function changePlot(e){window.profOpt=checkConfig(e);var n="y = ",t=""+e,o=$("#functionMachine #equ")[0],a=$("#functionMachine #y");$(o).empty(""),katex.render(n,a[0]),katex.render(t,o)}$("select").change(function(e){changePlot(e.target.value)}),$(document).keypress(function(e){13==e.which&&startFuncMach()}),$("input[type='button'][value='Go!']").click(function(){startFuncMach()});
"use strict";function animationTemplate(n){var t;t="number"==typeof n.currentRound?n.datapoints[n.currentRound]:n;var e=t.beginCoor.top+5,a=t.beginCoor.left+30,o=machineCoor.top,i=machineCoor.left,s=t.beginCoor.left+225,r=t.id.toString(),u=$("#numContainer"),c=t.element;return lastSheet.insertRule("@keyframes animationPath"+r+" {\n                            0% {\n                                opacity: 0;\n                                top: "+e+"px;\n                                left: "+a+"px;\n                            }\n                            10% {\n                                opacity: 1;\n                            }\n                            33% {\n                                top: "+e+"px;\n                                left: "+s+"px;\n                            }\n                            66% {\n                                top: "+o+"px;\n                                left: "+s+"px;\n                            }\n                            90% {\n                                opacity: 1;\n                            }\n                            100% {\n                                opacity: 0;\n                                top: "+o+"px;\n                                left: "+i+"px;\n                            }\n                        }",lastSheet.cssRules.length),$(u).append(c),new Promise(function(n){$(c).css("position","absolute").css("top",e+"px").css("left",a+"px").css("animation","animationPath"+r+" 4s ease-in-out").css("opacity","0").css("zIndex","100").bind("animationend",function(e){n(t)})})}function updateRound(n){return new Promise(function(t){n.currentRound+=1,t(n)})}function replaceXEqu(n){return new Promise(function(t){$(statusBar).html("").html("<p>>> Calculating</p>"),$(equPara).css("animation","textDisappear 2s ease-in-out").bind("animationend",function(e){$(equPara).css("opacity",0),t(n)})})}function showEvaluateEqu(n){var t=n.changeEqu;return new Promise(function(e){"number"==typeof n.y&&$(statusBar).html("").html("<p>>> Returning answer.</p>"),katex.render(""+t,equPara),$(equPara).css("animation","textAppear 1s ease-in-out").bind("animationend",function(t){$(equPara).css("opacity",1),e(n)})})}function showYAns(n){return new Promise(function(t){$(equPara).css("animation","textDisappear 2s ease-in-out").bind("animationend",function(e){$(equPara).css("opacity",0),katex.render(""+n.y,equPara),$(equPara).css("animation","textAppear 1s ease-in-out").bind("animationend",function(n){$(equPara).css("opacity",1)}),t(n)})})}function animatorControl(n){var t=$("#numContainer"),e=Promise.resolve(n);t.innerHTML="";for(var a=0;a<n.datapoints.length;a++)e=e.then(animationTemplate).then(replaceXEqu).then(showEvaluateEqu).then(showYAns).then(animationTemplate)}var statusBar=$("#status p"),lastSheet=document.styleSheets[document.styleSheets.length-1],equPara=$("#functionMachine #equ")[0],machineCoor={top:55,left:300},statusCoor={top:255,left:300};
"use strict";!function(){for(var t,p,d,n,r=$("tbody"),a=19,e=1;a>=e;e++)n=$("<input>"),t=$("<td></td>"),p=$("<td></td>"),d=$("<tr></tr>"),$(d).attr("id","row"+e),$(n).attr("name","input"+e).attr("type","number"),$(t).append(n),$(d).append(t).append(p),$(r).append(d)}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFqYXguanMiLCJldmVudHMuanMiLCJhbmltYXRvcmNvbnRyb2wuanMiLCJtYWluLmpzIl0sIm5hbWVzIjpbIiQiLCJkb2N1bWVudCIsInJlYWR5IiwiZ2V0SlNPTiIsInJlc3VsdCIsIndpbmRvdyIsInByb2Zlc3NvckNvbmZpZ0ZpbGUiLCJlYWNoIiwiaSIsImZpZWxkIiwib3B0IiwiYXBwZW5kIiwibmFtZSIsInZhbCIsImVxdWF0aW9uIiwiY2hhbmdlUGxvdCIsInN0YXJ0RnVuY01hY2giLCJ4aW5wdXRzIiwiaGlkZUFuaW1hdGlvbkNoZWNrZWQiLCJsZW5ndGgiLCJoaWRlR3JhcGhDaGVja2VkIiwiYW5pU2V0dGluZ3MiLCJjYWxsYmFjayIsIlByb21pc2UiLCJyZXNvbHZlIiwiY29uc29sZSIsImxvZyIsImFuaW1hdGUiLCJzaG93R3JhcGgiLCJwcm9mT3B0IiwiZGF0YXBvaW50cyIsImN1cnJlbnRSb3VuZCIsInh2YWwiLCJyZXBsYWNlWCIsInJlcGxhY2UiLCJ5dmFsIiwibWF0aCIsImV2YWwiLCJpbnB1dENvb3IiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJwb2ludCIsIngiLCJ5IiwiaWQiLCJjaGFuZ2VFcXUiLCJ1cGRhdGVQb2ludCIsImVsZW1lbnQiLCJiZWdpbkNvb3IiLCJ0b3AiLCJsZWZ0IiwicHVzaCIsImFuaW1hdG9yQ29udHJvbCIsImNoZWNrQ29uZmlnIiwiaXRlbSIsImVxdWF0IiwiZXF1UGFyYSIsInlQYXJhIiwiZW1wdHkiLCJrYXRleCIsInJlbmRlciIsImNoYW5nZSIsImUiLCJ0YXJnZXQiLCJ2YWx1ZSIsImtleXByZXNzIiwid2hpY2giLCJjbGljayIsImFuaW1hdGlvblRlbXBsYXRlIiwicG9pbnREYXRhIiwic3RhcnRUb3BPZmYiLCJzdGFydExlZnRPZmYiLCJlbmRUb3BPZmYiLCJtYWNoaW5lQ29vciIsImVuZExlZnRPZmYiLCJoaWdod2F5UGF0aCIsInRvU3RyaW5nIiwibnVtQ29udGFpbmVyIiwibnVtUGFyYSIsImxhc3RTaGVldCIsImluc2VydFJ1bGUiLCJjc3NSdWxlcyIsImNzcyIsImJpbmQiLCJ1cGRhdGVSb3VuZCIsInJlcGxhY2VYRXF1IiwiZGF0YSIsInN0YXR1c0JhciIsImh0bWwiLCJzaG93RXZhbHVhdGVFcXUiLCJzaG93WUFucyIsImRwcyIsImNoYWluIiwiaW5uZXJIVE1MIiwidGhlbiIsInN0eWxlU2hlZXRzIiwic3RhdHVzQ29vciIsInRkMSIsInRkMiIsInRyIiwiaW5wdXQiLCJ0Ym9keSIsInJvd0NvdW50IiwiaiIsImF0dHIiXSwibWFwcGluZ3MiOiJBQUFBLFlBQUFBLEdBQUVDLFVBQVVDLE1BQU0sV0FFZEYsRUFBRUcsUUFBUSw4QkFBK0IsU0FBVUMsR0FFL0NDLE9BQU9DLG9CQUFzQkYsRUFFN0JKLEVBQUVPLEtBQUtILEVBQVEsU0FBVUksRUFBR0MsR0FFeEIsR0FBSUMsR0FBTVYsRUFBRSxxQkFBcUJXLE9BQU9GLEVBQU1HLEtBRTlDWixHQUFFVSxHQUFLRyxJQUFJSixFQUFNSyxVQUVqQmQsRUFBRSxVQUFVVyxPQUFPRCxHQUVULElBQU5GLEdBQ0FPLFdBQVdOLEVBQU1LO0FDZmpDLFlBQUEsU0FBU0UsaUJBRUwsR0FBSUMsR0FBVWpCLEVBQUUsd0JBQ1prQixFQUF1QmxCLEVBQUUsb0JBQW9CbUIsT0FBUyxFQUN0REMsRUFBbUJwQixFQUFFLHNCQUFzQm1CLE9BQVMsRUFTcERFLElBUElDLFNBQVUsV0FDTixNQUFPQyxTQUFRQyxRQUFRQyxRQUFRQyxJQUFJLFdBRXZDQyxRQUFTVCxFQUNUVSxVQUFXUixFQUNYTixTQUFVZSxRQUFRZixXQUdsQmdCLGNBQ0FDLGFBQWMsR0FHdEIvQixHQUFFTyxLQUFLVSxFQUFTLFNBQVVULEVBQUdLLEdBQ3pCLEdBQUltQixHQUFPaEMsRUFBRWEsR0FBS0EsTUFDZEMsRUFBV2UsUUFBUWYsUUFFdkIsSUFBSWtCLEVBQU0sQ0FDTixHQUFJQyxHQUFXbkIsRUFBU29CLFFBQVEsSUFBakIsSUFBMEJGLEVBQTFCLEtBQ1hHLEVBQU9DLEtBQUtDLEtBQUtKLEdBQ2pCSyxFQUFZekIsRUFBSTBCLHdCQUNoQkMsR0FDSUMsRUFBR1QsRUFDSFUsRUFBR1AsRUFDSFEsR0FBSW5DLEVBQ0pvQyxVQUFXZixRQUFRZixTQUFTb0IsUUFBUSxJQUF6QixJQUFrQ0YsRUFBbEMsS0FDWGEsYUFBYSxFQUNiQyxRQUFTOUMsRUFBQSxNQUFRZ0MsRUFBUixRQUFvQixHQUM3QmUsV0FDSUMsSUFBS1YsRUFBVVUsSUFDZkMsS0FBTVgsRUFBVVcsTUFHNUI1QixHQUFZUyxXQUFXb0IsS0FBS1YsTUFJcENXLGdCQUFnQjlCLEdBR3BCLFFBQVMrQixhQUFZdkMsR0FDakIsR0FBSWdCLEVBTUosT0FMQTdCLEdBQUVPLEtBQUtELG9CQUFxQixTQUFVRSxFQUFHNkMsR0FDakNBLEVBQUt2QyxXQUFhRCxJQUNsQmdCLEVBQVV3QixLQUdYeEIsRUFJWCxRQUFTZCxZQUFXRixHQUVoQlIsT0FBT3dCLFFBQVV1QixZQUFZdkMsRUFFN0IsSUFBSTZCLEdBQUEsT0FDQVksRUFBQSxHQUFXekMsRUFDWDBDLEVBQVV2RCxFQUFFLHlCQUF5QixHQUNyQ3dELEVBQVF4RCxFQUFFLHNCQUVkQSxHQUFFdUQsR0FBU0UsTUFBTSxJQUVqQkMsTUFBTUMsT0FBT2pCLEVBQUdjLEVBQU0sSUFDdEJFLE1BQU1DLE9BQU9MLEVBQU9DLEdBSXhCdkQsRUFBRSxVQUFVNEQsT0FBTyxTQUFVQyxHQUN6QjlDLFdBQVc4QyxFQUFFQyxPQUFPQyxTQUl4Qi9ELEVBQUVDLFVBQVUrRCxTQUFTLFNBQVVILEdBQ1osSUFBWEEsRUFBRUksT0FDRmpELGtCQUtSaEIsRUFBRSxxQ0FBcUNrRSxNQUFNLFdBQ3pDbEQ7QUNyRkosWUFZQSxTQUFTbUQsbUJBQWtCOUMsR0FFdkIsR0FBSStDLEVBR0FBLEdBRG9DLGdCQUE3Qi9DLEdBQVlVLGFBQ1BWLEVBQVlTLFdBQVdULEVBQVlVLGNBRW5DVixDQUdoQixJQUFJZ0QsR0FBY0QsRUFBVXJCLFVBQVVDLElBQU0sRUFDeENzQixFQUFlRixFQUFVckIsVUFBVUUsS0FBTyxHQUMxQ3NCLEVBQVlDLFlBQVl4QixJQUN4QnlCLEVBQWFELFlBQVl2QixLQUN6QnlCLEVBQWNOLEVBQVVyQixVQUFVRSxLQUFPLElBQ3pDTixFQUFLeUIsRUFBVXpCLEdBQUdnQyxXQUNsQkMsRUFBZTVFLEVBQUUsaUJBQ2pCNkUsRUFBVVQsRUFBVXRCLE9BK0J4QixPQTdCQWdDLFdBQVVDLFdBQVYsMkJBQWdEcEMsRUFBaEQsMkhBR21DMEIsRUFIbkMsOENBSW9DQyxFQUpwQyw4TkFVbUNELEVBVm5DLDhDQVdvQ0ssRUFYcEMsK0dBY21DSCxFQWRuQyw4Q0Flb0NHLEVBZnBDLDRRQXNCbUNILEVBdEJuQyw4Q0F1Qm9DRSxFQXZCcEMsZ0VBeUJ3QkssVUFBVUUsU0FBUzdELFFBRTNDbkIsRUFBRTRFLEdBQWNqRSxPQUFPa0UsR0FFaEIsR0FBSXRELFNBQVEsU0FBVUMsR0FDekJ4QixFQUFFNkUsR0FDR0ksSUFBSSxXQUFZLFlBQ2hCQSxJQUFJLE1BQVVaLEVBRm5CLE1BR0tZLElBQUksT0FBV1gsRUFIcEIsTUFJS1csSUFBSSxZQUpULGdCQUlzQ3RDLEVBSnRDLG1CQUtLc0MsSUFBSSxVQUxULEtBTUtBLElBQUksU0FOVCxPQU9LQyxLQUFLLGVBQWdCLFNBQVVyQixHQUM1QnJDLEVBQVE0QyxPQUt4QixRQUFTZSxhQUFZOUQsR0FFakIsTUFBTyxJQUFJRSxTQUFRLFNBQVVDLEdBQ3pCSCxFQUFZVSxjQUFnQixFQUM1QlAsRUFBUUgsS0FJaEIsUUFBUytELGFBQVlDLEdBR2pCLE1BQU8sSUFBSTlELFNBQVEsU0FBVUMsR0FDekJ4QixFQUFFc0YsV0FDR0MsS0FBSyxJQUNMQSxLQUFLLHlCQUVWdkYsRUFBRXVELFNBQ0cwQixJQUFJLFlBQWEsZ0NBQ2pCQyxLQUFLLGVBQWdCLFNBQVVyQixHQUM1QjdELEVBQUV1RCxTQUFTMEIsSUFBSSxVQUFXLEdBQzFCekQsRUFBUTZELE9BS3hCLFFBQVNHLGlCQUFnQm5FLEdBRXJCLEdBQUl1QixHQUFZdkIsRUFBWXVCLFNBRTVCLE9BQU8sSUFBSXJCLFNBQVEsU0FBVUMsR0FFSSxnQkFBbEJILEdBQVlxQixHQUNuQjFDLEVBQUVzRixXQUNHQyxLQUFLLElBQ0xBLEtBQUssK0JBR2Q3QixNQUFNQyxPQUFOLEdBQWdCZixFQUFhVyxTQUU3QnZELEVBQUV1RCxTQUNHMEIsSUFBSSxZQUFhLDZCQUNqQkMsS0FBSyxlQUFnQixTQUFVckIsR0FDNUI3RCxFQUFFdUQsU0FBUzBCLElBQUksVUFBVyxHQUMxQnpELEVBQVFILE9BS3hCLFFBQVNvRSxVQUFTcEUsR0F5QmQsTUFBTyxJQUFJRSxTQUFRLFNBQVVDLEdBQ3pCeEIsRUFBRXVELFNBQ0cwQixJQUFJLFlBQWEsZ0NBQ2pCQyxLQUFLLGVBQWdCLFNBQVVyQixHQUM1QjdELEVBQUV1RCxTQUFTMEIsSUFBSSxVQUFXLEdBQzFCdkIsTUFBTUMsT0FBTixHQUFnQnRDLEVBQVlxQixFQUFLYSxTQUNqQ3ZELEVBQUV1RCxTQUNHMEIsSUFBSSxZQUFhLDZCQUNqQkMsS0FBSyxlQUFnQixTQUFVckIsR0FDNUI3RCxFQUFFdUQsU0FBUzBCLElBQUksVUFBVyxLQUVsQ3pELEVBQVFILE9BTXhCLFFBQVM4QixpQkFBZ0J1QyxHQUVyQixHQUFJZCxHQUFlNUUsRUFBRSxpQkFDakIyRixFQUFRcEUsUUFBUUMsUUFBUWtFLEVBRTVCZCxHQUFhZ0IsVUFBWSxFQUV6QixLQUFLLEdBQUlwRixHQUFJLEVBQUdBLEVBQUlrRixFQUFJNUQsV0FBV1gsT0FBUVgsSUFDdkNtRixFQUFRQSxFQUFNRSxLQUFLMUIsbUJBQ2QwQixLQUFLVCxhQUNMUyxLQUFLTCxpQkFDTEssS0FBS0osVUFDTEksS0FBSzFCLG1CQWhMbEIsR0FBSW1CLFdBQVl0RixFQUFFLGFBQ2Q4RSxVQUFZN0UsU0FBUzZGLFlBQVk3RixTQUFTNkYsWUFBWTNFLE9BQVMsR0FDL0RvQyxRQUFVdkQsRUFBRSx5QkFBeUIsR0FDckN3RSxhQUNJeEIsSUFBSyxHQUNMQyxLQUFNLEtBRVY4QyxZQUNJL0MsSUFBSyxJQUNMQyxLQUFNO0FDVGQsY0FBQyxXQVdHLElBQUssR0FORCtDLEdBQ0FDLEVBQ0FDLEVBQ0FDLEVBSkFDLEVBQVFwRyxFQUFFLFNBS1ZxRyxFQUFXLEdBRU5DLEVBQUksRUFBUUQsR0FBTEMsRUFBZUEsSUFDM0JILEVBQVFuRyxFQUFFLFdBQ1ZnRyxFQUFNaEcsRUFBRSxhQUNSaUcsRUFBTWpHLEVBQUUsYUFDUmtHLEVBQUtsRyxFQUFFLGFBRVBBLEVBQUVrRyxHQUFJSyxLQUFLLEtBQVgsTUFBdUJELEdBRXZCdEcsRUFBRW1HLEdBQU9JLEtBQUssT0FBZCxRQUE4QkQsR0FBS0MsS0FBSyxPQUFRLFVBRWhEdkcsRUFBRWdHLEdBQUtyRixPQUFPd0YsR0FDZG5HLEVBQUVrRyxHQUFJdkYsT0FBT3FGLEdBQUtyRixPQUFPc0YsR0FDekJqRyxFQUFFb0csR0FBT3pGLE9BQU91RiIsImZpbGUiOiJzY3JpcHRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICQuZ2V0SlNPTihcIi4uL2Z1bmNNYWNoaW5lU2V0dGluZ3MuanNvblwiLCBmdW5jdGlvbiAocmVzdWx0KSB7XHJcblxyXG4gICAgICAgIHdpbmRvdy5wcm9mZXNzb3JDb25maWdGaWxlID0gcmVzdWx0O1xyXG5cclxuICAgICAgICAkLmVhY2gocmVzdWx0LCBmdW5jdGlvbiAoaSwgZmllbGQpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBvcHQgPSAkKFwiPG9wdGlvbj48L29wdGlvbj5cIikuYXBwZW5kKGZpZWxkLm5hbWUpO1xyXG5cclxuICAgICAgICAgICAgJChvcHQpLnZhbChmaWVsZC5lcXVhdGlvbik7XHJcblxyXG4gICAgICAgICAgICAkKFwic2VsZWN0XCIpLmFwcGVuZChvcHQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGNoYW5nZVBsb3QoZmllbGQuZXF1YXRpb24pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH0pO1xyXG5cclxufSk7XHJcbiIsImZ1bmN0aW9uIHN0YXJ0RnVuY01hY2goKSB7XHJcblxyXG4gICAgdmFyIHhpbnB1dHMgPSAkKFwiaW5wdXRbdHlwZT0nbnVtYmVyJ11cIiksXHJcbiAgICAgICAgaGlkZUFuaW1hdGlvbkNoZWNrZWQgPSAkKFwiI2FuaW1hdGU6Y2hlY2tlZFwiKS5sZW5ndGggPiAwLFxyXG4gICAgICAgIGhpZGVHcmFwaENoZWNrZWQgPSAkKFwiI3Nob3dHcmFwaDpjaGVja2VkXCIpLmxlbmd0aCA+IDAsXHJcbiAgICAgICAgZ3JhcGhPcHQgPSB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNvbnNvbGUubG9nKFwiRG9uZSFcIikpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhbmltYXRlOiBoaWRlQW5pbWF0aW9uQ2hlY2tlZCxcclxuICAgICAgICAgICAgc2hvd0dyYXBoOiBoaWRlR3JhcGhDaGVja2VkLFxyXG4gICAgICAgICAgICBlcXVhdGlvbjogcHJvZk9wdC5lcXVhdGlvblxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYW5pU2V0dGluZ3MgPSB7XHJcbiAgICAgICAgICAgIGRhdGFwb2ludHM6IFtdLFxyXG4gICAgICAgICAgICBjdXJyZW50Um91bmQ6IDBcclxuICAgICAgICB9O1xyXG5cclxuICAgICQuZWFjaCh4aW5wdXRzLCBmdW5jdGlvbiAoaSwgdmFsKSB7XHJcbiAgICAgICAgdmFyIHh2YWwgPSAkKHZhbCkudmFsKCksXHJcbiAgICAgICAgICAgIGVxdWF0aW9uID0gcHJvZk9wdC5lcXVhdGlvbjtcclxuXHJcbiAgICAgICAgaWYgKHh2YWwpIHtcclxuICAgICAgICAgICAgdmFyIHJlcGxhY2VYID0gZXF1YXRpb24ucmVwbGFjZShcInhcIiwgYCgke3h2YWx9KWApLFxyXG4gICAgICAgICAgICAgICAgeXZhbCA9IG1hdGguZXZhbChyZXBsYWNlWCksXHJcbiAgICAgICAgICAgICAgICBpbnB1dENvb3IgPSB2YWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXHJcbiAgICAgICAgICAgICAgICBwb2ludCA9IHtcclxuICAgICAgICAgICAgICAgICAgICB4OiB4dmFsLFxyXG4gICAgICAgICAgICAgICAgICAgIHk6IHl2YWwsXHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGksXHJcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlRXF1OiBwcm9mT3B0LmVxdWF0aW9uLnJlcGxhY2UoXCJ4XCIsIGAoJHt4dmFsfSlgKSxcclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVQb2ludDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiAkKGA8cD4ke3h2YWx9PC9wPmApWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgIGJlZ2luQ29vcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3A6IGlucHV0Q29vci50b3AsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IGlucHV0Q29vci5sZWZ0XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgYW5pU2V0dGluZ3MuZGF0YXBvaW50cy5wdXNoKHBvaW50KTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBhbmltYXRvckNvbnRyb2woYW5pU2V0dGluZ3MpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjaGVja0NvbmZpZyh2YWwpIHtcclxuICAgIHZhciBwcm9mT3B0O1xyXG4gICAgJC5lYWNoKHByb2Zlc3NvckNvbmZpZ0ZpbGUsIGZ1bmN0aW9uIChpLCBpdGVtKSB7XHJcbiAgICAgICAgaWYgKGl0ZW0uZXF1YXRpb24gPT09IHZhbCkge1xyXG4gICAgICAgICAgICBwcm9mT3B0ID0gaXRlbTtcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG4gICAgcmV0dXJuIHByb2ZPcHQ7XHJcbn1cclxuXHJcbi8vRGlwc2xheSBLYXRleCBlcXVhdGlvblxyXG5mdW5jdGlvbiBjaGFuZ2VQbG90KHZhbCkge1xyXG5cclxuICAgIHdpbmRvdy5wcm9mT3B0ID0gY2hlY2tDb25maWcodmFsKTtcclxuICAgIFxyXG4gICAgdmFyIHkgPSBgeSA9IGAsXHJcbiAgICAgICAgZXF1YXQgPSBgJHt2YWx9YCxcclxuICAgICAgICBlcXVQYXJhID0gJChcIiNmdW5jdGlvbk1hY2hpbmUgI2VxdVwiKVswXSxcclxuICAgICAgICB5UGFyYSA9ICQoXCIjZnVuY3Rpb25NYWNoaW5lICN5XCIpO1xyXG5cclxuICAgICQoZXF1UGFyYSkuZW1wdHkoXCJcIik7XHJcblxyXG4gICAga2F0ZXgucmVuZGVyKHksIHlQYXJhWzBdKTtcclxuICAgIGthdGV4LnJlbmRlcihlcXVhdCwgZXF1UGFyYSk7XHJcbn1cclxuXHJcbi8qKioqKkRPQ1VNRU5UIG9uY2hhbmdlIEVWRU5UIEhBTkRMRVIqKioqKi9cclxuJChcInNlbGVjdFwiKS5jaGFuZ2UoZnVuY3Rpb24gKGUpIHtcclxuICAgIGNoYW5nZVBsb3QoZS50YXJnZXQudmFsdWUpO1xyXG59KTtcclxuXHJcbi8qKioqRE9DVU1FTlQga2V5ZG93biBFVkVOVCBIQU5ETEVSKioqKi9cclxuJChkb2N1bWVudCkua2V5cHJlc3MoZnVuY3Rpb24gKGUpIHtcclxuICAgIGlmIChlLndoaWNoID09IDEzKSB7XHJcbiAgICAgICAgc3RhcnRGdW5jTWFjaCgpO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbi8qKioqKkdPISBDbGljayoqKioqL1xyXG4kKFwiaW5wdXRbdHlwZT0nYnV0dG9uJ11bdmFsdWU9J0dvISddXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgIHN0YXJ0RnVuY01hY2goKTtcclxufSk7IiwidmFyIHN0YXR1c0JhciA9ICQoXCIjc3RhdHVzIHBcIiksXHJcbiAgICBsYXN0U2hlZXQgPSBkb2N1bWVudC5zdHlsZVNoZWV0c1tkb2N1bWVudC5zdHlsZVNoZWV0cy5sZW5ndGggLSAxXSxcclxuICAgIGVxdVBhcmEgPSAkKFwiI2Z1bmN0aW9uTWFjaGluZSAjZXF1XCIpWzBdLFxyXG4gICAgbWFjaGluZUNvb3IgPSB7XHJcbiAgICAgICAgdG9wOiA1NSxcclxuICAgICAgICBsZWZ0OiAzMDBcclxuICAgIH0sXHJcbiAgICBzdGF0dXNDb29yID0ge1xyXG4gICAgICAgIHRvcDogMjU1LFxyXG4gICAgICAgIGxlZnQ6IDMwMFxyXG4gICAgfTtcclxuXHJcbmZ1bmN0aW9uIGFuaW1hdGlvblRlbXBsYXRlKGFuaVNldHRpbmdzKSB7XHJcblxyXG4gICAgdmFyIHBvaW50RGF0YTtcclxuXHJcbiAgICBpZiAodHlwZW9mIGFuaVNldHRpbmdzLmN1cnJlbnRSb3VuZCA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgIHBvaW50RGF0YSA9IGFuaVNldHRpbmdzLmRhdGFwb2ludHNbYW5pU2V0dGluZ3MuY3VycmVudFJvdW5kXTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcG9pbnREYXRhID0gYW5pU2V0dGluZ3M7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHN0YXJ0VG9wT2ZmID0gcG9pbnREYXRhLmJlZ2luQ29vci50b3AgKyA1LFxyXG4gICAgICAgIHN0YXJ0TGVmdE9mZiA9IHBvaW50RGF0YS5iZWdpbkNvb3IubGVmdCArIDMwLFxyXG4gICAgICAgIGVuZFRvcE9mZiA9IG1hY2hpbmVDb29yLnRvcCxcclxuICAgICAgICBlbmRMZWZ0T2ZmID0gbWFjaGluZUNvb3IubGVmdCxcclxuICAgICAgICBoaWdod2F5UGF0aCA9IHBvaW50RGF0YS5iZWdpbkNvb3IubGVmdCArIDIyNSxcclxuICAgICAgICBpZCA9IHBvaW50RGF0YS5pZC50b1N0cmluZygpLFxyXG4gICAgICAgIG51bUNvbnRhaW5lciA9ICQoXCIjbnVtQ29udGFpbmVyXCIpLFxyXG4gICAgICAgIG51bVBhcmEgPSBwb2ludERhdGEuZWxlbWVudDtcclxuXHJcbiAgICBsYXN0U2hlZXQuaW5zZXJ0UnVsZShgQGtleWZyYW1lcyBhbmltYXRpb25QYXRoJHtpZH0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMCUge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAke3N0YXJ0VG9wT2ZmfXB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6ICR7c3RhcnRMZWZ0T2ZmfXB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMTAlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMzMlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6ICR7c3RhcnRUb3BPZmZ9cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogJHtoaWdod2F5UGF0aH1weDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDY2JSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAke2VuZFRvcE9mZn1weDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAke2hpZ2h3YXlQYXRofXB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOTAlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMTAwJSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6ICR7ZW5kVG9wT2ZmfXB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6ICR7ZW5kTGVmdE9mZn1weDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfWAsIGxhc3RTaGVldC5jc3NSdWxlcy5sZW5ndGgpO1xyXG5cclxuICAgICQobnVtQ29udGFpbmVyKS5hcHBlbmQobnVtUGFyYSk7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XHJcbiAgICAgICAgJChudW1QYXJhKVxyXG4gICAgICAgICAgICAuY3NzKFwicG9zaXRpb25cIiwgXCJhYnNvbHV0ZVwiKVxyXG4gICAgICAgICAgICAuY3NzKFwidG9wXCIsIGAke3N0YXJ0VG9wT2ZmfXB4YClcclxuICAgICAgICAgICAgLmNzcyhcImxlZnRcIiwgYCR7c3RhcnRMZWZ0T2ZmfXB4YClcclxuICAgICAgICAgICAgLmNzcyhcImFuaW1hdGlvblwiLCBgYW5pbWF0aW9uUGF0aCR7aWR9IDRzIGVhc2UtaW4tb3V0YClcclxuICAgICAgICAgICAgLmNzcyhcIm9wYWNpdHlcIiwgYDBgKVxyXG4gICAgICAgICAgICAuY3NzKFwiekluZGV4XCIsIGAxMDBgKVxyXG4gICAgICAgICAgICAuYmluZCgnYW5pbWF0aW9uZW5kJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUocG9pbnREYXRhKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9KVxyXG59XHJcblxyXG5mdW5jdGlvbiB1cGRhdGVSb3VuZChhbmlTZXR0aW5ncykge1xyXG4gICAgLy9tYWtlIHN1cmUgdGhhdCB0aGUgdXBkYXRlUG9pbnQgaXMgYWxzbyBzaG93RXZhbHVhdGVFcXVkLlxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XHJcbiAgICAgICAgYW5pU2V0dGluZ3MuY3VycmVudFJvdW5kICs9IDE7XHJcbiAgICAgICAgcmVzb2x2ZShhbmlTZXR0aW5ncyk7XHJcbiAgICB9KTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIHJlcGxhY2VYRXF1KGRhdGEpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xyXG4gICAgICAgICQoc3RhdHVzQmFyKVxyXG4gICAgICAgICAgICAuaHRtbChcIlwiKVxyXG4gICAgICAgICAgICAuaHRtbChcIjxwPj4+IENhbGN1bGF0aW5nPC9wPlwiKTtcclxuXHJcbiAgICAgICAgJChlcXVQYXJhKVxyXG4gICAgICAgICAgICAuY3NzKFwiYW5pbWF0aW9uXCIsIFwidGV4dERpc2FwcGVhciAycyBlYXNlLWluLW91dFwiKVxyXG4gICAgICAgICAgICAuYmluZChcImFuaW1hdGlvbmVuZFwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgJChlcXVQYXJhKS5jc3MoXCJvcGFjaXR5XCIsIDApO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShkYXRhKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2hvd0V2YWx1YXRlRXF1KGFuaVNldHRpbmdzKSB7XHJcblxyXG4gICAgdmFyIGNoYW5nZUVxdSA9IGFuaVNldHRpbmdzLmNoYW5nZUVxdTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBhbmlTZXR0aW5ncy55ID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICQoc3RhdHVzQmFyKVxyXG4gICAgICAgICAgICAgICAgLmh0bWwoXCJcIilcclxuICAgICAgICAgICAgICAgIC5odG1sKFwiPHA+Pj4gUmV0dXJuaW5nIGFuc3dlci48L3A+XCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAga2F0ZXgucmVuZGVyKGAke2NoYW5nZUVxdX1gLCBlcXVQYXJhKTtcclxuXHJcbiAgICAgICAgJChlcXVQYXJhKVxyXG4gICAgICAgICAgICAuY3NzKFwiYW5pbWF0aW9uXCIsICd0ZXh0QXBwZWFyIDFzIGVhc2UtaW4tb3V0JylcclxuICAgICAgICAgICAgLmJpbmQoXCJhbmltYXRpb25lbmRcIiwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICQoZXF1UGFyYSkuY3NzKFwib3BhY2l0eVwiLCAxKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoYW5pU2V0dGluZ3MpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNob3dZQW5zKGFuaVNldHRpbmdzKSB7XHJcbiAgICBcclxuICAgIC8qdGhlIGVuZGluZyBjb29yZGluYXRlcyBuZWVkIHRvIGJlIGNoYW5nZWQgKi9cclxuICAgIFxyXG4gICAgLypjb25zb2xlLmxvZyhhbmlTZXR0aW5ncyk7XHJcblxyXG4gICAgdmFyIG5ld0JlZ2luVG9wID0gYW5pU2V0dGluZ3MuZW5kQ29vci50b3AsXHJcbiAgICAgICAgbmV3QmVnaW5MZWZ0ID0gYW5pU2V0dGluZ3MuZW5kQ29vci5sZWZ0LFxyXG4gICAgICAgIG5ld0VuZFRvcCA9IGFuaVNldHRpbmdzLmJlZ2luQ29vci50b3AsXHJcbiAgICAgICAgbmV3RW5kTGVmdCA9IGFuaVNldHRpbmdzLmJlZ2luQ29vci5sZWZ0O1xyXG5cclxuICAgIGNvbnNvbGUubG9nKGFuaVNldHRpbmdzKTtcclxuXHJcbiAgICBhbmlTZXR0aW5ncy5lbmRDb29yID0ge1xyXG4gICAgICAgIHRvcDogbmV3QmVnaW5Ub3AsXHJcbiAgICAgICAgbGVmdDogbmV3QmVnaW5MZWZ0XHJcbiAgICB9O1xyXG5cclxuICAgIGFuaVNldHRpbmdzLmJlZ2luQ29vciA9IHtcclxuICAgICAgICB0b3A6IG5ld0VuZFRvcCxcclxuICAgICAgICBsZWZ0OiBuZXdFbmRMZWZ0XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnNvbGUubG9nKGFuaVNldHRpbmdzKTsqL1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xyXG4gICAgICAgICQoZXF1UGFyYSlcclxuICAgICAgICAgICAgLmNzcyhcImFuaW1hdGlvblwiLCAndGV4dERpc2FwcGVhciAycyBlYXNlLWluLW91dCcpXHJcbiAgICAgICAgICAgIC5iaW5kKFwiYW5pbWF0aW9uZW5kXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAkKGVxdVBhcmEpLmNzcyhcIm9wYWNpdHlcIiwgMCk7XHJcbiAgICAgICAgICAgICAgICBrYXRleC5yZW5kZXIoYCR7YW5pU2V0dGluZ3MueX1gLCBlcXVQYXJhKTtcclxuICAgICAgICAgICAgICAgICQoZXF1UGFyYSlcclxuICAgICAgICAgICAgICAgICAgICAuY3NzKFwiYW5pbWF0aW9uXCIsICd0ZXh0QXBwZWFyIDFzIGVhc2UtaW4tb3V0JylcclxuICAgICAgICAgICAgICAgICAgICAuYmluZChcImFuaW1hdGlvbmVuZFwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKGVxdVBhcmEpLmNzcyhcIm9wYWNpdHlcIiwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKGFuaVNldHRpbmdzKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuLy9IYW5kbGUgYWxsIENTUyBhbmltYXRpb25zXHJcbmZ1bmN0aW9uIGFuaW1hdG9yQ29udHJvbChkcHMpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgdmFyIG51bUNvbnRhaW5lciA9ICQoXCIjbnVtQ29udGFpbmVyXCIpLFxyXG4gICAgICAgIGNoYWluID0gUHJvbWlzZS5yZXNvbHZlKGRwcyk7XHJcblxyXG4gICAgbnVtQ29udGFpbmVyLmlubmVySFRNTCA9IFwiXCI7XHJcblxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkcHMuZGF0YXBvaW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNoYWluID0gY2hhaW4udGhlbihhbmltYXRpb25UZW1wbGF0ZSlcclxuICAgICAgICAgICAgLnRoZW4ocmVwbGFjZVhFcXUpXHJcbiAgICAgICAgICAgIC50aGVuKHNob3dFdmFsdWF0ZUVxdSlcclxuICAgICAgICAgICAgLnRoZW4oc2hvd1lBbnMpXHJcbiAgICAgICAgICAgIC50aGVuKGFuaW1hdGlvblRlbXBsYXRlKVxyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgIC50aGVuKHVwZGF0ZVJvdW5kKTtcclxuICAgIH1cclxufSIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICAvKioqKlRBQkxFIE1BS0VSKioqKi9cclxuICAgIHZhciB0Ym9keSA9ICQoXCJ0Ym9keVwiKSxcclxuICAgICAgICB0ZDEsXHJcbiAgICAgICAgdGQyLFxyXG4gICAgICAgIHRyLFxyXG4gICAgICAgIGlucHV0LFxyXG4gICAgICAgIHJvd0NvdW50ID0gMTk7XHJcblxyXG4gICAgZm9yICh2YXIgaiA9IDE7IGogPD0gcm93Q291bnQ7IGorKykge1xyXG4gICAgICAgIGlucHV0ID0gJChcIjxpbnB1dD5cIik7XHJcbiAgICAgICAgdGQxID0gJChcIjx0ZD48L3RkPlwiKTtcclxuICAgICAgICB0ZDIgPSAkKFwiPHRkPjwvdGQ+XCIpO1xyXG4gICAgICAgIHRyID0gJChcIjx0cj48L3RyPlwiKTtcclxuXHJcbiAgICAgICAgJCh0cikuYXR0cihcImlkXCIsIGByb3cke2p9YCk7XHJcblxyXG4gICAgICAgICQoaW5wdXQpLmF0dHIoXCJuYW1lXCIsIGBpbnB1dCR7an1gKS5hdHRyKFwidHlwZVwiLCBcIm51bWJlclwiKTtcclxuXHJcbiAgICAgICAgJCh0ZDEpLmFwcGVuZChpbnB1dCk7XHJcbiAgICAgICAgJCh0cikuYXBwZW5kKHRkMSkuYXBwZW5kKHRkMik7XHJcbiAgICAgICAgJCh0Ym9keSkuYXBwZW5kKHRyKTtcclxuICAgIH1cclxufSgpKTtcclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
