"use strict";$(document).ready(function(){$.getJSON("../funcMachineSettings.json",function(n){window.professorConfigFile=n,$.each(n,function(n,e){var o=$("<option></option>").append(e.name);$(o).val(e.equation),$("select").append(o),0===n&&changePlot(e.equation)})})});
"use strict";function startFuncMach(){var e=$("input[type='number']"),t=$("#animate:checked").length>0,n=$("#showGraph:checked").length>0,o=({callback:function(){return Promise.resolve(console.log("Done!"))},animate:t,showGraph:n,equation:profOpt.equation},{datapoints:[],currentRound:0});$.each(e,function(e,t){var n=$(t).val(),a=profOpt.equation;if(n){var c=a.replace("x","("+n+")"),i=math.eval(c),r=t.getBoundingClientRect(),u={x:n,y:i,id:e,changeEqu:profOpt.equation.replace("x","("+n+")"),updatePoint:!0,element:$("<p>"+n+"</p>")[0],beginCoor:{top:r.top,left:r.left},endCoor:{top:55,left:300}};o.datapoints.push(u)}}),animatorControl(o)}function checkConfig(e){var t;return $.each(professorConfigFile,function(n,o){o.equation===e&&(t=o)}),t}function changePlot(e){window.profOpt=checkConfig(e);var t="y = ",n=""+e,o=$("#functionMachine #equ")[0],a=$("#functionMachine #y");$(o).empty(""),katex.render(t,a[0]),katex.render(n,o)}$("select").change(function(e){changePlot(e.target.value)}),$(document).keypress(function(e){13==e.which&&startFuncMach()}),$("input[type='button'][value='Go!']").click(function(){startFuncMach()});
"use strict";function animationTemplate(n){var t=n.datapoints[n.currentRound],e=t.beginCoor.top+5,a=t.beginCoor.left+30,o=t.endCoor.top+5,i=t.endCoor.left+30,r=246.5,s=t.id.toString(),u=$("#numContainer"),p=t.element;return lastSheet.insertRule("@keyframes animationPath"+s+" {\n                            0% {\n                                opacity: 0;\n                                top: "+e+"px;\n                                left: "+a+"px;\n                            }\n                            10% {\n                                opacity: 1;\n                            }\n                            33% {\n                                top: "+e+"px;\n                                left: "+r+"px;\n                            }\n                            66% {\n                                top: "+o+"px;\n                                left: "+r+"px;\n                            }\n                            90% {\n                                opacity: 1;\n                            }\n                            100% {\n                                opacity: 0;\n                                top: "+o+"px;\n                                left: "+i+"px;\n                            }\n                        }",lastSheet.cssRules.length),$(u).append(p),new Promise(function(t){$(p).css("position","absolute").css("top",e+"px").css("left",a+"px").css("animation","animationPath"+s+" 4s ease-in-out").css("opacity","0").css("zIndex","100").bind("animationend",function(e){t(n)})})}function updateRound(n){return new Promise(function(t){n.currentRound+=1,t(n),console.log(n)})}function replaceXEqu(n){return new Promise(function(t){$(statusBar).html("").html("<p>>> Calculating</p>"),$(equPara).css("animation","textDisappear 2s ease-in-out").bind("animationend",function(e){$(equPara).css("opacity",0),t(n)})})}function showEvaluateEqu(n){var t=n.datapoints[n.currentRound],e=t.changeEqu;return new Promise(function(a){"number"==typeof t.y&&$(statusBar).html("").html("<p>>> Returning answer.</p>"),katex.render(""+e,equPara),$(equPara).css("animation","textAppear 1s ease-in-out").bind("animationend",function(t){$(equPara).css("opacity",1),a(n)})})}function showYAns(n){var t=n.datapoints[n.currentRound],e=t.beginCoor.top,a=t.beginCoor.left+100,o=t.endCoor.top,i=t.endCoor.left;return t.endCoor={top:e,left:a},t.beginCoor={top:o,left:i},t.element.innerText=t.y,new Promise(function(e){$(equPara).css("animation","textDisappear 2s ease-in-out").bind("animationend",function(a){$(equPara).css("opacity",0),katex.render(""+t.y,equPara),$(equPara).css("animation","textAppear 1s ease-in-out").bind("animationend",function(n){$(equPara).css("opacity",1)}),e(n)})})}function placeYValue(n){var t=n.datapoints[n.currentRound],e=t.endCoor.top,a=t.endCoor.left;return t.beginCoor={top:e,left:a},t.endCoor={top:150,left:300},console.log(n),new Promise(function(e){var a=$("td#yval"+(t.id+1))[0];$(a).html(""),$(a).append("<p>"+t.y+"</p>"),e(n)})}function resetRound(n){n.datapoints[n.currentRound];return new Promise(function(t){$(equPara).css("animation","textDisappear 2s ease-in-out").bind("animationend",function(e){$(statusBar).html("").html("<p>>> Resetting...</p>"),$(equPara).css("opacity",0),katex.render(""+profOpt.equation,equPara),$(equPara).css("animation","textAppear 1s ease-in-out").bind("animationend",function(n){$(equPara).css("opacity",1),$(statusBar).html("")}),t(n)})})}function animatorControl(n){var t=$("#numContainer"),e=Promise.resolve(n);t.innerHTML="";for(var a=0;a<n.datapoints.length;a++)e=e.then(animationTemplate).then(replaceXEqu).then(showEvaluateEqu).then(showYAns).then(animationTemplate).then(placeYValue).then(animationTemplate).then(resetRound).then(updateRound)}var statusBar=$("#status p"),lastSheet=document.styleSheets[document.styleSheets.length-1],equPara=$("#functionMachine #equ")[0];
"use strict";!function(){for(var t,a,d,p,r=$("tbody"),n=19,e=1;n>=e;e++)p=$("<input>"),t=$("<td></td>"),a=$("<td></td>"),d=$("<tr></tr>"),$(d).attr("id","row"+e),$(p).attr("name","input"+e).attr("type","number"),$(a).attr("id","yval"+e),$(t).append(p),$(d).append(t).append(a),$(r).append(d)}();
//# sourceMappingURL=data:application/json;base64,
