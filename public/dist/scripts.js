"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol?"symbol":typeof t};!function(t,e){t.wand=e()}("undefined"!=typeof window?window:void 0,function(){var t={apndr:function(t,e){if("object"!==("undefined"==typeof t?"undefined":_typeof(t))||"object"!==("undefined"==typeof e?"undefined":_typeof(e))||Array.isArray(e))if("object"!==("undefined"==typeof t?"undefined":_typeof(t)))console.error("First parameter passed is not an object element.");else if("object"!==("undefined"==typeof e?"undefined":_typeof(e)))"string"!=typeof e&&"number"!=typeof e||t.appendChild(this.txt(e));else if(Array.isArray(e))for(var r=e,n=0;n<r.length;n++)this.apndr(t,r[n]);else console.error("Parameters are not compatible in the lib.apndr function.  Hit the arrow on the left for call stack.");else t.appendChild(e)},querApndr:function(t,e,r){var n=document.querySelector(t);if(null!=n){if(Array.isArray(e))for(var o=e,i=0;i<o.length;i++)this.apndr(n,this.crtElm(o[i]));else r?this.apndr(n,this.crtElm(e,r)):this.apndr(n,e);return n}console.error("No tag exists in the DOM. Hit the arrow on the left for call stack.")},querAttr:function(t,e,r){var n=document.querySelector(t);null==n?console.error("No tag exists in the DOM. Hit the arrow on the left for call stack."):e&&n.setAttribute(e,r)},txt:function(t){return"string"==typeof t?document.createTextNode(t):"number"==typeof t?document.createTextNode(t.toString()):void console.error("Parameter passed to lib.txt is not a string nor a number.  Hit the arrow on the left for call stack.")},crtElm:function(t,e){var r,n=document.createElement(t);return e&&("string"==typeof e?(r=this.txt(e),this.apndr(n,r)):console.error("Must pass a string as the second param in lib.crtElm function.  Hit the arrow on the left for call stack.")),n}};return t});
"use strict";function changePlot(n){equPara.innerText="";var a="y = ",e=""+n;katex.render(a,yPara),katex.render(e,equPara),globalEqu=n}function dispConfig(n){var a=JSON.parse(n),e=wand.crtElm("select");e.name="equDrop";for(var r=0;r<a.length;r++){var t=wand.crtElm("option",a[r].name);t.value=a[r].equation,wand.apndr(e,t),wand.querApndr("#dropdown",e),0===r&&changePlot(a[r].equation)}}function loadConfig(n,a){var e=new XMLHttpRequest;e.onreadystatechange=function(){4==e.readyState&&200==e.status&&(config=e.responseText,n(config))},e.open("GET",a,!0),e.send()}var config,globalEqu,equPara=wand.querApndr("#functionMachine #equ"),yPara=wand.querApndr("#functionMachine #y");loadConfig(dispConfig,"../funcMachineSettings.json");
"use strict";function aniConfig(n,t,e,a,o){var r={};return r.begCoorData=n,r.endCoorData=t,r.num=e,r.alphaid=a,r.delay=o,r}function animationTemplate(n){var t=n.begCoorData.top+5,e=n.begCoorData.right-30,a=n.endCoorData.top,o=n.endCoorData.right,r=246,i=wand.querApndr("#numContainer");return n.num.style.position="absolute",n.num.style.top=t+"px",n.num.style.left=e+"px",wand.apndr(i,n.num),lastSheet.insertRule("@keyframes toFuncMachine"+n.alphaid+" {\n                            0% {\n                                opacity: 0;\n                                top: "+t+"px;\n                                left: "+e+"px;\n                            }\n                            10% {\n                                opacity: 1;\n                            }\n                            33% {\n                                top: "+t+"px;\n                                left: "+r+"px;\n                            }\n                            66% {\n                                top: "+a+"px;\n                                left: "+r+"px;\n                            }\n                            90% {\n                                opacity: 1;\n                            }\n                            100% {\n                                opacity: 0;\n                                top: "+a+"px;\n                                left: "+o+"px;\n                            }\n                        }",lastSheet.cssRules.length),n.num.style.animation="toFuncMachine"+n.alphaid+" 3s ease-in-out "+14*n.delay+"s",n.num.style.opacity="0",n.num.style.zIndex="100",new Promise(function(t){window.setTimeout(function(){t(n.num)},3e3*n.delay)})}function animateToStatusBar(){console.log("Animate to status bar and pass the information to the graph function")}function equAppear(n){return new Promise(function(t){setTimeout(function(){"number"==typeof n&&(statusBar.innerText="",statusBar.innerText=">> Returning answer."),equPara.innerHTML="",equPara.style.opacity=0,katex.render(""+n,equPara),equPara.style.animation="textAppear 1s ease-in-out",equPara.style.opacity=1,t(n)},1500)})}function equAnimeDisappear(n){return new Promise(function(t){var e;if("object"===("undefined"==typeof n?"undefined":_typeof(n)))e=globalEqu.replace("x","("+n.innerText+")"),statusBar.innerText="",statusBar.innerText=">> Calculating",setTimeout(function(){equPara.style.animation="textDisappear 1.5s ease-in-out",t(e)},1500);else{if("string"!=typeof n)return;e=math.eval(n),setTimeout(function(){equPara.style.animation="textDisappear 1.5s ease-in-out",t(e)},1500)}})}function createAns(n){var t=wand.querApndr("#ansContainer"),e=wand.crtElm("p",n.toString());return t.innerHTML="",new Promise(function(n){setTimeout(function(){var t={top:55,right:300},a={};a.top=startingData[0].top+7.5,a.right=startingData[0].right;var o=aniConfig(t,a,e,"zz",0);startingData.pop(),n(o)},1500)})}function animate(n,t){console.log(n,t[n]);var e=wand.crtElm("p",t[n].num),a={top:55,right:300},o=aniConfig(t[n].coorData,a,e,alphaid[n],n),r=t[n].inputTag.name.match(/\d+/);startingData.push(t[n].coorData),animationTemplate(o).then(equAnimeDisappear).then(equAppear).then(equAnimeDisappear).then(equAppear).then(createAns).then(animationTemplate).then(function(e){return new Promise(function(a){setTimeout(function(){var i=wand.querApndr("#row"+1*r[0]+" td:nth-child(2)"),u="y = ",s=""+globalEqu,p=e.innerText,l={top:150,right:400};katex.render(u,yPara),katex.render(s,equPara),wand.apndr(i,p),o=aniConfig(t[n].coorData,l,e,"za",0),statusBar.innerText="",statusBar.innerText=">> Plotting answer.",a(o)},3e3)})}).then(animationTemplate)}function animatorControl(n,t){var e=wand.querApndr("#numContainer");e.innerHTML="";for(var a=0;a<n.length;a++)animate(a,n)}var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol?"symbol":typeof n},lastSheet=document.styleSheets[document.styleSheets.length-1],alphaid=["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r"],statusBar=wand.querApndr("#status p"),startingData=[];
"use strict";
"use strict";!function(){function n(){console.log("click"),e=[];for(var n=0;n<o.length;n++){console.log("click");var t=o[n];if(console.log(t),t.value){var c={coorData:t.getBoundingClientRect(),num:t.value,inputTag:t};e.push(c)}}animatorControl(e)}var o=document.querySelectorAll("input[type='number'][name*='input']"),e=[];document.onchange=function(n){"select"===n.target.localName&&changePlot(n.target.value)},document.onkeydown=function(o){13===o.keyCode&&n()},document.onclick=function(o){"Go!"===o.target.value&&n()}}();
"use strict";!function(){for(var n,d,r,t,a=wand.querApndr("tbody"),w=19,p=1;w>=p;p++)t=wand.crtElm("input"),n=wand.crtElm("td"),d=wand.crtElm("td"),r=wand.crtElm("tr"),r.id="row"+p,t.name="input"+p,t.type="number",wand.apndr(n,t),wand.apndr(r,[n,d]),wand.apndr(a,r)}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndhbmQuanMiLCJhamF4LmpzIiwiYW5pbWF0b3Jjb250cm9sLmpzIiwiYW5pbWF0b3Jjb250cm9sMi5qcyIsImV2ZW50cy5qcyIsIm1haW4uanMiXSwibmFtZXMiOlsiX3R5cGVvZiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwib2JqIiwiY29uc3RydWN0b3IiLCJnbG8iLCJsaWIiLCJ3YW5kIiwid2luZG93IiwidW5kZWZpbmVkIiwiYXBuZHIiLCJhIiwiYiIsIkFycmF5IiwiaXNBcnJheSIsImNvbnNvbGUiLCJlcnJvciIsImFwcGVuZENoaWxkIiwidGhpcyIsInR4dCIsImFyciIsImkiLCJsZW5ndGgiLCJxdWVyQXBuZHIiLCJjIiwiZWxlIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY3J0RWxtIiwicXVlckF0dHIiLCJzZXRBdHRyaWJ1dGUiLCJjcmVhdGVUZXh0Tm9kZSIsInRvU3RyaW5nIiwiY3JlYXRlRWxlbWVudCIsImNoYW5nZVBsb3QiLCJ2YWwiLCJlcXVQYXJhIiwiaW5uZXJUZXh0IiwieSIsImVxdWF0Iiwia2F0ZXgiLCJyZW5kZXIiLCJ5UGFyYSIsImdsb2JhbEVxdSIsImRpc3BDb25maWciLCJwYXJzZWRPYmoiLCJKU09OIiwicGFyc2UiLCJzZWxlY3QiLCJuYW1lIiwib3B0IiwidmFsdWUiLCJlcXVhdGlvbiIsImxvYWRDb25maWciLCJmdW5jIiwic2VhcmNoIiwieGh0dHAiLCJYTUxIdHRwUmVxdWVzdCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJjb25maWciLCJyZXNwb25zZVRleHQiLCJvcGVuIiwic2VuZCIsImFuaUNvbmZpZyIsImJlZ0Nvb3JEYXRhIiwiZW5kQ29vckRhdGEiLCJudW0iLCJhbHBoYWlkIiwiYW5pbWF0ZUNvbmZpZyIsImRlbGF5IiwiYW5pbWF0aW9uVGVtcGxhdGUiLCJzdGFydFRvcE9mZiIsInRvcCIsInN0YXJ0UmlnaHRPZmYiLCJyaWdodCIsImVuZFRvcE9mZiIsImVuZFJpZ2h0T2ZmIiwiaGlnaHdheVBhdGgiLCJudW1Db250YWluZXIiLCJzdHlsZSIsInBvc2l0aW9uIiwibGVmdCIsImxhc3RTaGVldCIsImluc2VydFJ1bGUiLCJjc3NSdWxlcyIsImFuaW1hdGlvbiIsIm9wYWNpdHkiLCJ6SW5kZXgiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJhbmltYXRlVG9TdGF0dXNCYXIiLCJsb2ciLCJlcXVBcHBlYXIiLCJjaGFuZ2VFcXUiLCJzdGF0dXNCYXIiLCJpbm5lckhUTUwiLCJlcXVBbmltZURpc2FwcGVhciIsInJlcGxhY2UiLCJtYXRoIiwiZXZhbCIsImNyZWF0ZUFucyIsImFucyIsImFuc0NvbnRhaW5lciIsImZ1bmNNYWNoQ29vciIsInN0YXJ0aW5nRGF0YSIsInBvcCIsImFuaW1hdGUiLCJhdyIsImNvb3JEYXRhIiwibnVtYmVySW5wdXQiLCJpbnB1dFRhZyIsIm1hdGNoIiwicHVzaCIsInRoZW4iLCJ5dmFsIiwidGQiLCJ5dmFsdWUiLCJzdGF0dXNCYXJDb29yIiwiYW5pbWF0b3JDb250cm9sIiwic3R5bGVTaGVldHMiLCJzdGFydEZ1bmNNYWNoIiwiYW5pbWF0ZVdhaXQiLCJpbnB1dE9wdCIsImlucHV0IiwiYW5pRGF0YSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJvbmNoYW5nZSIsImUiLCJ0YXJnZXQiLCJsb2NhbE5hbWUiLCJvbmtleWRvd24iLCJrZXlDb2RlIiwib25jbGljayIsInRkMSIsInRkMiIsInRyIiwidGJvZHkiLCJyb3dDb3VudCIsImoiLCJpZCIsInR5cGUiXSwibWFwcGluZ3MiOiJBQUFBLFlBRUEsSUFBSUEsU0FBNEIsa0JBQVhDLFNBQW9ELGdCQUFwQkEsUUFBT0MsU0FBd0IsU0FBVUMsR0FBTyxhQUFjQSxJQUFTLFNBQVVBLEdBQU8sTUFBT0EsSUFBeUIsa0JBQVhGLFNBQXlCRSxFQUFJQyxjQUFnQkgsT0FBUyxlQUFrQkUsS0FJek8sU0FBVUUsRUFBS0MsR0FDWkQsRUFBSUUs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Qix1Q0FDckNMLElBeUJKbEcsVUFBU3dHLFNBQVcsU0FBU0MsR0FDRSxXQUF2QkEsRUFBRUMsT0FBT0MsV0FDVG5HLFdBQVdpRyxFQUFFQyxPQUFPakYsUUFLNUJ6QixTQUFTNEcsVUFBWSxTQUFVSCxHQUNULEtBQWRBLEVBQUVJLFNBQ0ZaLEtBS1JqRyxTQUFTOEcsUUFBVSxTQUFVTCxHQUNGLFFBQW5CQSxFQUFFQyxPQUFPakYsT0FDVHdFO0FDOUNaLGNBQUMsV0FXRyxJQUFLLEdBTkRjLEdBQ0FDLEVBQ0FDLEVBQ0FiLEVBSkFjLEVBQVFySSxLQUFLZ0IsVUFBVSxTQUt2QnNILEVBQVcsR0FFTkMsRUFBSSxFQUFRRCxHQUFMQyxFQUFlQSxJQUMzQmhCLEVBQVF2SCxLQUFLcUIsT0FBTyxTQUNwQjZHLEVBQU1sSSxLQUFLcUIsT0FBTyxNQUNsQjhHLEVBQU1uSSxLQUFLcUIsT0FBTyxNQUNsQitHLEVBQUtwSSxLQUFLcUIsT0FBTyxNQUVqQitHLEVBQUdJLEdBQUgsTUFBY0QsRUFFZGhCLEVBQU03RSxLQUFOLFFBQXFCNkYsRUFDckJoQixFQUFNa0IsS0FBTyxTQUViekksS0FBS0csTUFBTStILEVBQUtYLEdBQ2hCdkgsS0FBS0csTUFBTWlJLEdBQUtGLEVBQUtDLElBQ3JCbkksS0FBS0csTUFBTWtJLEVBQU9EIiwiZmlsZSI6InNjcmlwdHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cblRoaXMgaXMgYSBjdXN0b20gbGlicmFyeSB0aGF0IEkgbWFkZSB0byBtYWtlIERPTSBtYW5pcHVsYXRpb24gYSBsaXR0bGUgYml0IGZhc3RlclxuXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuKGZ1bmN0aW9uIChnbG8sIGxpYikge1xuICAgIGdsby53YW5kID0gbGliKCk7XG59KHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGxpYiA9IHtcbiAgICAgICAgYXBuZHI6IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGEgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIGIgPT09IFwib2JqZWN0XCIgJiYgIUFycmF5LmlzQXJyYXkoYikpIHtcbiAgICAgICAgICAgICAgICBhLmFwcGVuZENoaWxkKGIpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYSAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJGaXJzdCBwYXJhbWV0ZXIgcGFzc2VkIGlzIG5vdCBhbiBvYmplY3QgZWxlbWVudC5cIik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBiICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBiID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiBiID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGEuYXBwZW5kQ2hpbGQodGhpcy50eHQoYikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShiKSkge1xuICAgICAgICAgICAgICAgIHZhciBhcnIgPSBiO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBuZHIoYSwgYXJyW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJQYXJhbWV0ZXJzIGFyZSBub3QgY29tcGF0aWJsZSBpbiB0aGUgbGliLmFwbmRyIGZ1bmN0aW9uLiAgSGl0IHRoZSBhcnJvdyBvbiB0aGUgbGVmdCBmb3IgY2FsbCBzdGFjay5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHF1ZXJBcG5kcjogZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgICAgICAgIHZhciBlbGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGEpO1xuICAgICAgICAgICAgaWYgKGVsZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIk5vIHRhZyBleGlzdHMgaW4gdGhlIERPTS4gSGl0IHRoZSBhcnJvdyBvbiB0aGUgbGVmdCBmb3IgY2FsbCBzdGFjay5cIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhcnIgPSBiO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcG5kcihlbGUsIHRoaXMuY3J0RWxtKGFycltpXSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBuZHIoZWxlLCB0aGlzLmNydEVsbShiLCBjKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcG5kcihlbGUsIGIpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBlbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHF1ZXJBdHRyOiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgICAgICAgdmFyIGVsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYSk7XG4gICAgICAgICAgICBpZiAoZWxlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiTm8gdGFnIGV4aXN0cyBpbiB0aGUgRE9NLiBIaXQgdGhlIGFycm93IG9uIHRoZSBsZWZ0IGZvciBjYWxsIHN0YWNrLlwiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGIpIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlLnNldEF0dHJpYnV0ZShiLCBjKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHR4dDogZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShhKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGEgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoYS50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIlBhcmFtZXRlciBwYXNzZWQgdG8gbGliLnR4dCBpcyBub3QgYSBzdHJpbmcgbm9yIGEgbnVtYmVyLiAgSGl0IHRoZSBhcnJvdyBvbiB0aGUgbGVmdCBmb3IgY2FsbCBzdGFjay5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNydEVsbTogZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgIHZhciBlbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGEpLFxuICAgICAgICAgICAgICAgIHR4dDtcbiAgICAgICAgICAgIGlmIChiKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBiID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHR4dCA9IHRoaXMudHh0KGIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFwbmRyKGVsZSwgdHh0KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiTXVzdCBwYXNzIGEgc3RyaW5nIGFzIHRoZSBzZWNvbmQgcGFyYW0gaW4gbGliLmNydEVsbSBmdW5jdGlvbi4gIEhpdCB0aGUgYXJyb3cgb24gdGhlIGxlZnQgZm9yIGNhbGwgc3RhY2suXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBlbGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxpYjtcbn0pKTtcbiIsIiAgICB2YXIgY29uZmlnLFxuICAgICAgICBnbG9iYWxFcXUsXG4gICAgICAgIGVxdVBhcmEgPSB3YW5kLnF1ZXJBcG5kcihcIiNmdW5jdGlvbk1hY2hpbmUgI2VxdVwiKSxcbiAgICAgICAgeVBhcmEgPSB3YW5kLnF1ZXJBcG5kcihcIiNmdW5jdGlvbk1hY2hpbmUgI3lcIik7XG5cbiAgICAvL0RpcHNsYXkgS2F0ZXggZXF1YXRpb25cbiAgICBmdW5jdGlvbiBjaGFuZ2VQbG90KHZhbCkge1xuICAgICAgICBlcXVQYXJhLmlubmVyVGV4dCA9IFwiXCI7XG4gICAgICAgIHZhciB5ID0gYHkgPSBgLFxuICAgICAgICAgICAgZXF1YXQgPSBgJHt2YWx9YDtcbiAgICAgICAga2F0ZXgucmVuZGVyKHksIHlQYXJhKTtcbiAgICAgICAga2F0ZXgucmVuZGVyKGVxdWF0LCBlcXVQYXJhKTtcbiAgICAgICAgZ2xvYmFsRXF1ID0gdmFsO1xuICAgIH1cblxuICAgIC8qQUpBWCBSRVFVRVNUIFRPIEZVTkNNQUNISU5FU0VUVElOR1MuSlMgQU5EIExPQUQqL1xuICAgIGZ1bmN0aW9uIGRpc3BDb25maWcoYykge1xuICAgICAgICB2YXIgcGFyc2VkT2JqID0gSlNPTi5wYXJzZShjKSxcbiAgICAgICAgICAgIHNlbGVjdCA9IHdhbmQuY3J0RWxtKFwic2VsZWN0XCIpO1xuICAgICAgICBcbiAgICAgICAgc2VsZWN0Lm5hbWUgPSBcImVxdURyb3BcIjtcbiAgICAgICAgXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyc2VkT2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgb3B0ID0gd2FuZC5jcnRFbG0oXCJvcHRpb25cIiwgcGFyc2VkT2JqW2ldLm5hbWUpO1xuICAgICAgICAgICAgb3B0LnZhbHVlID0gcGFyc2VkT2JqW2ldLmVxdWF0aW9uO1xuICAgICAgICAgICAgd2FuZC5hcG5kcihzZWxlY3QsIG9wdCk7XG4gICAgICAgICAgICB3YW5kLnF1ZXJBcG5kcihcIiNkcm9wZG93blwiLCBzZWxlY3QpO1xuICAgICAgICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAgICAgICBjaGFuZ2VQbG90KHBhcnNlZE9ialtpXS5lcXVhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvL0xvYWQgaW4gdGhlIGNvbmZpZ3VyYXRpb24gZmlsZVxuICAgIGZ1bmN0aW9uIGxvYWRDb25maWcoZnVuYywgc2VhcmNoKSB7XG4gICAgICAgIHZhciB4aHR0cCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICB4aHR0cC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoeGh0dHAucmVhZHlTdGF0ZSA9PSA0ICYmIHhodHRwLnN0YXR1cyA9PSAyMDApIHtcbiAgICAgICAgICAgICAgICBjb25maWcgPSB4aHR0cC5yZXNwb25zZVRleHQ7XG4gICAgICAgICAgICAgICAgZnVuYyhjb25maWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB4aHR0cC5vcGVuKFwiR0VUXCIsIHNlYXJjaCwgdHJ1ZSk7XG4gICAgICAgIHhodHRwLnNlbmQoKTtcbiAgICB9XG5cbiAgICBsb2FkQ29uZmlnKGRpc3BDb25maWcsIFwiLi4vZnVuY01hY2hpbmVTZXR0aW5ncy5qc29uXCIpOyIsInZhciBsYXN0U2hlZXQgPSBkb2N1bWVudC5zdHlsZVNoZWV0c1tkb2N1bWVudC5zdHlsZVNoZWV0cy5sZW5ndGggLSAxXTtcblxuLy8gVE9ETzogRnVuY3Rpb24gbWFjaGluZSBpblxuXG4vL0FscGhhIElEIGlzIHRvIGlkZW50aWZ5IHRoZSBkaWZmZXJlbnQgYW5pbWF0aW9ucyB0aGF0IGNvdWxkIGhhcHBlbiBpbiB0aGUgYXBwbGljYXRpb25cbnZhciBhbHBoYWlkID0gWydhJywgJ2InLCAnYycsICdkJywgJ2UnLCAnZicsICdnJywgJ2gnLCAnaScsICdqJywgJ2snLCAnbCcsICdtJywgJ24nLCAnbycsICdwJywgJ3EnLCAnciddLFxuICAgIHN0YXR1c0JhciA9IHdhbmQucXVlckFwbmRyKFwiI3N0YXR1cyBwXCIpLFxuICAgIHN0YXJ0aW5nRGF0YSA9IFtdO1xuXG4vKioqKioqKipcIkNPTlNUUlVDVE9SXCIgKG5vdCBleGFjdGx5KSBmdW5jdGlvbnMqKioqKioqKioqL1xuZnVuY3Rpb24gYW5pQ29uZmlnKGJlZ0Nvb3JEYXRhLCBlbmRDb29yRGF0YSwgbnVtLCBhbHBoYWlkLCBpKSB7XG4gICAgdmFyIGFuaW1hdGVDb25maWcgPSB7fTtcbiAgICBhbmltYXRlQ29uZmlnLmJlZ0Nvb3JEYXRhID0gYmVnQ29vckRhdGE7XG4gICAgYW5pbWF0ZUNvbmZpZy5lbmRDb29yRGF0YSA9IGVuZENvb3JEYXRhO1xuICAgIGFuaW1hdGVDb25maWcubnVtID0gbnVtO1xuICAgIGFuaW1hdGVDb25maWcuYWxwaGFpZCA9IGFscGhhaWQ7XG4gICAgYW5pbWF0ZUNvbmZpZy5kZWxheSA9IGk7XG4gICAgcmV0dXJuIGFuaW1hdGVDb25maWc7XG59XG5cbmZ1bmN0aW9uIGFuaW1hdGlvblRlbXBsYXRlKGFuaW1hdGVDb25maWcpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICB2YXIgc3RhcnRUb3BPZmYgPSBhbmltYXRlQ29uZmlnLmJlZ0Nvb3JEYXRhLnRvcCArIDUsXG4gICAgICAgIHN0YXJ0UmlnaHRPZmYgPSBhbmltYXRlQ29uZmlnLmJlZ0Nvb3JEYXRhLnJpZ2h0IC0gMzAsXG4gICAgICAgIGVuZFRvcE9mZiA9IGFuaW1hdGVDb25maWcuZW5kQ29vckRhdGEudG9wLFxuICAgICAgICBlbmRSaWdodE9mZiA9IGFuaW1hdGVDb25maWcuZW5kQ29vckRhdGEucmlnaHQsXG4gICAgICAgIGhpZ2h3YXlQYXRoID0gMjQ2LFxuICAgICAgICBudW1Db250YWluZXIgPSB3YW5kLnF1ZXJBcG5kcihcIiNudW1Db250YWluZXJcIik7XG4gICAgYW5pbWF0ZUNvbmZpZy5udW0uc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgYW5pbWF0ZUNvbmZpZy5udW0uc3R5bGUudG9wID0gYCR7c3RhcnRUb3BPZmZ9cHhgO1xuICAgIGFuaW1hdGVDb25maWcubnVtLnN0eWxlLmxlZnQgPSBgJHtzdGFydFJpZ2h0T2ZmfXB4YDtcbiAgICB3YW5kLmFwbmRyKG51bUNvbnRhaW5lciwgYW5pbWF0ZUNvbmZpZy5udW0pO1xuICAgIGxhc3RTaGVldC5pbnNlcnRSdWxlKGBAa2V5ZnJhbWVzIHRvRnVuY01hY2hpbmUke2FuaW1hdGVDb25maWcuYWxwaGFpZH0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAke3N0YXJ0VG9wT2ZmfXB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAke3N0YXJ0UmlnaHRPZmZ9cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEwJSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDMzJSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogJHtzdGFydFRvcE9mZn1weDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogJHtoaWdod2F5UGF0aH1weDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgNjYlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAke2VuZFRvcE9mZn1weDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogJHtoaWdod2F5UGF0aH1weDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOTAlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMTAwJSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogJHtlbmRUb3BPZmZ9cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6ICR7ZW5kUmlnaHRPZmZ9cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfWAsIGxhc3RTaGVldC5jc3NSdWxlcy5sZW5ndGgpO1xuICAgIGFuaW1hdGVDb25maWcubnVtLnN0eWxlLmFuaW1hdGlvbiA9IGB0b0Z1bmNNYWNoaW5lJHthbmltYXRlQ29uZmlnLmFscGhhaWR9IDNzIGVhc2UtaW4tb3V0ICR7YW5pbWF0ZUNvbmZpZy5kZWxheSoxNH1zYDtcbiAgICBhbmltYXRlQ29uZmlnLm51bS5zdHlsZS5vcGFjaXR5ID0gJzAnO1xuICAgIGFuaW1hdGVDb25maWcubnVtLnN0eWxlLnpJbmRleCA9ICcxMDAnO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJlc29sdmUoYW5pbWF0ZUNvbmZpZy5udW0pO1xuICAgICAgICB9LCBhbmltYXRlQ29uZmlnLmRlbGF5ICogMzAwMCk7XG4gICAgfSk7XG59XG5cbi8qKioqKioqKioqKipBTklNQVRJT04gRlVOQ1RJT05TKioqKioqKioqKioqKioqKioqKioqKi9cbmZ1bmN0aW9uIGFuaW1hdGVUb1N0YXR1c0JhcigpIHtcbiAgICBjb25zb2xlLmxvZyhcIkFuaW1hdGUgdG8gc3RhdHVzIGJhciBhbmQgcGFzcyB0aGUgaW5mb3JtYXRpb24gdG8gdGhlIGdyYXBoIGZ1bmN0aW9uXCIpO1xuXG4gICAgLy9TaG93IGdyYXBoIGNoZWNrYm94XG4gICAgLy9BbmltYXRpb24gY2hlY2tib3hcbiAgICAvL0VxdWF0aW9uXG4gICAgLy9XaW5kb3cgbGltaXRzXG4gICAgLy9YIGFuZCBZIHZhbHVlXG5cbiAgICAvL2dyYXBoSXQoKTtcbn1cblxuZnVuY3Rpb24gZXF1QXBwZWFyKGNoYW5nZUVxdSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2hhbmdlRXF1ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgc3RhdHVzQmFyLmlubmVyVGV4dCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgc3RhdHVzQmFyLmlubmVyVGV4dCA9IFwiPj4gUmV0dXJuaW5nIGFuc3dlci5cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVxdVBhcmEuaW5uZXJIVE1MID0gXCJcIjtcbiAgICAgICAgICAgIGVxdVBhcmEuc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgICAgICAgICBrYXRleC5yZW5kZXIoYCR7Y2hhbmdlRXF1fWAsIGVxdVBhcmEpO1xuICAgICAgICAgICAgZXF1UGFyYS5zdHlsZS5hbmltYXRpb24gPSAndGV4dEFwcGVhciAxcyBlYXNlLWluLW91dCc7XG4gICAgICAgICAgICBlcXVQYXJhLnN0eWxlLm9wYWNpdHkgPSAxO1xuICAgICAgICAgICAgcmVzb2x2ZShjaGFuZ2VFcXUpO1xuICAgICAgICB9LCAxNTAwKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZXF1QW5pbWVEaXNhcHBlYXIobnVtKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIHZhciBjaGFuZ2VFcXU7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBudW0gPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIGNoYW5nZUVxdSA9IGdsb2JhbEVxdS5yZXBsYWNlKFwieFwiLCBgKCR7bnVtLmlubmVyVGV4dH0pYCk7XG5cbiAgICAgICAgICAgIHN0YXR1c0Jhci5pbm5lclRleHQgPSBcIlwiO1xuICAgICAgICAgICAgc3RhdHVzQmFyLmlubmVyVGV4dCA9IFwiPj4gQ2FsY3VsYXRpbmdcIjtcblxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZXF1UGFyYS5zdHlsZS5hbmltYXRpb24gPSAndGV4dERpc2FwcGVhciAxLjVzIGVhc2UtaW4tb3V0JztcbiAgICAgICAgICAgICAgICByZXNvbHZlKGNoYW5nZUVxdSk7XG4gICAgICAgICAgICB9LCAxNTAwKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbnVtID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBjaGFuZ2VFcXUgPSBtYXRoLmV2YWwobnVtKTtcblxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZXF1UGFyYS5zdHlsZS5hbmltYXRpb24gPSAndGV4dERpc2FwcGVhciAxLjVzIGVhc2UtaW4tb3V0JztcbiAgICAgICAgICAgICAgICByZXNvbHZlKGNoYW5nZUVxdSk7XG4gICAgICAgICAgICB9LCAxNTAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVBbnMoYW5zKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdmFyIGFuc0NvbnRhaW5lciA9IHdhbmQucXVlckFwbmRyKFwiI2Fuc0NvbnRhaW5lclwiKSxcbiAgICAgICAgbnVtID0gd2FuZC5jcnRFbG0oXCJwXCIsIGFucy50b1N0cmluZygpKTtcbiAgICBhbnNDb250YWluZXIuaW5uZXJIVE1MID0gXCJcIjtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBmdW5jTWFjaENvb3IgPSB7XG4gICAgICAgICAgICAgICAgICAgIHRvcDogNTUsXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAzMDBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVuZENvb3JEYXRhID0ge307XG5cbiAgICAgICAgICAgIGVuZENvb3JEYXRhLnRvcCA9IHN0YXJ0aW5nRGF0YVswXS50b3AgKyA3LjU7XG4gICAgICAgICAgICBlbmRDb29yRGF0YS5yaWdodCA9IHN0YXJ0aW5nRGF0YVswXS5yaWdodDtcblxuICAgICAgICAgICAgdmFyIGFuaW1hdGVDb25maWcgPSBhbmlDb25maWcoZnVuY01hY2hDb29yLCBlbmRDb29yRGF0YSwgbnVtLCAnenonLCAwKTtcblxuICAgICAgICAgICAgc3RhcnRpbmdEYXRhLnBvcCgpO1xuICAgICAgICAgICAgcmVzb2x2ZShhbmltYXRlQ29uZmlnKTtcbiAgICAgICAgfSwgMTUwMCk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGFuaW1hdGUoaSwgYXcpIHtcbiAgICBjb25zb2xlLmxvZyhpLCBhd1tpXSk7XG4gICAgdmFyIG51bSA9IHdhbmQuY3J0RWxtKFwicFwiLCBhd1tpXS5udW0pLFxuICAgICAgICBmdW5jTWFjaENvb3IgPSB7XG4gICAgICAgICAgICB0b3A6IDU1LFxuICAgICAgICAgICAgcmlnaHQ6IDMwMFxuICAgICAgICB9LFxuICAgICAgICBhbmltYXRlQ29uZmlnID0gYW5pQ29uZmlnKGF3W2ldLmNvb3JEYXRhLCBmdW5jTWFjaENvb3IsIG51bSwgYWxwaGFpZFtpXSwgaSksXG4gICAgICAgIG51bWJlcklucHV0ID0gYXdbaV0uaW5wdXRUYWcubmFtZS5tYXRjaCgvXFxkKy8pO1xuXG4gICAgc3RhcnRpbmdEYXRhLnB1c2goYXdbaV0uY29vckRhdGEpO1xuXG4gICAgLypCVUcgRklYKi9cbiAgICAvKndoZW4gcnVubmluZyB0aHJvdWdoIGEgbG9vcCB0aGlzIHByb21pc2UgY2hhaW4gaXMgYWxsIHJ1bm5pbmcgc2ltdWx0YW5lb3VzbHkqL1xuICAgIC8qVGhlIHRpbWluZyBpcyBnb2luZyB0byBoYXZlIHRvIGNoYW5nZSBiZWNhdXNlIHRoZSBzZXRUaW1lb3V0cyBhcmUgcnVubmluZyByaWdodCBhZnRlciB0aGUgbG9vcCBtYWtlcyB0aGUgZXhlY3V0aW9uIHN0YWNrKi9cbiAgICAvKlRoZSB0aW1pbmcgaXMgYWxsIG1lc3NlZCB1cC4qL1xuICAgIGFuaW1hdGlvblRlbXBsYXRlKGFuaW1hdGVDb25maWcpXG4gICAgICAgIC50aGVuKGVxdUFuaW1lRGlzYXBwZWFyKVxuICAgICAgICAudGhlbihlcXVBcHBlYXIpXG4gICAgICAgIC50aGVuKGVxdUFuaW1lRGlzYXBwZWFyKVxuICAgICAgICAudGhlbihlcXVBcHBlYXIpXG4gICAgICAgIC50aGVuKGNyZWF0ZUFucylcbiAgICAgICAgLnRoZW4oYW5pbWF0aW9uVGVtcGxhdGUpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uICh5dmFsKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRkID0gd2FuZC5xdWVyQXBuZHIoYCNyb3ckeyhudW1iZXJJbnB1dFswXSoxKX0gdGQ6bnRoLWNoaWxkKDIpYCksXG4gICAgICAgICAgICAgICAgICAgICAgICB5ID0gYHkgPSBgLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXF1YXQgPSBgJHtnbG9iYWxFcXV9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHl2YWx1ZSA9IHl2YWwuaW5uZXJUZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzQmFyQ29vciA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6IDE1MCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByaWdodDogNDAwXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGthdGV4LnJlbmRlcih5LCB5UGFyYSk7XG4gICAgICAgICAgICAgICAgICAgIGthdGV4LnJlbmRlcihlcXVhdCwgZXF1UGFyYSk7XG4gICAgICAgICAgICAgICAgICAgIHdhbmQuYXBuZHIodGQsIHl2YWx1ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZUNvbmZpZyA9IGFuaUNvbmZpZyhhd1tpXS5jb29yRGF0YSwgc3RhdHVzQmFyQ29vciwgeXZhbCwgXCJ6YVwiLCAwKTtcblxuICAgICAgICAgICAgICAgICAgICBzdGF0dXNCYXIuaW5uZXJUZXh0ID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzQmFyLmlubmVyVGV4dCA9IFwiPj4gUGxvdHRpbmcgYW5zd2VyLlwiO1xuXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoYW5pbWF0ZUNvbmZpZyk7XG4gICAgICAgICAgICAgICAgfSwgMzAwMCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oYW5pbWF0aW9uVGVtcGxhdGUpO1xuICAgIFxuICAgICAgICAvKlRPRE86IGV2YWx1YXRlIHRoZSBhcnJheSBpbiBvcmRlciB0byBjb250aW51ZSB0aGUgYXJyYXkgYW5pbWF0aW9uOyovXG4gICAgICAgIC8qKiAgV0lUSCBQUk9NSVNFUyBwYXNzIGFuIG9iamVjdCB0aHJvdWdob3V0IHRoZSBjaGFpbiBhbmQgZXZhbHVhdGUgaXQgaWYgaXQgaXMgZG9uZS5cbiAgICAgICAgLy8qKiAgVGhlIGdyYXBoIHdpbGwgbmVlZCBhbGwgdGhlIGluZm9ybWF0aW9uXG4gICAgICAgIC8qKiBBbmltYXRlIHRydWUgb3IgZmFsc2UuXG4gICAgICAgIC8qVE9ETzogaWYgYWxyZWFkeSBhbmltYXRlZCBjYW4gbm90IHJlYW5pbWF0ZSBhZ2Fpbi4qL1xuICAgIFxufVxuXG4vL0hhbmRsZSBhbGwgQ1NTIGFuaW1hdGlvbnNcbmZ1bmN0aW9uIGFuaW1hdG9yQ29udHJvbChhdywgZnVuYykge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIHZhciBudW1Db250YWluZXIgPSB3YW5kLnF1ZXJBcG5kcihcIiNudW1Db250YWluZXJcIiksXG4gICAgICAgIHJ1bkNvdW50ZXIgPSAtMTtcbiAgICBudW1Db250YWluZXIuaW5uZXJIVE1MID0gXCJcIjtcblxuLy8gICAgdmFyIGludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuLy8gICAgICAgIHJ1bkNvdW50ZXIgKz0gMTtcbi8vICAgICAgICBpZiAocnVuQ291bnRlciA9PT0gMTkpIHtcbi8vICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4vLyAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic3RvcFwiKTtcbi8vICAgICAgICB9XG4vLyAgICAgICAgYW5pbWF0ZShydW5Db3VudGVyLCBhdyk7XG4vLyAgICAgICAgY29uc29sZS5sb2cocnVuQ291bnRlciwgYXcpO1xuLy8gICAgfSwgMTQwMDApO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFuaW1hdGUoaSwgYXcpO1xuICAgICAgICB9XG59IiwiXCJ1c2Ugc3RyaWN0XCI7IiwiKGZ1bmN0aW9uICgpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIC8vcmVnaXN0ZXIgYWxsIGlucHV0cyBvbiB0aGUgYXBwbGljYXRpb25cbiAgICB2YXIgaW5wdXRPcHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbdHlwZT0nbnVtYmVyJ11bbmFtZSo9J2lucHV0J11cIiksXG4gICAgICAgIGFuaW1hdGVXYWl0ID0gW107XG5cbiAgICBmdW5jdGlvbiBzdGFydEZ1bmNNYWNoKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcImNsaWNrXCIpO1xuICAgICAgICBhbmltYXRlV2FpdCA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlucHV0T3B0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiY2xpY2tcIik7XG4gICAgICAgICAgICB2YXIgaW5wdXQgPSBpbnB1dE9wdFtpXTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGlucHV0KTtcbiAgICAgICAgICAgIGlmIChpbnB1dC52YWx1ZSkge1xuICAgICAgICAgICAgICAgIHZhciBhbmlEYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBcImNvb3JEYXRhXCI6IGlucHV0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICAgICAgICAgICAgICBcIm51bVwiOiBpbnB1dC52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgXCJpbnB1dFRhZ1wiOiBpbnB1dFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgYW5pbWF0ZVdhaXQucHVzaChhbmlEYXRhKTsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy9NYWtlIGEgYmlnZ2VyIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGhlcmUgdGhhdCB3aWxsIGJlIHBhc3NlZCB0aHJvdWdoIHRoZSBwcm9taXNlIGNoYWluLlxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFuaW1hdG9yQ29udHJvbChhbmltYXRlV2FpdCk7XG4gICAgfVxuXG4gICAgLyoqKioqRE9DVU1FTlQgb25jaGFuZ2UgRVZFTlQgSEFORExFUioqKioqL1xuICAgIGRvY3VtZW50Lm9uY2hhbmdlID0gZnVuY3Rpb24oZSkge1xuICAgICAgICBpZiAoZS50YXJnZXQubG9jYWxOYW1lID09PSBcInNlbGVjdFwiKSB7XG4gICAgICAgICAgICBjaGFuZ2VQbG90KGUudGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKioqRE9DVU1FTlQga2V5ZG93biBFVkVOVCBIQU5ETEVSKioqKi9cbiAgICBkb2N1bWVudC5vbmtleWRvd24gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAoZS5rZXlDb2RlID09PSAxMykge1xuICAgICAgICAgICAgc3RhcnRGdW5jTWFjaCgpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKioqKipET0NVTUVOVCBDTElDSyBIQU5ETEVSKioqKiovXG4gICAgZG9jdW1lbnQub25jbGljayA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmIChlLnRhcmdldC52YWx1ZSA9PT0gXCJHbyFcIikge1xuICAgICAgICAgICAgc3RhcnRGdW5jTWFjaCgpXG4gICAgICAgIH1cbiAgICB9O1xufSgpKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICAvKioqKlRBQkxFIE1BS0VSKioqKi9cbiAgICB2YXIgdGJvZHkgPSB3YW5kLnF1ZXJBcG5kcihcInRib2R5XCIpLFxuICAgICAgICB0ZDEsXG4gICAgICAgIHRkMixcbiAgICAgICAgdHIsXG4gICAgICAgIGlucHV0LFxuICAgICAgICByb3dDb3VudCA9IDE5O1xuXG4gICAgZm9yICh2YXIgaiA9IDE7IGogPD0gcm93Q291bnQ7IGorKykge1xuICAgICAgICBpbnB1dCA9IHdhbmQuY3J0RWxtKFwiaW5wdXRcIik7XG4gICAgICAgIHRkMSA9IHdhbmQuY3J0RWxtKFwidGRcIik7XG4gICAgICAgIHRkMiA9IHdhbmQuY3J0RWxtKFwidGRcIik7XG4gICAgICAgIHRyID0gd2FuZC5jcnRFbG0oXCJ0clwiKTtcblxuICAgICAgICB0ci5pZCA9IGByb3cke2p9YDtcblxuICAgICAgICBpbnB1dC5uYW1lID0gYGlucHV0JHtqfWA7XG4gICAgICAgIGlucHV0LnR5cGUgPSAnbnVtYmVyJztcblxuICAgICAgICB3YW5kLmFwbmRyKHRkMSwgaW5wdXQpO1xuICAgICAgICB3YW5kLmFwbmRyKHRyLCBbdGQxLCB0ZDJdKTtcbiAgICAgICAgd2FuZC5hcG5kcih0Ym9keSwgdHIpO1xuICAgIH1cbn0oKSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
