"use strict";!function(){for(var t,a,d,p,r=$("tbody"),n=19,e=1;e<=n;e++)p=$("<input>"),t=$("<td></td>"),a=$("<td></td>"),d=$("<tr></tr>"),$(d).attr("id","row"+e),$(p).attr("name","input"+e).attr("type","number"),$(a).attr("id","yval"+e),$(t).append(p),$(d).append(t).append(a),$(r).append(d)}();
"use strict";$(document).ready(function(){function n(n){var t=$("<option></option>").append(n.name);$(t).val(n.equation),$("select").append(t)}var t=location.search.substring(1),o=t.split("=")[1]+".json";$.getJSON(o,function(t){window.professorConfigFile=t,$.each(t,function(t,o){n(o),0===t&&changePlot(o.equation)})}).fail(function(){$("#status p").append("Add a query string")})});
"use strict";function changePlot(t){xMemory=[],clearValues(),window.profOpt=checkConfig(t);var n="y = ",e=""+t,o=$("#functionMachine #equ")[0],a=$("#functionMachine #y");$(o).empty(""),katex.render(n,a[0]),katex.render(e,o)}function stairStep(t){var n=246.5;lastSheet.insertRule("@keyframes "+t.name+" {\n                            0% {\n                                opacity: 1;\n                                top: "+t.startTopOff+"px;\n                                left: "+t.startLeftOff+"px;\n                            }\n                            10% {\n                                opacity: 1;\n                            }\n                            33% {\n                                top: "+t.startTopOff+"px;\n                                left: "+n+"px;\n                            }\n                            66% {\n                                top: "+t.endTopOff+"px;\n                                left: "+n+"px;\n                            }\n                            90% {\n                                opacity: 1;\n                            }\n                            100% {\n                                opacity: 0;\n                                top: "+t.endTopOff+"px;\n                                left: "+t.endLeftOff+"px;\n                            }\n                        }",lastSheet.cssRules.length)}function makeXToMachine(t,n){stairStep({startTopOff:t.top+5,startLeftOff:t.left+30,endTopOff:55,endLeftOff:300,name:"xToMachine"+n})}function makeMachineToY(t,n){stairStep({startTopOff:100,startLeftOff:530,endTopOff:t.top+5,endLeftOff:t.right+5,name:"machineToY"+n})}function makeYToStatusBar(t,n){stairStep({startTopOff:t.top+5,startLeftOff:t.right+10,endTopOff:150,endLeftOff:300,name:"yToStatusBar"+n})}function setUpObject(t,n,e){t.each(function(t){var o,a,i=$(this).val();if(i&&(o=+i,a=o.toFixed(profOpt.rounding),$(this).val(a),profOpt.view.x.min<=a&&a<=profOpt.view.x.max)){var p=n.equation.replace("x","("+a+")"),r=math.eval(p),u=(this.getBoundingClientRect(),{x:a,y:r.toFixed(profOpt.rounding),id:t,changeEqu:profOpt.equation.replace("x","("+a+")"),updatePoint:xMemory[t]!==a,element:$("#numContainer p").get(t)});u.updatePoint&&$("td#yval"+(t+1)).html(""),xMemory[t]=a,e.datapoints.push(u)}})}function startFuncMach(){var t=$("input[type='number']"),n=$("#animate:checked").length>0,e=$("#showGraph:checked").length>0,o={callback:function(t){return new Promise(function(n){console.log("finished plotting datapoint!"),n(t)})},animateHide:n,graphHide:e,equation:profOpt.equation,view:profOpt.view},a={datapoints:[],currentRound:0,graphOpt:o};setUpObject(t,o,a),animatorControl(a)}function checkConfig(t){var n;return $.each(professorConfigFile,function(e,o){o.equation===t&&(n=o)}),n}function clearValues(){var t=$("input[type='number']"),n=$("tr td:nth-of-type(2)");t.each(function(t,n){n.value=""}),n.each(function(t,n){n.innerHTML=""})}for(var xMemory=[],inputs=document.querySelectorAll("input[type='number']"),inputCount=inputs.length,lastSheet=document.styleSheets[document.styleSheets.length-1],run=!0,i=0;i<inputs.length;i++)inputs[i].oninput=function(t){var n=t.srcElement.value;profOpt.view.x.min<=n&&n<=profOpt.view.x.max?(run=!0,$("input[type='button'][value='Go!']").prop("disabled",!1).css({cursor:"pointer"}),$("#status p").html("")):(run=!1,$("input[type='button'][value='Go!']").prop("disabled",!0).css({cursor:"not-allowed"}),$("#status p").html(n+" x-value out of domains."))};for(var i=0;i<inputCount;i++){xMemory[i]=null;var inputCoor=inputs[i].getBoundingClientRect();makeXToMachine(inputCoor,i),makeMachineToY(inputCoor,i),makeYToStatusBar(inputCoor,i),$("#numContainer").append($("<p></p>"))}$("select").change(function(t){changePlot(t.target.value)}),$(document).keypress(function(t){13==t.which&&run&&startFuncMach()}),$("input[type='button'][value='Go!']").click(function(){startFuncMach()});
"use strict";function runAnimation(n,t){return function(e){var a=e.datapoints[e.currentRound],i=a.element;return new Promise(function(a){$(i).html(t).css({animation:""+n+e.currentRound+" "+aniDuration+"s ease-in-out"}).one("animationend",function(n){a(e)})})}}function statusMessage(n){var t=$("#status p");return function(e){return new Promise(function(a){t.html(n),a(e)})}}function replaceXEqu(n){return new Promise(function(t){$(equPara).css("animation","textDisappear "+aniDuration+"s ease-in-out").one("animationend",function(e){$(equPara).css("opacity",0),t(n)})})}function showEvaluateEqu(n){var t=n.datapoints[n.currentRound],e=t.changeEqu;return new Promise(function(t){katex.render(""+e,equPara),$(equPara).css("animation","textAppear "+aniDuration+"s ease-in-out").one("animationend",function(e){$(equPara).css("opacity",1),t(n)})})}function showYAns(n){var t=n.datapoints[n.currentRound];return new Promise(function(e){$(equPara).css("animation","textDisappear "+aniDuration+"s ease-in-out").one("animationend",function(){$(equPara).css("opacity",0),katex.render(""+t.y,equPara),e(n)})})}function showEquationAgain(n){return new Promise(function(t){$(equPara).css("animation","textAppear "+aniDuration+"s ease-in-out").one("animationend",function(e){$(equPara).css("opacity",1),t(n)})})}function placeYValue(n){var t=n.datapoints[n.currentRound];return new Promise(function(e){var a=$("td#yval"+(t.id+1))[0];$(a).html(""),$(a).append("<p>"+t.y+"</p>"),e(n)})}function resetRound(n){n.datapoints[n.currentRound];return new Promise(function(t){$(equPara).css("animation","textDisappear "+aniDuration+"s ease-in-out").one("animationend",function(e){$(equPara).css("opacity",0),katex.render(""+profOpt.equation,equPara),t(n)})})}function showDefaultEqu(n){return new Promise(function(t){$(equPara).css("animation","textAppear "+aniDuration+"s ease-in-out").one("animationend",function(e){$(equPara).css("opacity",1),t(n)})})}function plotter(n){n.datapoints[n.currentRound];return new Promise(function(t){n.graphOpt.callback(),t(n)})}function updateRound(n){var t=n.datapoints[n.currentRound];return new Promise(function(e){n.currentRound+=1,t.updatePoint=!1,e(n)})}function animateFuncMachine(n){return new Promise(function(t){$("#functionMachine").css({"background-image":"url(./functionMachineAni.gif)"}),t(n)})}function stopAniFuncMachine(n){return new Promise(function(t){$("#functionMachine").css({"background-image":"url(./functionMachineStill.gif)"}),t(n)})}function miniAni(n){return new Promise(function(t){var e=n.datapoints[n.currentRound],a=e.y,i=$("<p>"+a+"</p>");$("body").append(i),i.css({position:"absolute",opacity:0,left:550,top:50}).animate({opacity:1,top:100},function(e){i.css({display:"none"}),t(n)})})}function aniPromiseChain(n,t){n.datapoints.forEach(function(n){n.updatePoint===!0&&(t=t.then(runAnimation("xToMachine",n.x)).then(animateFuncMachine).then(statusMessage("Calculating")).then(replaceXEqu).then(showEvaluateEqu).then(showYAns).then(showEquationAgain).then(stopAniFuncMachine).then(miniAni).then(runAnimation("machineToY",n.y)).then(placeYValue).then(runAnimation("yToStatusBar","("+n.x+","+n.y+")")).then(statusMessage("Plotting ("+n.x+","+n.y+")")).then(plotter).then(resetRound).then(statusMessage("")).then(showDefaultEqu)),t=t.then(updateRound)})}function noAniPromiseChain(n,t){n.datapoints.forEach(function(n){n.updatePoint===!0&&(t=t.then(placeYValue).then(plotter)),t=t.then(updateRound)})}function animatorControl(n){var t=$("#numContainer"),e=Promise.resolve(n);t.innerHTML="",n.graphOpt.animateHide?noAniPromiseChain(n,e):aniPromiseChain(n,e)}var lastSheet=document.styleSheets[document.styleSheets.length-1],equPara=$("#functionMachine #equ")[0],aniDuration=2;
//# sourceMappingURL=data:application/json;base64,
