"use strict";!function(){for(var t,a,d,p,r=$("tbody"),n=19,e=1;n>=e;e++)p=$("<input>"),t=$("<td></td>"),a=$("<td></td>"),d=$("<tr></tr>"),$(d).attr("id","row"+e),$(p).attr("name","input"+e).attr("type","number"),$(a).attr("id","yval"+e),$(t).append(p),$(d).append(t).append(a),$(r).append(d)}();
"use strict";$(document).ready(function(){function n(n){var o=$("<option></option>").append(n.name);$(o).val(n.equation),$("select").append(o)}var o=location.search.substring(1),t=o.split("=")[1]+".json";$.getJSON(t,function(o){window.professorConfigFile=o,$.each(o,function(o,t){n(t),0===o&&changePlot(t.equation)})})});
"use strict";function stairStep(t){var n=246.5;lastSheet.insertRule("@keyframes "+t.name+" {\n                            0% {\n                                opacity: 1;\n                                top: "+t.startTopOff+"px;\n                                left: "+t.startLeftOff+"px;\n                            }\n                            10% {\n                                opacity: 1;\n                            }\n                            33% {\n                                top: "+t.startTopOff+"px;\n                                left: "+n+"px;\n                            }\n                            66% {\n                                top: "+t.endTopOff+"px;\n                                left: "+n+"px;\n                            }\n                            90% {\n                                opacity: 1;\n                            }\n                            100% {\n                                opacity: 0;\n                                top: "+t.endTopOff+"px;\n                                left: "+t.endLeftOff+"px;\n                            }\n                        }",lastSheet.cssRules.length)}function makeXToMachine(t,n){stairStep({startTopOff:t.top+5,startLeftOff:t.left+30,endTopOff:55,endLeftOff:300,name:"xToMachine"+n})}function makeMachineToY(t,n){stairStep({startTopOff:100,startLeftOff:530,endTopOff:t.top+5,endLeftOff:t.right+5,name:"machineToY"+n})}function makeYToStatusBar(t,n){stairStep({startTopOff:t.top+5,startLeftOff:t.right+10,endTopOff:150,endLeftOff:300,name:"yToStatusBar"+n})}function startFuncMach(){var t=$("input[type='number']"),n=$("#animate:checked").length>0,e=$("#showGraph:checked").length>0,o={callback:function(t){return new Promise(function(n){console.log("finished plotting datapoint!"),n(t)})},animateHide:n,graphHide:e,equation:profOpt.equation,view:profOpt.view},a={datapoints:[],currentRound:0,graphOpt:o};t.each(function(t){var n,e,i=$(this).val();if(i&&(n=+i,e=n.toFixed(profOpt.rounding),$(this).val(e),profOpt.view.x.min<=e&&e<=profOpt.view.x.max)){var p=o.equation.replace("x","("+e+")"),r=math.eval(p),u=(this.getBoundingClientRect(),{x:e,y:r.toFixed(profOpt.rounding),id:t,changeEqu:profOpt.equation.replace("x","("+e+")"),updatePoint:xMemory[t]!==e,element:$("#numContainer p").get(t)});u.updatePoint&&$("td#yval"+(t+1)).html(""),xMemory[t]=e,a.datapoints.push(u)}}),animatorControl(a)}function checkConfig(t){var n;return $.each(professorConfigFile,function(e,o){o.equation===t&&(n=o)}),n}function clearValues(){var t=$("input[type='number']"),n=$("tr td:nth-of-type(2)");t.each(function(t,n){n.value=""}),n.each(function(t,n){n.innerHTML=""})}function changePlot(t){xMemory=[],clearValues(),window.profOpt=checkConfig(t);var n="y = ",e=""+t,o=$("#functionMachine #equ")[0],a=$("#functionMachine #y");$(o).empty(""),katex.render(n,a[0]),katex.render(e,o)}for(var xMemory=[],inputs=document.querySelectorAll("input[type='number']"),inputCount=inputs.length,lastSheet=document.styleSheets[document.styleSheets.length-1],i=0;inputCount>i;i++){xMemory[i]=null;var inputCoor=inputs[i].getBoundingClientRect();makeXToMachine(inputCoor,i),makeMachineToY(inputCoor,i),makeYToStatusBar(inputCoor,i),$("#numContainer").append($("<p></p>"))}for(var inputs=document.querySelectorAll("input[type='number']"),run=!0,i=0;i<inputs.length;i++)inputs[i].oninput=function(t){var n=t.srcElement.value;profOpt.view.x.min<=n&&n<=profOpt.view.x.max?(run=!0,$("input[type='button'][value='Go!']").prop("disabled",!1).css({cursor:"pointer"}),$("#status p").html("")):(run=!1,$("input[type='button'][value='Go!']").prop("disabled",!0).css({cursor:"not-allowed"}),$("#status p").html("<p>"+n+" x-value out of domains.</p>"))};$("select").change(function(t){changePlot(t.target.value)}),$(document).keypress(function(t){13==t.which&&run&&startFuncMach()}),$("input[type='button'][value='Go!']").click(function(){startFuncMach()});
"use strict";function runAnimation(n,t){return function(e){var a=e.datapoints[e.currentRound],i=a.element;return new Promise(function(a){$(i).html(t).css({animation:""+n+e.currentRound+" "+aniDuration+"s ease-in-out"}).one("animationend",function(n){a(e)})})}}function statusMessage(n){return function(t){return new Promise(function(e){statusBar.html("<p>"+n+"</p>"),e(t)})}}function replaceXEqu(n){return new Promise(function(t){$(equPara).css("animation","textDisappear "+aniDuration+"s ease-in-out").one("animationend",function(e){$(equPara).css("opacity",0),t(n)})})}function showEvaluateEqu(n){var t=n.datapoints[n.currentRound],e=t.changeEqu;return new Promise(function(t){katex.render(""+e,equPara),$(equPara).css("animation","textAppear "+aniDuration+"s ease-in-out").one("animationend",function(e){$(equPara).css("opacity",1),t(n)})})}function showYAns(n){var t=n.datapoints[n.currentRound];return new Promise(function(e){$(equPara).css("animation","textDisappear "+aniDuration+"s ease-in-out").one("animationend",function(){$(equPara).css("opacity",0),katex.render(""+t.y,equPara),e(n)})})}function showEquationAgain(n){return new Promise(function(t){$(equPara).css("animation","textAppear "+aniDuration+"s ease-in-out").one("animationend",function(e){$(equPara).css("opacity",1),t(n)})})}function placeYValue(n){var t=n.datapoints[n.currentRound];return new Promise(function(e){var a=$("td#yval"+(t.id+1))[0];$(a).html(""),$(a).append("<p>"+t.y+"</p>"),e(n)})}function resetRound(n){n.datapoints[n.currentRound];return new Promise(function(t){$(equPara).css("animation","textDisappear "+aniDuration+"s ease-in-out").one("animationend",function(e){$(equPara).css("opacity",0),katex.render(""+profOpt.equation,equPara),t(n)})})}function showDefaultEqu(n){return new Promise(function(t){$(equPara).css("animation","textAppear "+aniDuration+"s ease-in-out").one("animationend",function(e){$(equPara).css("opacity",1),t(n)})})}function plotter(n){n.datapoints[n.currentRound];return new Promise(function(t){n.graphOpt.callback(),t(n)})}function updateRound(n){var t=n.datapoints[n.currentRound];return new Promise(function(e){n.currentRound+=1,t.updatePoint=!1,e(n)})}function animateGif(n){return new Promise(function(t){$("#functionMachine").css({"background-image":"url(../functionMachineAni.gif)"}),t(n)})}function stopAniGif(n){return new Promise(function(t){$("#functionMachine").css({"background-image":"url(../functionMachineStill.gif)"}),t(n)})}function miniAni(n){return new Promise(function(t){var e=n.datapoints[n.currentRound],a=e.y,i=$("<p>"+a+"</p>");$("body").append(i),i.css({position:"absolute",opacity:0,left:550,top:50}).animate({opacity:1,top:100},function(e){i.css({display:"none"}),t(n)})})}function aniPromiseChain(n,t){n.datapoints.forEach(function(n){n.updatePoint===!0&&(t=t.then(runAnimation("xToMachine",n.x)).then(animateGif).then(statusMessage("Calculating")).then(replaceXEqu).then(showEvaluateEqu).then(showYAns).then(showEquationAgain).then(stopAniGif).then(miniAni).then(runAnimation("machineToY",n.y)).then(placeYValue).then(runAnimation("yToStatusBar","("+n.x+","+n.y+")")).then(statusMessage("Plotting ("+n.x+","+n.y+")")).then(plotter).then(resetRound).then(statusMessage("")).then(showDefaultEqu)),t=t.then(updateRound)})}function noAniPromiseChain(n,t){n.datapoints.forEach(function(n){n.updatePoint===!0&&(t=t.then(placeYValue).then(plotter)),t=t.then(updateRound)})}function animatorControl(n){var t=$("#numContainer"),e=Promise.resolve(n);t.innerHTML="",n.graphOpt.animateHide?noAniPromiseChain(n,e):aniPromiseChain(n,e)}var statusBar=$("#status p"),lastSheet=document.styleSheets[document.styleSheets.length-1],equPara=$("#functionMachine #equ")[0],aniDuration=1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiLCJhamF4LmpzIiwiZXZlbnRzLmpzIiwiYW5pbWF0b3Jjb250cm9sLmpzIl0sIm5hbWVzIjpbInRkMSIsInRkMiIsInRyIiwiaW5wdXQiLCJ0Ym9keSIsIiQiLCJyb3dDb3VudCIsImoiLCJhdHRyIiwiYXBwZW5kIiwiZG9jdW1lbnQiLCJyZWFkeSIsInNob3dQcm9mT3B0aW9ucyIsImZpZWxkIiwib3B0IiwibmFtZSIsInZhbCIsImVxdWF0aW9uIiwicXVlcnlTdHJpbmciLCJsb2NhdGlvbiIsInNlYXJjaCIsInN1YnN0cmluZyIsInF1ZXJ5Iiwic3BsaXQiLCJnZXRKU09OIiwicmVzdWx0Iiwid2luZG93IiwicHJvZmVzc29yQ29uZmlnRmlsZSIsImVhY2giLCJpIiwiY2hhbmdlUGxvdCIsInN0YWlyU3RlcCIsIm9wdGlvbnMiLCJoaWdod2F5UGF0aCIsImxhc3RTaGVldCIsImluc2VydFJ1bGUiLCJzdGFydFRvcE9mZiIsInN0YXJ0TGVmdE9mZiIsImVuZFRvcE9mZiIsImVuZExlZnRPZmYiLCJjc3NSdWxlcyIsImxlbmd0aCIsIm1ha2VYVG9NYWNoaW5lIiwiaW5wdXRDb3JkcyIsImluZGV4IiwidG9wIiwibGVmdCIsIm1ha2VNYWNoaW5lVG9ZIiwicmlnaHQiLCJtYWtlWVRvU3RhdHVzQmFyIiwic3RhcnRGdW5jTWFjaCIsInhpbnB1dHMiLCJoaWRlQW5pbWF0aW9uQ2hlY2tlZCIsImhpZGVHcmFwaENoZWNrZWQiLCJncmFwaE9wdCIsImNhbGxiYWNrIiwiYW5pU2V0dGluZ3MiLCJQcm9taXNlIiwicmVzb2x2ZSIsImNvbnNvbGUiLCJsb2ciLCJhbmltYXRlSGlkZSIsImdyYXBoSGlkZSIsInByb2ZPcHQiLCJ2aWV3IiwiZGF0YXBvaW50cyIsImN1cnJlbnRSb3VuZCIsInh2YWwiLCJyb3VuZGl0IiwieHZhbHVlIiwidGhpcyIsInRvRml4ZWQiLCJyb3VuZGluZyIsIngiLCJtaW4iLCJtYXgiLCJyZXBsYWNlWCIsInJlcGxhY2UiLCJ5dmFsIiwibWF0aCIsImV2YWwiLCJwb2ludCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInkiLCJpZCIsImNoYW5nZUVxdSIsInVwZGF0ZVBvaW50IiwieE1lbW9yeSIsImVsZW1lbnQiLCJnZXQiLCJodG1sIiwicHVzaCIsImFuaW1hdG9yQ29udHJvbCIsImNoZWNrQ29uZmlnIiwiaXRlbSIsImNsZWFyVmFsdWVzIiwieWlucHV0cyIsInZhbHVlIiwiaW5uZXJIVE1MIiwiZXF1YXQiLCJlcXVQYXJhIiwieVBhcmEiLCJlbXB0eSIsImthdGV4IiwicmVuZGVyIiwiaW5wdXRzIiwicXVlcnlTZWxlY3RvckFsbCIsImlucHV0Q291bnQiLCJzdHlsZVNoZWV0cyIsImlucHV0Q29vciIsInJ1biIsIm9uaW5wdXQiLCJlIiwieElucHV0VmFsIiwic3JjRWxlbWVudCIsInByb3AiLCJjc3MiLCJjdXJzb3IiLCJjaGFuZ2UiLCJ0YXJnZXQiLCJrZXlwcmVzcyIsIndoaWNoIiwiY2xpY2siLCJydW5BbmltYXRpb24iLCJkYXRhcG9pbnQiLCJudW1QYXJhIiwiYW5pbWF0aW9uIiwiYW5pRHVyYXRpb24iLCJvbmUiLCJzdGF0dXNNZXNzYWdlIiwibWVzc2FnZSIsInN0YXR1c0JhciIsInJlcGxhY2VYRXF1Iiwic2hvd0V2YWx1YXRlRXF1IiwicG9pbnREYXRhIiwic2hvd1lBbnMiLCJzaG93RXF1YXRpb25BZ2FpbiIsInBsYWNlWVZhbHVlIiwicmVzZXRSb3VuZCIsInNob3dEZWZhdWx0RXF1IiwicGxvdHRlciIsInVwZGF0ZVJvdW5kIiwicGxhY2Vob2xkZXIiLCJhbmltYXRlR2lmIiwiYmFja2dyb3VuZC1pbWFnZSIsInN0b3BBbmlHaWYiLCJtaW5pQW5pIiwieXZhbHVlIiwicGFyYSIsInBvc2l0aW9uIiwib3BhY2l0eSIsImFuaW1hdGUiLCJkaXNwbGF5IiwiYW5pUHJvbWlzZUNoYWluIiwiZHBzIiwiY2hhaW4iLCJmb3JFYWNoIiwidGhlbiIsIm5vQW5pUHJvbWlzZUNoYWluIiwibnVtQ29udGFpbmVyIl0s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QUFhLGFBQWNDLEVBQVVuRCxJQUMxQ29GLEtBQUtkLFlBQ0xjLEtBQUs1QixjQUFjLGdCQUNuQjRCLEtBQUt6QixhQUNMeUIsS0FBS3hCLGlCQUNMd0IsS0FBS3RCLFVBQ0xzQixLQUFLckIsbUJBQ0xxQixLQUFLWixZQUNMWSxLQUFLWCxTQUNMVyxLQUFLbEMsYUFBYSxhQUFjQyxFQUFVekMsSUFDMUMwRSxLQUFLcEIsYUFDTG9CLEtBQUtsQyxhQUFhLGVBQWIsSUFBaUNDLEVBQVVuRCxFQUEzQyxJQUFnRG1ELEVBQVV6QyxFQUExRCxNQUNMMEUsS0FBSzVCLGNBQUEsYUFBMkJMLEVBQVVuRCxFQUFyQyxJQUEwQ21ELEVBQVV6QyxFQUFwRCxNQUNMMEUsS0FBS2pCLFNBQ0xpQixLQUFLbkIsWUFDTG1CLEtBQUs1QixjQUFBLEtBQ0w0QixLQUFLbEIsaUJBR2RnQixFQUFRQSxFQUFNRSxLQUFLaEIsZUFJM0IsUUFBU2lCLG1CQUFrQkosRUFBS0MsR0FDNUJELEVBQUl6RixXQUFXMkYsUUFBUSxTQUFVaEMsR0FDekJBLEVBQVV0QyxlQUFnQixJQUMxQnFFLEVBQVFBLEVBQ0hFLEtBQUtwQixhQUNMb0IsS0FBS2pCLFVBRWRlLEVBQVFBLEVBQU1FLEtBQUtoQixlQU8zQixRQUFTakQsaUJBQWdCOEQsR0FHckIsR0FBSUssR0FBZTFKLEVBQUUsaUJBQ2pCc0osRUFBUWxHLFFBQVFDLFFBQVFnRyxFQUU1QkssR0FBYTdELFVBQVksR0FFckJ3RCxFQUFJcEcsU0FBU08sWUFDYmlHLGtCQUFrQkosRUFBS0MsR0FFdkJGLGdCQUFnQkMsRUFBS0MsR0E3UzdCLEdBQUl4QixXQUFZOUgsRUFBRSxhQUNkNkIsVUFBWXhCLFNBQVNrRyxZQUFZbEcsU0FBU2tHLFlBQVluRSxPQUFTLEdBQy9EMkQsUUFBVS9GLEVBQUUseUJBQXlCLEdBQ3JDMEgsWUFBYyIsImZpbGUiOiJzY3JpcHRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uICgpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIC8qXG4gICAgTWFrZSB0aGUgd2hvbGUgdGFibGUgYW5kIGNlbGxzIGZvciB0aGUgaW5wdXQgYm94ZXMgYW5kIHVzZXIgaW50ZXJhY3Rpb24uXG4gICAgKi9cbiAgICB2YXIgdGJvZHkgPSAkKFwidGJvZHlcIiksXHJcbiAgICAgICAgdGQxLFxyXG4gICAgICAgIHRkMixcclxuICAgICAgICB0cixcclxuICAgICAgICBpbnB1dCxcclxuICAgICAgICByb3dDb3VudCA9IDE5O1xyXG5cclxuICAgIGZvciAodmFyIGogPSAxOyBqIDw9IHJvd0NvdW50OyBqKyspIHtcclxuICAgICAgICBpbnB1dCA9ICQoXCI8aW5wdXQ+XCIpO1xyXG4gICAgICAgIHRkMSA9ICQoXCI8dGQ+PC90ZD5cIik7XHJcbiAgICAgICAgdGQyID0gJChcIjx0ZD48L3RkPlwiKTtcclxuICAgICAgICB0ciA9ICQoXCI8dHI+PC90cj5cIik7XHJcblxyXG4gICAgICAgICQodHIpLmF0dHIoXCJpZFwiLCBgcm93JHtqfWApO1xyXG5cclxuICAgICAgICAkKGlucHV0KS5hdHRyKFwibmFtZVwiLCBgaW5wdXQke2p9YCkuYXR0cihcInR5cGVcIiwgXCJudW1iZXJcIik7XHJcblxyXG4gICAgICAgICQodGQyKS5hdHRyKFwiaWRcIiwgYHl2YWwke2p9YCk7XHJcblxyXG4gICAgICAgICQodGQxKS5hcHBlbmQoaW5wdXQpO1xyXG4gICAgICAgICQodHIpLmFwcGVuZCh0ZDEpLmFwcGVuZCh0ZDIpO1xyXG4gICAgICAgICQodGJvZHkpLmFwcGVuZCh0cik7XHJcbiAgICB9XHJcbn0oKSk7XHJcbiIsIiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAvKlxyXG4gICAgTG9hZCBRdWVyeSBzdWJzdHJpbmdcclxuICAgICovXHJcbiAgICB2YXIgcXVlcnlTdHJpbmcgPSBsb2NhdGlvbi5zZWFyY2guc3Vic3RyaW5nKDEpLFxyXG4gICAgICAgIHF1ZXJ5ID0gcXVlcnlTdHJpbmcuc3BsaXQoXCI9XCIpWzFdICsgXCIuanNvblwiO1xyXG5cbiAgICBmdW5jdGlvbiBzaG93UHJvZk9wdGlvbnMoZmllbGQpIHtcclxuICAgICAgICAvKlxyXG4gICAgICAgIEFwcGVuZCB0aGUgcHJvZmVzc29yJ3MgY2hvc2VuIGVxdWF0aW9ucyB0byB0aGUgYXBwbGljYXRpb25cclxuICAgICAgICAqL1xyXG5cclxuICAgICAgICB2YXIgb3B0ID0gJChcIjxvcHRpb24+PC9vcHRpb24+XCIpLmFwcGVuZChmaWVsZC5uYW1lKTtcclxuXHJcbiAgICAgICAgJChvcHQpLnZhbChmaWVsZC5lcXVhdGlvbik7XHJcblxyXG4gICAgICAgICQoXCJzZWxlY3RcIikuYXBwZW5kKG9wdCk7XHJcbiAgICB9XHJcblxyXG4gICAgLypcclxuICAgIExvYWQgdGhlIHByb2Zlc3NvciBjb25maWd1cmF0aW9uIGZpbGVcclxuICAgICovXHJcblxyXG4gICAgJC5nZXRKU09OKHF1ZXJ5LCBmdW5jdGlvbiAocmVzdWx0KSB7XHJcblxyXG4gICAgICAgIHdpbmRvdy5wcm9mZXNzb3JDb25maWdGaWxlID0gcmVzdWx0O1xyXG5cclxuICAgICAgICAkLmVhY2gocmVzdWx0LCBmdW5jdGlvbiAoaSwgZmllbGQpIHtcclxuXHJcbiAgICAgICAgICAgIHNob3dQcm9mT3B0aW9ucyhmaWVsZCk7XHJcblxyXG4gICAgICAgICAgICAvKlxyXG4gICAgICAgICAgICBEaXNwbGF5IHRoZSBkZWZhdWx0IGVxdWF0aW9uIHRvIHRoZSBmdW5jdGlvbiBtYWNoaW5lXHJcbiAgICAgICAgICAgICovXHJcblxyXG4gICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgY2hhbmdlUGxvdChmaWVsZC5lcXVhdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfSk7XHJcblxyXG59KTtcclxuIiwiICAgIHZhciB4TWVtb3J5ID0gW10sXHJcbiAgICAgICAgaW5wdXRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImlucHV0W3R5cGU9J251bWJlciddXCIpLFxyXG4gICAgICAgIGlucHV0Q291bnQgPSBpbnB1dHMubGVuZ3RoLFxyXG4gICAgICAgIGxhc3RTaGVldCA9IGRvY3VtZW50LnN0eWxlU2hlZXRzW2RvY3VtZW50LnN0eWxlU2hlZXRzLmxlbmd0aCAtIDFdO1xyXG5cclxuICAgIC8qXHJcbiAgICBBbmltYXRpb24gcGF0aCBmb3IgdGhlIHN0YWlyc3RlcFxyXG4gICAgKi9cclxuICAgIGZ1bmN0aW9uIHN0YWlyU3RlcChvcHRpb25zKSB7XHJcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICAgICAgdmFyIGhpZ2h3YXlQYXRoID0gMjQ2LjU7XHJcbiAgICAgICAgbGFzdFNoZWV0Lmluc2VydFJ1bGUoYEBrZXlmcmFtZXMgJHtvcHRpb25zLm5hbWV9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogJHtvcHRpb25zLnN0YXJ0VG9wT2ZmfXB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6ICR7b3B0aW9ucy5zdGFydExlZnRPZmZ9cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMCUge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAzMyUge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogJHtvcHRpb25zLnN0YXJ0VG9wT2ZmfXB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6ICR7aGlnaHdheVBhdGh9cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA2NiUge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogJHtvcHRpb25zLmVuZFRvcE9mZn1weDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAke2hpZ2h3YXlQYXRofXB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOTAlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMTAwJSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6ICR7b3B0aW9ucy5lbmRUb3BPZmZ9cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogJHtvcHRpb25zLmVuZExlZnRPZmZ9cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1gLCBsYXN0U2hlZXQuY3NzUnVsZXMubGVuZ3RoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKlxyXG4gICAgQSBzZXQgb2YgZnVuY3Rpb25zIHVzaW5nIHRoZSBzdGFpcnN0ZXAgYW5pbWF0aW9uIHRlbXBsYXRlXHJcbiAgICB0byBjcmVhdGUgcGF0aHdheXMgd2l0aCBjb29yZGluYXRlIGRhdGFcclxuICAgICovXHJcbiAgICBmdW5jdGlvbiBtYWtlWFRvTWFjaGluZShpbnB1dENvcmRzLCBpbmRleCkge1xyXG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgICAgIHN0YWlyU3RlcCh7XHJcbiAgICAgICAgICAgIHN0YXJ0VG9wT2ZmOiBpbnB1dENvcmRzLnRvcCArIDUsXHJcbiAgICAgICAgICAgIHN0YXJ0TGVmdE9mZjogaW5wdXRDb3Jkcy5sZWZ0ICsgMzAsXHJcbiAgICAgICAgICAgIGVuZFRvcE9mZjogNTUsXHJcbiAgICAgICAgICAgIGVuZExlZnRPZmY6IDMwMCxcclxuICAgICAgICAgICAgbmFtZTogYHhUb01hY2hpbmUke2luZGV4fWBcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtYWtlTWFjaGluZVRvWShpbnB1dENvcmRzLCBpbmRleCkge1xyXG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgICAgIHN0YWlyU3RlcCh7XHJcbiAgICAgICAgICAgIHN0YXJ0VG9wT2ZmOiAxMDAsXHJcbiAgICAgICAgICAgIHN0YXJ0TGVmdE9mZjogNTMwLFxyXG4gICAgICAgICAgICBlbmRUb3BPZmY6IGlucHV0Q29yZHMudG9wICsgNSxcclxuICAgICAgICAgICAgZW5kTGVmdE9mZjogaW5wdXRDb3Jkcy5yaWdodCArIDUsXHJcbiAgICAgICAgICAgIG5hbWU6IGBtYWNoaW5lVG9ZJHtpbmRleH1gXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbWFrZVlUb1N0YXR1c0JhcihpbnB1dENvcmRzLCBpbmRleCkge1xyXG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgICAgIHN0YWlyU3RlcCh7XHJcbiAgICAgICAgICAgIHN0YXJ0VG9wT2ZmOiBpbnB1dENvcmRzLnRvcCArIDUsXHJcbiAgICAgICAgICAgIHN0YXJ0TGVmdE9mZjogaW5wdXRDb3Jkcy5yaWdodCArIDEwLFxyXG4gICAgICAgICAgICBlbmRUb3BPZmY6IDE1MCxcclxuICAgICAgICAgICAgZW5kTGVmdE9mZjogMzAwLFxyXG4gICAgICAgICAgICBuYW1lOiBgeVRvU3RhdHVzQmFyJHtpbmRleH1gXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLypcclxuICAgIFNldCB1cCB0aGUgeE1lbW9yeSBhcnJheSBhbmQgdGhlIGFuaW1hdGlvbiBwYXRocyBmb3IgZWFjaCBpbnB1dCBib3guXHJcblxyXG4gICAgTk9URTogU2V0dGluZyB1cCB0aGUgeE1lbW9yeSBhcnJheSBhbHNvIG1ha2VzIGl0IHNvIHRoYXQgbm8gYW5pbWF0aW9uc1xyXG4gICAgICAgICAgYXJlIHJlcGVhdGVkIGJ5IG11bHRpcGxlIGNsaWNrcyBvbiB0aGUgXCJHbyFcIiBidXR0b24uXHJcbiAgICAqL1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbnB1dENvdW50OyBpKyspIHtcclxuICAgICAgICB4TWVtb3J5W2ldID0gbnVsbDtcclxuXHJcbiAgICAgICAgdmFyIGlucHV0Q29vciA9IGlucHV0c1tpXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHJcbiAgICAgICAgbWFrZVhUb01hY2hpbmUoaW5wdXRDb29yLCBpKTtcclxuICAgICAgICBtYWtlTWFjaGluZVRvWShpbnB1dENvb3IsIGkpO1xyXG4gICAgICAgIG1ha2VZVG9TdGF0dXNCYXIoaW5wdXRDb29yLCBpKTtcclxuICAgICAgICAkKFwiI251bUNvbnRhaW5lclwiKS5hcHBlbmQoJChgPHA+PC9wPmApKTtcclxuICAgIH1cclxuXHJcbiAgICAvKlxyXG4gICAgU2V0IGFsbCB0aGUgZGF0YSB0byBhbiBhcnJheSBvZiBvYmplY3RzIHRvIGJlIGl0ZXJhdGVkXHJcbiAgICBvdmVyIGJ5IHRoZSBwcm9taXNlIGNoYWluIGluIGFuaW1hdG9yY29udHJvbC5qc1xyXG4gICAgKi9cclxuICAgIGZ1bmN0aW9uIHN0YXJ0RnVuY01hY2goKSB7XHJcblxyXG4gICAgICAgIHZhciB4aW5wdXRzID0gJChcImlucHV0W3R5cGU9J251bWJlciddXCIpLFxyXG4gICAgICAgICAgICBoaWRlQW5pbWF0aW9uQ2hlY2tlZCA9ICQoXCIjYW5pbWF0ZTpjaGVja2VkXCIpLmxlbmd0aCA+IDAsXHJcbiAgICAgICAgICAgIGhpZGVHcmFwaENoZWNrZWQgPSAkKFwiI3Nob3dHcmFwaDpjaGVja2VkXCIpLmxlbmd0aCA+IDAsXHJcbiAgICAgICAgICAgIGdyYXBoT3B0ID0ge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uIChhbmlTZXR0aW5ncykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImZpbmlzaGVkIHBsb3R0aW5nIGRhdGFwb2ludCFcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoYW5pU2V0dGluZ3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGFuaW1hdGVIaWRlOiBoaWRlQW5pbWF0aW9uQ2hlY2tlZCxcclxuICAgICAgICAgICAgICAgIGdyYXBoSGlkZTogaGlkZUdyYXBoQ2hlY2tlZCxcclxuICAgICAgICAgICAgICAgIGVxdWF0aW9uOiBwcm9mT3B0LmVxdWF0aW9uLFxyXG4gICAgICAgICAgICAgICAgdmlldzogcHJvZk9wdC52aWV3XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGFuaVNldHRpbmdzID0ge1xyXG4gICAgICAgICAgICAgICAgZGF0YXBvaW50czogW10sXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50Um91bmQ6IDAsXHJcbiAgICAgICAgICAgICAgICBncmFwaE9wdDogZ3JhcGhPcHRcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgeGlucHV0cy5lYWNoKGZ1bmN0aW9uIChpKSB7XHJcbiAgICAgICAgICAgIHZhciB4dmFsdWUgPSAkKHRoaXMpLnZhbCgpLFxyXG4gICAgICAgICAgICAgICAgeHZhbCxcclxuICAgICAgICAgICAgICAgIHJvdW5kaXQ7XHJcblxyXG4gICAgICAgICAgICBpZiAoeHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB4dmFsID0gK3h2YWx1ZTtcclxuICAgICAgICAgICAgICAgIHJvdW5kaXQgPSB4dmFsLnRvRml4ZWQocHJvZk9wdC5yb3VuZGluZyk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICQodGhpcykudmFsKHJvdW5kaXQpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZiAocHJvZk9wdC52aWV3LngubWluIDw9IHJvdW5kaXQgJiYgcm91bmRpdCA8PSBwcm9mT3B0LnZpZXcueC5tYXgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcGxhY2VYID0gZ3JhcGhPcHQuZXF1YXRpb24ucmVwbGFjZShcInhcIiwgYCgke3JvdW5kaXR9KWApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB5dmFsID0gbWF0aC5ldmFsKHJlcGxhY2VYKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRDb29yID0gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiByb3VuZGl0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogeXZhbC50b0ZpeGVkKHByb2ZPcHQucm91bmRpbmcpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VFcXU6IHByb2ZPcHQuZXF1YXRpb24ucmVwbGFjZShcInhcIiwgYCgke3JvdW5kaXR9KWApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlUG9pbnQ6IHhNZW1vcnlbaV0gIT09IHJvdW5kaXQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiAkKFwiI251bUNvbnRhaW5lciBwXCIpLmdldChpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvKlxyXG4gICAgICAgICAgICAgICAgICAgIENsZWFyIG91dCB0aGUgWXMgd2hlbiB0aGV5IGRvbid0IGVxdWFsIGVhY2ggb3RoZXIgYW5kIG5lZWQgdG8gYmUgdXBkYXRlZFxyXG4gICAgICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvaW50LnVwZGF0ZVBvaW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoYHRkI3l2YWwke2kgKyAxfWApLmh0bWwoXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvKlVwZGF0ZSB0aGUgeG1lbW9yeSovXHJcbiAgICAgICAgICAgICAgICAgICAgeE1lbW9yeVtpXSA9IHJvdW5kaXQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGFuaVNldHRpbmdzLmRhdGFwb2ludHMucHVzaChwb2ludCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGFuaW1hdG9yQ29udHJvbChhbmlTZXR0aW5ncyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9GdW5jdGlvbiB0byBzZWxlY3QgdGhlIGNob3NlbiBlcXVhdGlvbiB3aXRoIGl0cyBuYW1lIGFuZCBncmFwaCB3aW5kb3cgYm91bmRhcmllcy5cclxuICAgIGZ1bmN0aW9uIGNoZWNrQ29uZmlnKHZhbCkge1xyXG4gICAgICAgIHZhciBwcm9mT3B0O1xyXG4gICAgICAgICQuZWFjaChwcm9mZXNzb3JDb25maWdGaWxlLCBmdW5jdGlvbiAoaSwgaXRlbSkge1xyXG4gICAgICAgICAgICBpZiAoaXRlbS5lcXVhdGlvbiA9PT0gdmFsKSB7XHJcbiAgICAgICAgICAgICAgICBwcm9mT3B0ID0gaXRlbTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgcmV0dXJuIHByb2ZPcHQ7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY2xlYXJWYWx1ZXMoKSB7XHJcbiAgICAgICAgdmFyIHhpbnB1dHMgPSAkKFwiaW5wdXRbdHlwZT0nbnVtYmVyJ11cIiksXHJcbiAgICAgICAgICAgIHlpbnB1dHMgPSAkKGB0ciB0ZDpudGgtb2YtdHlwZSgyKWApO1xyXG5cclxuICAgICAgICB4aW5wdXRzLmVhY2goZnVuY3Rpb24gKGksIGl0ZW0pIHtcclxuICAgICAgICAgICAgaXRlbS52YWx1ZSA9IFwiXCI7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHlpbnB1dHMuZWFjaChmdW5jdGlvbiAoaSwgaXRlbSkge1xyXG4gICAgICAgICAgICBpdGVtLmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9EaXBzbGF5IEthdGV4IGVxdWF0aW9uXHJcbiAgICBmdW5jdGlvbiBjaGFuZ2VQbG90KHZhbCkge1xyXG5cclxuICAgICAgICB4TWVtb3J5ID0gW107XHJcblxyXG4gICAgICAgIGNsZWFyVmFsdWVzKCk7XHJcblxyXG4gICAgICAgIHdpbmRvdy5wcm9mT3B0ID0gY2hlY2tDb25maWcodmFsKTtcclxuXHJcbiAgICAgICAgdmFyIHkgPSBgeSA9IGAsXHJcbiAgICAgICAgICAgIGVxdWF0ID0gYCR7dmFsfWAsXHJcbiAgICAgICAgICAgIGVxdVBhcmEgPSAkKFwiI2Z1bmN0aW9uTWFjaGluZSAjZXF1XCIpWzBdLFxyXG4gICAgICAgICAgICB5UGFyYSA9ICQoXCIjZnVuY3Rpb25NYWNoaW5lICN5XCIpO1xyXG5cclxuICAgICAgICAkKGVxdVBhcmEpLmVtcHR5KFwiXCIpO1xyXG5cclxuICAgICAgICBrYXRleC5yZW5kZXIoeSwgeVBhcmFbMF0pO1xyXG4gICAgICAgIGthdGV4LnJlbmRlcihlcXVhdCwgZXF1UGFyYSk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGlucHV0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFt0eXBlPSdudW1iZXInXVwiKSxcclxuICAgICAgICBydW4gPSB0cnVlO1xyXG5cclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5wdXRzLmxlbmd0aDsgaSsrKSB7XHJcblxyXG4gICAgICAgIGlucHV0c1tpXS5vbmlucHV0ID0gZnVuY3Rpb24gKGUpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciB4SW5wdXRWYWwgPSBlLnNyY0VsZW1lbnQudmFsdWU7XHJcbiAgICAgICAgICAgIGlmIChwcm9mT3B0LnZpZXcueC5taW4gPD0geElucHV0VmFsICYmIHhJbnB1dFZhbCA8PSBwcm9mT3B0LnZpZXcueC5tYXgpIHtcclxuICAgICAgICAgICAgICAgIHJ1biA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAkKFwiaW5wdXRbdHlwZT0nYnV0dG9uJ11bdmFsdWU9J0dvISddXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLnByb3AoXCJkaXNhYmxlZFwiLCBmYWxzZSlcclxuICAgICAgICAgICAgICAgICAgICAuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjdXJzb3JcIjogXCJwb2ludGVyXCJcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICQoXCIjc3RhdHVzIHBcIikuaHRtbChgYCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBydW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICQoXCJpbnB1dFt0eXBlPSdidXR0b24nXVt2YWx1ZT0nR28hJ11cIilcclxuICAgICAgICAgICAgICAgICAgICAucHJvcChcImRpc2FibGVkXCIsIHRydWUpXHJcbiAgICAgICAgICAgICAgICAgICAgLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY3Vyc29yXCI6IFwibm90LWFsbG93ZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgJChcIiNzdGF0dXMgcFwiKS5odG1sKGA8cD4ke3hJbnB1dFZhbH0geC12YWx1ZSBvdXQgb2YgZG9tYWlucy48L3A+YCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLypcclxuICAgIE9uY2hhbmdlIGV2ZW50IGhhbmRsZXIgZm9yIHRoZSBzZWxlY3QgaHRtbCBlbGVtZW50LlxyXG4gICAgKi9cclxuICAgICQoXCJzZWxlY3RcIikuY2hhbmdlKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgY2hhbmdlUGxvdChlLnRhcmdldC52YWx1ZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKlxyXG4gICAgRE9DVU1FTlQga2V5ZG93biBldmVudCBoYW5kbGVyXHJcbiAgICAqL1xyXG4gICAgJChkb2N1bWVudCkua2V5cHJlc3MoZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBpZiAoZS53aGljaCA9PSAxMyAmJiBydW4pIHtcclxuICAgICAgICAgICAgc3RhcnRGdW5jTWFjaCgpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8qXHJcbiAgICBHTyEgQ2xpY2sgZXZlbnQgaGFuZGxlclxyXG4gICAgKi9cclxuICAgICQoXCJpbnB1dFt0eXBlPSdidXR0b24nXVt2YWx1ZT0nR28hJ11cIikuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHN0YXJ0RnVuY01hY2goKTtcclxuICAgIH0pO1xyXG4iLCJ2YXIgc3RhdHVzQmFyID0gJChcIiNzdGF0dXMgcFwiKSxcclxuICAgIGxhc3RTaGVldCA9IGRvY3VtZW50LnN0eWxlU2hlZXRzW2RvY3VtZW50LnN0eWxlU2hlZXRzLmxlbmd0aCAtIDFdLFxyXG4gICAgZXF1UGFyYSA9ICQoXCIjZnVuY3Rpb25NYWNoaW5lICNlcXVcIilbMF0sXHJcbiAgICBhbmlEdXJhdGlvbiA9IDE7XHJcblxyXG5mdW5jdGlvbiBydW5BbmltYXRpb24obmFtZSwgdmFsdWUpIHtcclxuICAgIC8qXHJcbiAgICBUaGlzIGlzIGEgZnVuY3Rpb24gZmFjdG9yeSB3aGljaCB3aWxsIGdyYWIgdGhlXHJcbiAgICBuZWNlc3NhcnkgZGF0YSBhbmQgdGhlbiByZXR1cm4gdGhlIGZ1bmN0aW9uIHByb21pc2VcclxuICAgICovXHJcbiAgICByZXR1cm4gZnVuY3Rpb24gYW5pbWF0aW9uKGFuaVNldHRpbmdzKSB7XHJcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICAgICAgdmFyIGRhdGFwb2ludCA9IGFuaVNldHRpbmdzLmRhdGFwb2ludHNbYW5pU2V0dGluZ3MuY3VycmVudFJvdW5kXSxcclxuICAgICAgICAgICAgbnVtUGFyYSA9IGRhdGFwb2ludC5lbGVtZW50O1xyXG5cclxuICAgICAgICAvKlxyXG4gICAgICAgIE1ha2UgdGhlIHByb21pc2UgdGhhdCB3aGVuIHRoZSBkeW5hbWljXHJcbiAgICAgICAgYW5pbWF0aW9uIHBhdGggaXMgZG9uZSB0aGVuIHRoaXMgcHJvbWlzZSBpcyBmaW5pc2hlZFxyXG4gICAgICAgICovXHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XHJcbiAgICAgICAgICAgICQobnVtUGFyYSlcclxuICAgICAgICAgICAgICAgIC5odG1sKHZhbHVlKVxyXG4gICAgICAgICAgICAgICAgLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJhbmltYXRpb25cIjogYCR7bmFtZX0ke2FuaVNldHRpbmdzLmN1cnJlbnRSb3VuZH0gJHthbmlEdXJhdGlvbn1zIGVhc2UtaW4tb3V0YCxcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAub25lKCdhbmltYXRpb25lbmQnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoYW5pU2V0dGluZ3MpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gc3RhdHVzTWVzc2FnZShtZXNzYWdlKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIC8qXHJcbiAgICBUaGlzIGlzIGEgZnVuY3Rpb24gZmFjdG9yeSB3aGljaCB3aWxsIGdyYWIgdGhlXHJcbiAgICBuZWNlc3NhcnkgZGF0YSBhbmQgdGhlbiByZXR1cm4gdGhlIGZ1bmN0aW9uIHByb21pc2VcclxuICAgICovXHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFuaVNldHRpbmdzKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XHJcbiAgICAgICAgICAgIHN0YXR1c0Jhci5odG1sKGA8cD4ke21lc3NhZ2V9PC9wPmApO1xyXG4gICAgICAgICAgICByZXNvbHZlKGFuaVNldHRpbmdzKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXBsYWNlWEVxdShhbmlTZXR0aW5ncykge1xuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIC8qXHJcbiAgICBSZXBsYWNlIHRoZSB4IGluIHRoZSBkaXNhcHBlYXJlZCBlcXVhdGlvbiB3aXRob3V0IGhhdmluZyB0aGUgeSBkaXNhcHBlYXIuXHJcbiAgICAqL1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XHJcbiAgICAgICAgJChlcXVQYXJhKVxyXG4gICAgICAgICAgICAuY3NzKFwiYW5pbWF0aW9uXCIsIGB0ZXh0RGlzYXBwZWFyICR7YW5pRHVyYXRpb259cyBlYXNlLWluLW91dGApXHJcbiAgICAgICAgICAgIC5vbmUoXCJhbmltYXRpb25lbmRcIiwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICQoZXF1UGFyYSkuY3NzKFwib3BhY2l0eVwiLCAwKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoYW5pU2V0dGluZ3MpO1xuICAgICAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2hvd0V2YWx1YXRlRXF1KGFuaVNldHRpbmdzKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICAvKlxyXG4gICAgR2V0IHRoZSB5IGFuc3dlciBhbmQgdGhlIHgtY2hhbmdlZCBlcXVhdGlvblxyXG4gICAgKi9cclxuICAgIHZhciBwb2ludERhdGEgPSBhbmlTZXR0aW5ncy5kYXRhcG9pbnRzW2FuaVNldHRpbmdzLmN1cnJlbnRSb3VuZF0sXHJcbiAgICAgICAgY2hhbmdlRXF1ID0gcG9pbnREYXRhLmNoYW5nZUVxdTtcclxuXHJcbiAgICAvKlxyXG4gICAgU2hvdyB0aGUgbmV3IGVxdWF0aW9uIHdpdGggdGhlIHJlcGxhY2VkIHgtdmFsdWUgZXF1YXRpb25cclxuICAgICovXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcclxuICAgICAgICBrYXRleC5yZW5kZXIoYCR7Y2hhbmdlRXF1fWAsIGVxdVBhcmEpO1xyXG5cclxuICAgICAgICAkKGVxdVBhcmEpXHJcbiAgICAgICAgICAgIC5jc3MoXCJhbmltYXRpb25cIiwgYHRleHRBcHBlYXIgJHthbmlEdXJhdGlvbn1zIGVhc2UtaW4tb3V0YClcclxuICAgICAgICAgICAgLm9uZShcImFuaW1hdGlvbmVuZFwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgJChlcXVQYXJhKS5jc3MoXCJvcGFjaXR5XCIsIDEpO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShhbmlTZXR0aW5ncyk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2hvd1lBbnMoYW5pU2V0dGluZ3MpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIC8qXHJcbiAgICBBbmltYXRlIHRoZSBuZXcgeSB2YWx1ZSB0byB0aGUgY29vcmRpbmF0ZWQgeSBjb2x1bW4gYW5kIG9uY2VcclxuICAgIGFuaW1hdGlvbiBpcyBkb25lIHRoZW4gcmV0dXJuIHRoZSBwcm9taXNlXHJcbiAgICAqL1xyXG4gICAgdmFyIHBvaW50RGF0YSA9IGFuaVNldHRpbmdzLmRhdGFwb2ludHNbYW5pU2V0dGluZ3MuY3VycmVudFJvdW5kXTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcclxuICAgICAgICAkKGVxdVBhcmEpXHJcbiAgICAgICAgICAgIC5jc3MoXCJhbmltYXRpb25cIiwgYHRleHREaXNhcHBlYXIgJHthbmlEdXJhdGlvbn1zIGVhc2UtaW4tb3V0YClcclxuICAgICAgICAgICAgLm9uZShcImFuaW1hdGlvbmVuZFwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkKGVxdVBhcmEpLmNzcyhcIm9wYWNpdHlcIiwgMCk7XHJcbiAgICAgICAgICAgICAgICBrYXRleC5yZW5kZXIoYCR7cG9pbnREYXRhLnl9YCwgZXF1UGFyYSk7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKGFuaVNldHRpbmdzKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2hvd0VxdWF0aW9uQWdhaW4oYW5pU2V0dGluZ3MpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xyXG4gICAgICAgICQoZXF1UGFyYSlcclxuICAgICAgICAgICAgLmNzcyhcImFuaW1hdGlvblwiLCBgdGV4dEFwcGVhciAke2FuaUR1cmF0aW9ufXMgZWFzZS1pbi1vdXRgKVxyXG4gICAgICAgICAgICAub25lKFwiYW5pbWF0aW9uZW5kXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAkKGVxdVBhcmEpLmNzcyhcIm9wYWNpdHlcIiwgMSk7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKGFuaVNldHRpbmdzKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gcGxhY2VZVmFsdWUoYW5pU2V0dGluZ3MpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgdmFyIHBvaW50RGF0YSA9IGFuaVNldHRpbmdzLmRhdGFwb2ludHNbYW5pU2V0dGluZ3MuY3VycmVudFJvdW5kXTtcclxuXHJcbiAgICAvKlxyXG4gICAgT25jZSB0aGUgeS12YWx1ZSBhcHBlYXJzIGluIHRoZSBjb3JyZWN0IHktY29sdW1uIHRoZW4gZnVsZmlsbCB0aGUgcHJvbWlzZS5cclxuICAgICovXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcclxuICAgICAgICB2YXIgaW5wdXQgPSAkKGB0ZCN5dmFsJHtwb2ludERhdGEuaWQgKyAxfWApWzBdO1xyXG4gICAgICAgICQoaW5wdXQpLmh0bWwoXCJcIik7XHJcbiAgICAgICAgJChpbnB1dCkuYXBwZW5kKGA8cD4ke3BvaW50RGF0YS55fTwvcD5gKTtcclxuICAgICAgICByZXNvbHZlKGFuaVNldHRpbmdzKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXNldFJvdW5kKGFuaVNldHRpbmdzKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICAvKlxyXG4gICAgR2V0IHRoZSBjdXJyZW50IHJvdW5kIGFuZCBjdXJyZW50IGRhdGEgcG9pbnRzXHJcbiAgICAqL1xyXG4gICAgdmFyIHBvaW50RGF0YSA9IGFuaVNldHRpbmdzLmRhdGFwb2ludHNbYW5pU2V0dGluZ3MuY3VycmVudFJvdW5kXTtcclxuXHJcbiAgICAvKlxyXG4gICAgT25jZSB0aGUgZXF1YXRpb24gaXMgY2xlYXJlZCBhbmQgcmVzZXQgdG8gdGhlIGRlZmF1bHQgZXF1YXRpb25cclxuICAgIHRoZW4gZnVsZmlsbCB0aGUgcHJvbWlzZVxyXG4gICAgKi9cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xyXG4gICAgICAgICQoZXF1UGFyYSlcclxuICAgICAgICAgICAgLmNzcyhcImFuaW1hdGlvblwiLCBgdGV4dERpc2FwcGVhciAke2FuaUR1cmF0aW9ufXMgZWFzZS1pbi1vdXRgKVxyXG4gICAgICAgICAgICAub25lKFwiYW5pbWF0aW9uZW5kXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAkKGVxdVBhcmEpLmNzcyhcIm9wYWNpdHlcIiwgMCk7XHJcbiAgICAgICAgICAgICAgICBrYXRleC5yZW5kZXIoYCR7cHJvZk9wdC5lcXVhdGlvbn1gLCBlcXVQYXJhKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoYW5pU2V0dGluZ3MpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzaG93RGVmYXVsdEVxdShhbmlTZXR0aW5ncykge1xyXG4gICAgLypcclxuICAgIFJldHVybiB0byBkZWZhdWx0IGJlZ2lubmluZyBlcXVhdGlvbiBmb3IgdGhlIG5leHQgYW5pbWF0aW9uIG9yIGZvciB0aGUgZW5kXHJcbiAgICAqL1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XHJcbiAgICAgICAgJChlcXVQYXJhKVxyXG4gICAgICAgICAgICAuY3NzKFwiYW5pbWF0aW9uXCIsIGB0ZXh0QXBwZWFyICR7YW5pRHVyYXRpb259cyBlYXNlLWluLW91dGApXHJcbiAgICAgICAgICAgIC5vbmUoXCJhbmltYXRpb25lbmRcIiwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICQoZXF1UGFyYSkuY3NzKFwib3BhY2l0eVwiLCAxKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoYW5pU2V0dGluZ3MpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcblxyXG4vKlxyXG5BY2NlcHQgdGhlIGRhdGFwb2ludCBhbmQgaXRzIGl0ZXJhdG9yIGFuZCBwbG90IHRoYXQgcG9pbnQgYmVpbmcgcGFzc2VkIHRocm91Z2hcclxuKi9cclxuZnVuY3Rpb24gcGxvdHRlcihhbmlTZXR0aW5ncykge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICB2YXIgcG9pbnREYXRhID0gYW5pU2V0dGluZ3MuZGF0YXBvaW50c1thbmlTZXR0aW5ncy5jdXJyZW50Um91bmRdO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xyXG4gICAgICAgIGFuaVNldHRpbmdzLmdyYXBoT3B0LmNhbGxiYWNrKCk7XHJcbiAgICAgICAgcmVzb2x2ZShhbmlTZXR0aW5ncyk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlUm91bmQoYW5pU2V0dGluZ3MpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHZhciBwbGFjZWhvbGRlciA9IGFuaVNldHRpbmdzLmRhdGFwb2ludHNbYW5pU2V0dGluZ3MuY3VycmVudFJvdW5kXTtcclxuXHJcbiAgICAvKlxyXG4gICAgVGhpcyBmdW5jdGlvbiBhY3RzIGFzIGFuIGl0ZXJhdG9yIHNvIHRoYXQgdGhlIHByb21pc2UgY2hhaW4ga25vd3Mgd2hpY2hcclxuICAgIGRhdGFwb2ludCB0byBoYW5kbGUgYW5kIHRvIGFuaW1hdGVcclxuICAgICovXHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XHJcbiAgICAgICAgYW5pU2V0dGluZ3MuY3VycmVudFJvdW5kICs9IDE7XHJcbiAgICAgICAgcGxhY2Vob2xkZXIudXBkYXRlUG9pbnQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgcmVzb2x2ZShhbmlTZXR0aW5ncyk7XHJcbiAgICB9KTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIGFuaW1hdGVHaWYoYW5pU2V0dGluZ3MpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xyXG4gICAgICAgICQoXCIjZnVuY3Rpb25NYWNoaW5lXCIpLmNzcyh7XHJcbiAgICAgICAgICAgIFwiYmFja2dyb3VuZC1pbWFnZVwiOiBcInVybCguLi9mdW5jdGlvbk1hY2hpbmVBbmkuZ2lmKVwiXHJcbiAgICAgICAgfSlcclxuICAgICAgICByZXNvbHZlKGFuaVNldHRpbmdzKVxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHN0b3BBbmlHaWYoYW5pU2V0dGluZ3MpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xyXG4gICAgICAgICQoXCIjZnVuY3Rpb25NYWNoaW5lXCIpLmNzcyh7XHJcbiAgICAgICAgICAgIFwiYmFja2dyb3VuZC1pbWFnZVwiOiBcInVybCguLi9mdW5jdGlvbk1hY2hpbmVTdGlsbC5naWYpXCJcclxuICAgICAgICB9KVxyXG4gICAgICAgIHJlc29sdmUoYW5pU2V0dGluZ3MpXHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gbWluaUFuaShhbmlTZXR0aW5ncykge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XHJcblxyXG4gICAgICAgIHZhciBwbGFjZWhvbGRlciA9IGFuaVNldHRpbmdzLmRhdGFwb2ludHNbYW5pU2V0dGluZ3MuY3VycmVudFJvdW5kXSxcclxuICAgICAgICAgICAgeXZhbHVlID0gcGxhY2Vob2xkZXIueSxcclxuICAgICAgICAgICAgcGFyYSA9ICQoYDxwPiR7eXZhbHVlfTwvcD5gKTtcclxuXHJcbiAgICAgICAgJChcImJvZHlcIikuYXBwZW5kKHBhcmEpO1xyXG5cclxuICAgICAgICBwYXJhXHJcbiAgICAgICAgICAgIC5jc3Moe1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcclxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAsXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiA1NTAsXHJcbiAgICAgICAgICAgICAgICB0b3A6IDUwXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsXHJcbiAgICAgICAgICAgICAgICB0b3A6IDEwMFxyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgcGFyYS5jc3Moe1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IFwibm9uZVwiXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoYW5pU2V0dGluZ3MpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gYW5pUHJvbWlzZUNoYWluKGRwcywgY2hhaW4pIHtcclxuICAgIGRwcy5kYXRhcG9pbnRzLmZvckVhY2goZnVuY3Rpb24gKGRhdGFwb2ludCkge1xyXG4gICAgICAgIGlmIChkYXRhcG9pbnQudXBkYXRlUG9pbnQgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgY2hhaW4gPSBjaGFpblxyXG4gICAgICAgICAgICAgICAgLnRoZW4ocnVuQW5pbWF0aW9uKFwieFRvTWFjaGluZVwiLCBkYXRhcG9pbnQueCkpXHJcbiAgICAgICAgICAgICAgICAudGhlbihhbmltYXRlR2lmKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oc3RhdHVzTWVzc2FnZShcIkNhbGN1bGF0aW5nXCIpKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4ocmVwbGFjZVhFcXUpXHJcbiAgICAgICAgICAgICAgICAudGhlbihzaG93RXZhbHVhdGVFcXUpXHJcbiAgICAgICAgICAgICAgICAudGhlbihzaG93WUFucylcclxuICAgICAgICAgICAgICAgIC50aGVuKHNob3dFcXVhdGlvbkFnYWluKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oc3RvcEFuaUdpZilcclxuICAgICAgICAgICAgICAgIC50aGVuKG1pbmlBbmkpXHJcbiAgICAgICAgICAgICAgICAudGhlbihydW5BbmltYXRpb24oXCJtYWNoaW5lVG9ZXCIsIGRhdGFwb2ludC55KSlcclxuICAgICAgICAgICAgICAgIC50aGVuKHBsYWNlWVZhbHVlKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4ocnVuQW5pbWF0aW9uKFwieVRvU3RhdHVzQmFyXCIsIGAoJHtkYXRhcG9pbnQueH0sJHtkYXRhcG9pbnQueX0pYCkpXHJcbiAgICAgICAgICAgICAgICAudGhlbihzdGF0dXNNZXNzYWdlKGBQbG90dGluZyAoJHtkYXRhcG9pbnQueH0sJHtkYXRhcG9pbnQueX0pYCkpXHJcbiAgICAgICAgICAgICAgICAudGhlbihwbG90dGVyKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4ocmVzZXRSb3VuZClcclxuICAgICAgICAgICAgICAgIC50aGVuKHN0YXR1c01lc3NhZ2UoYGApKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oc2hvd0RlZmF1bHRFcXUpO1xyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgY2hhaW4gPSBjaGFpbi50aGVuKHVwZGF0ZVJvdW5kKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBub0FuaVByb21pc2VDaGFpbihkcHMsIGNoYWluKSB7XHJcbiAgICBkcHMuZGF0YXBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uIChkYXRhcG9pbnQpIHtcclxuICAgICAgICBpZiAoZGF0YXBvaW50LnVwZGF0ZVBvaW50ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIGNoYWluID0gY2hhaW5cclxuICAgICAgICAgICAgICAgIC50aGVuKHBsYWNlWVZhbHVlKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4ocGxvdHRlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNoYWluID0gY2hhaW4udGhlbih1cGRhdGVSb3VuZCk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuLypcclxuSGFuZGxlIGFsbCBDU1MgYW5pbWF0aW9ucyBieSBjcmVhdGluZyBhIFByb21pc2UgY2hhaW4gdGhyb3VnaCBhIGZvciBsb29wLlxyXG4qL1xyXG5mdW5jdGlvbiBhbmltYXRvckNvbnRyb2woZHBzKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICB2YXIgbnVtQ29udGFpbmVyID0gJChcIiNudW1Db250YWluZXJcIiksXHJcbiAgICAgICAgY2hhaW4gPSBQcm9taXNlLnJlc29sdmUoZHBzKTtcclxuXHJcbiAgICBudW1Db250YWluZXIuaW5uZXJIVE1MID0gXCJcIjtcclxuXHJcbiAgICBpZiAoZHBzLmdyYXBoT3B0LmFuaW1hdGVIaWRlKSB7XHJcbiAgICAgICAgbm9BbmlQcm9taXNlQ2hhaW4oZHBzLCBjaGFpbik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGFuaVByb21pc2VDaGFpbihkcHMsIGNoYWluKTtcclxuICAgIH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
