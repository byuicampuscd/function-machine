"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};!function(e,t){e.wand=t()}("undefined"!=typeof window?window:void 0,function(){var e={apndr:function(e,t){if("object"!==("undefined"==typeof e?"undefined":_typeof(e))||"object"!==("undefined"==typeof t?"undefined":_typeof(t))||Array.isArray(t))if("object"!==("undefined"==typeof e?"undefined":_typeof(e)))console.error("First parameter passed is not an object element.");else if("object"!==("undefined"==typeof t?"undefined":_typeof(t)))"string"!=typeof t&&"number"!=typeof t||e.appendChild(this.txt(t));else if(Array.isArray(t))for(var r=t,o=0;o<r.length;o++)this.apndr(e,r[o]);else console.error("Parameters are not compatible in the lib.apndr function.  Hit the arrow on the left for call stack.");else e.appendChild(t)},querApndr:function(e,t,r){var o=document.querySelector(e);if(null!=o){if(Array.isArray(t))for(var n=t,i=0;i<n.length;i++)this.apndr(o,this.crtElm(n[i]));else t&&this.apndr(o,this.crtElm(t,r));return o}console.error("No tag exists in the DOM. Hit the arrow on the left for call stack.")},querAttr:function(e,t,r){var o=document.querySelector(e);null==o?console.error("No tag exists in the DOM. Hit the arrow on the left for call stack."):t&&o.setAttribute(t,r)},txt:function(e){return"string"==typeof e?document.createTextNode(e):"number"==typeof e?document.createTextNode(e.toString()):void console.error("Parameter passed to lib.txt is not a string nor a number.  Hit the arrow on the left for call stack.")},crtElm:function(e,t){var r,o=document.createElement(e);return t&&("string"==typeof t?(r=this.txt(t),this.apndr(o,r)):console.error("Must pass a string as the second param in lib.crtElm function.  Hit the arrow on the left for call stack.")),o}};return e});
"use strict";!function(){function n(n){console.log(n)}function r(n){for(var r=[n];n;n=n.parentNode)r.unshift(n);return r}function t(n,t){var a=r(n),o=r(t);if(a[0]!=o[0])throw"No common ancestor!";for(var d=0;d<a.length;d++)if(a[d]!=o[d])return a[d-1]}for(var a,o,d,e,c=wand.querApndr("tbody"),i=15,l=1;i>=l;l++)e=wand.crtElm("input"),a=wand.crtElm("td"),o=wand.crtElm("td"),d=wand.crtElm("tr"),wand.apndr(a,e),wand.apndr(d,[a,o]),wand.apndr(c,d);for(var u=["x^2","x^2","x^2","x^2","x^2","x^3"],f=0;f<u.length;f++){var w=wand.crtElm("div");w.id="equation"+f,katex.render(u[f],w);var g=wand.querApndr("#dropdown");wand.apndr(g,w)}document.onchange=function(r){"select"===r.target.localName&&n(r.target.value)},document.onclick=function(n){var r=n.target.id.indexOf("equation");console.log(n.target,r),n.target.id.indexOf("equation")>-1&&console.log(n.target.id)};var m=t(wand.querApndr("[class*='mathit']"),wand.querApndr("[class*='mathrm'"));console.log(m)}();
//# sourceMappingURL=data:application/json;base64,
