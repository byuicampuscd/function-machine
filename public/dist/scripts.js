"use strict";function startFuncMach(){var n=$("input[type='number']"),t=$("#animate:checked").length>0,e=$("#showGraph:checked").length>0,a=({callback:function(){return new Promise(function(n){n("Graph animation is done!")})},animate:t,showGraph:e,equation:profOpt.equation},[]);$.each(n,function(n,t){var e=$(t).val(),o=profOpt.equation;if(e){var c=o.replace("x","("+e+")"),i=math.eval(c),r=t.getBoundingClientRect(),u={x:e,y:i,beginCoor:{top:r.top,left:r.left},updatePoint:!0};a.push(u)}}),animatorControl(a)}function checkConfig(n){var t;return $.each(professorConfigFile,function(e,a){a.equation===n&&(t=a)}),t}function changePlot(n){window.profOpt=checkConfig(n),$(a).empty("");var t="y = ",e=""+n,a=$("#functionMachine #equ"),o=$("#functionMachine #y");katex.render(t,o[0]),katex.render(e,a[0])}$("select").change(function(n){changePlot(n.target.value)}),$(document).keypress(function(n){13==n.which&&startFuncMach()}),$("input[type='button'][value='Go!']").click(function(){startFuncMach()});
"use strict";$(document).ready(function(){$.getJSON("../funcMachineSettings.json",function(n){window.professorConfigFile=n,$.each(n,function(n,e){var o=$("<option></option>").append(e.name);$(o).val(e.equation),$("select").append(o),0===n&&changePlot(e.equation)})})});
"use strict";function animate(n,a){var e=$("<p></p>").append(a[n].num),t={top:55,right:300},r=aniConfig(a[n].coorData,t,e,alphaid[n],n),i=a[n].inputTag.name.match(/\d+/);startingData.push(a[n].coorData),animationTemplate(r).then(equAnimeDisappear).then(equAppear).then(equAnimeDisappear).then(equAppear).then(createAns).then(animationTemplate).then(function(e){return new Promise(function(t){setTimeout(function(){var o=wand.querApndr("#row"+1*i[0]+" td:nth-child(2)"),p="y = ",u=""+globalEqu,h=e.innerText,m={top:150,right:400};katex.render(p,yPara),katex.render(u,equPara),wand.apndr(o,h),r=aniConfig(a[n].coorData,m,e,"za",0),statusBar.innerText="",statusBar.innerText=">> Plotting answer.",t(r)},3e3)})}).then(animationTemplate)}function animatorControl(n){var a=$("#numContainer");a.innerHTML="";for(var e=0;e<n.length;e++)console.log(n)}
"use strict";
"use strict";!function(){for(var t,p,d,n,r=$("tbody"),a=19,e=1;e<=a;e++)n=$("<input>"),t=$("<td></td>"),p=$("<td></td>"),d=$("<tr></tr>"),$(d).attr("id","row"+e),$(n).attr("name","input"+e).attr("type","number"),$(t).append(n),$(d).append(t).append(p),$(r).append(d)}();
//# sourceMappingURL=data:application/json;base64,
