"use strict";!function(){for(var t,a,d,p,r=$("tbody"),n=10,e=1;e<=n;e++)p=$("<input>"),t=$("<td></td>"),a=$("<td></td>"),d=$("<tr></tr>"),$(d).attr("id","row"+e),$(p).attr("name","input"+e).attr("type","number"),$(a).attr("id","yval"+e),$(t).append(p),$(d).append(t).append(a),$(r).append(d)}();
"use strict";var plotGraph=function(){function t(t){return function(e){var n=(0).toFixed(2);return function(e){var a=t.x*e;this.textContent="( "+a.toFixed(2)+", "+n+")"}}}function e(t){return function(){var e=t.x,n=t.y;return function(t){this.textContent="( "+e+", "+(n*t).toFixed(2)+")"}}}function n(t){return"graphPoint"+t}function a(t){var e=d3.selectAll(u).append("g").attr("class","point").attr("id",n(t.id));return e.append("circle").attr("r",4).attr("cx",0).attr("cy",0),e.append("text").text("(0, 0)").attr("x",5).attr("y",15),e.attr("transform","translate("+d(0)+" "+p(0)+")"),e}function r(r,i){var o,c,s=r.datapoints[r.currentRound];document.querySelectorAll(u+" .graph .line").length>0;r.datapoints.forEach(function(t){t.updatePoint&&d3.select("#"+n(t.id)).remove()}),r.graphOpt.graphHide?d3.select(u+" .graph .line").attr("display","none"):d3.select(u+" .graph .line").attr("display","inline"),s.updatePoint?(o=a(s),r.graphOpt.duration<=.5?(o.attr("transform","translate("+d(s.x)+" "+p(s.y)+")"),o.select("text").text("("+s.x+", "+s.y+")"),i(r)):(c=o.transition().duration(1e3*r.graphOpt.duration).ease("cubic-out").attr("transform","translate("+d(s.x)+" "+p(0)+")"),c.select("text").tween("text",t(s)),c.transition().duration(1e3*r.graphOpt.duration).ease("cubic-out").attr("transform","translate("+d(s.x)+" "+p(s.y)+")").each("end",function(){i(r)}).select("text").tween("text",e(s)))):i(r)}function i(t,e){var n=t.graphOpt,a={target:e,data:[{fn:n.equation,skipTip:!0}],xAxis:{domain:[n.view.x.min,n.view.x.max]},yAxis:{domain:[n.view.y.min,n.view.y.max]},disableZoom:!0,grid:!0,annotations:[{x:0,text:"y axis"},{y:0,text:"x axis"}]};o=e,u=o+" .content",c=n.equation,s=functionPlot(a),d=s.meta.xScale,p=s.meta.yScale,d3.selectAll(u+" .point").remove()}var o,u,c,s,d,p;return{update:r,setup:i}}();
"use strict";$(document).ready(function(){function t(t,e){var n=JSON.stringify(e),i=$("<option></option>").append(t.name);$(i).val(t.equation).attr("data-profOpt",n),$("select").append(i)}if(""==location.search){var e=[];e.push("file=funcMachineSettings")}else{var e=[],n=location.search.substring(1);e=n.split("&")}var i={};e.forEach(function(t){var e=t.split("=");i[e[0]]=e[1]}),$.getJSON(i.file+".json",function(e){var n;n=i.load?e[i.load]:e.general,$("#title").html(n.title),$("#instructionText").html(n.instructions),window.professorConfigFile=n.equations,$.each(n.equations,function(e,n){var i={graphOpt:n};t(n,i),0===e&&(plotGraph.setup(i,"#graph"),document.querySelector(".graph").firstChild.style.display="none",$("input#showGraph[type='checkbox']").click(function(t){var e=t.target.checked;e?document.querySelector(".graph").firstChild.style.display="block":document.querySelector(".graph").firstChild.style.display="none"}),changePlot(n.equation))})}).fail(function(){$("#status p").append("Add a query string")})});
"use strict";function runAnimation(n,t){return function(a){var e=a.datapoints[a.currentRound],i=e.element;return new Promise(function(e){$(i).html(t).css({animation:""+n+a.currentRound+" "+aniDuration+"s ease-in-out"}).one("animationend",function(n){e(a)})})}}function statusMessage(n){var t=$("#status p");return t.html("").css({fontWeight:"normal",color:"black"}),function(a){return new Promise(function(e){t.html(n),e(a)})}}function replaceXEqu(n){return new Promise(function(t){n.graphOpt.hideEquation?t(n):$(equPara).css("animation","textDisappear "+.5*aniDuration+"s ease-in-out").one("animationend",function(a){$(equPara).css("opacity",0),t(n)})})}function showEvaluateEqu(n){var t=n.datapoints[n.currentRound],a=t.changeEqu;return new Promise(function(t){n.graphOpt.hideEquation?t(n):(katex.render(""+a,equPara),$(equPara).css("animation","textAppear "+.5*aniDuration+"s ease-in-out").one("animationend",function(a){$(equPara).css("opacity",1),t(n)}))})}function showYAns(n){var t=n.datapoints[n.currentRound];return new Promise(function(a){n.graphOpt.hideEquation?a(n):$(equPara).css("animation","textDisappear "+.5*aniDuration+"s ease-in-out").one("animationend",function(){$(equPara).css("opacity",0),katex.render(""+t.y,equPara),a(n)})})}function showEquationAgain(n){return new Promise(function(t){n.graphOpt.hideEquation?t(n):$(equPara).css("animation","textAppear "+.5*aniDuration+"s ease-in-out").one("animationend",function(a){$(equPara).css("opacity",1),t(n)})})}function placeYValue(n){var t=n.datapoints[n.currentRound];return new Promise(function(a){var e=$("td#yval"+(t.id+1))[0];$(e).html(""),$(e).append("<p>"+t.y+"</p>"),a(n)})}function resetRound(n){return new Promise(function(t){n.graphOpt.hideEquation?t(n):$(equPara).css("animation","textDisappear "+.15*aniDuration+"s ease-in-out").one("animationend",function(a){$(equPara).css("opacity",0),katex.render(""+profOpt.latex,equPara),t(n)})})}function showDefaultEqu(n){return new Promise(function(t){n.graphOpt.hideEquation?t(n):$(equPara).css("animation","textAppear "+.15*aniDuration+"s ease-in-out").one("animationend",function(a){$(equPara).css("opacity",1),t(n)})})}function plotter(n){return new Promise(function(t){plotGraph.update(n,function(){t(n)})})}function updateRound(n){var t=n.datapoints[n.currentRound];return new Promise(function(a){n.currentRound+=1,t.updatePoint=!1,a(n)})}function animateFuncMachine(n){return new Promise(function(t){$("#functionMachine").css({"background-image":"url(./img/functionMachineAni.gif)"}),t(n)})}function stopAniFuncMachine(n){return new Promise(function(t){$("#functionMachine").css({"background-image":"url(./img/functionMachineStill.gif)"}),t(n)})}function miniAni(n){return new Promise(function(t){var a=n.datapoints[n.currentRound],e=a.y,i=$("<p>"+e+"</p>");$(i).css({fontSize:"20px"}),$("body").append(i),i.css({position:"absolute",opacity:0,left:630,top:160}).animate({opacity:1,top:200},function(a){i.css({display:"none"}),t(n)})})}function aniPromiseChain(n,t){n.datapoints.forEach(function(n){n.updatePoint===!0&&(t=t.then(runAnimation("xToMachine",n.x)).then(animateFuncMachine).then(statusMessage("Calculating")).then(replaceXEqu).then(showEvaluateEqu).then(showYAns).then(showEquationAgain).then(stopAniFuncMachine).then(statusMessage("")).then(miniAni).then(runAnimation("machineToY",n.y)).then(placeYValue).then(runAnimation("yToStatusBar","("+n.x+","+n.y+")")).then(statusMessage("Plotting ("+n.x+","+n.y+")")).then(plotter).then(statusMessage("")).then(resetRound).then(showDefaultEqu)),t=t.then(updateRound)})}function animateHide(n,t){n.datapoints.forEach(function(n){n.updatePoint===!0&&(t=t.then(placeYValue).then(statusMessage("Plotting ("+n.x+","+n.y+")")).then(plotter)),t=t.then(updateRound)})}function animatorControl(n){var t=$("#numContainer"),a=Promise.resolve(n);t.innerHTML="",.5===aniDuration?animateHide(n,a):aniPromiseChain(n,a)}var equPara=$("#functionMachine #equ")[0],rangeSpeed=$("#animate").val(),aniDuration=5/rangeSpeed;$("#animate").change(function(n){aniDuration=5/n.target.value});
"use strict";function checkConfig(t){var n;return $.each(professorConfigFile,function(e,o){o.equation===t&&(n=o)}),n}function clearValues(){var t=$("input[type='number']"),n=$("tr td:nth-of-type(2)");t.each(function(t,n){n.value=""}),n.each(function(t,n){n.innerHTML=""})}function changePlot(t){xMemory=[],clearValues(),window.profOpt=checkConfig(t);var n=$("#functionMachine #equ")[0];$(n).empty(),window.profOpt.hideEquation===!1?katex.render(window.profOpt.latex,n):window.profOpt.hideEquation===!0&&$(n).append("<h2>Mystery Equation</h2>").css({paddingTop:"5px"})}function stairStep(t){var n=280,e=document.styleSheets[document.styleSheets.length-1];e.insertRule("@keyframes "+t.name+" {\n                            0% {\n                                opacity: 1;\n                                top: "+t.startTopOff+"px;\n                                left: "+t.startLeftOff+"px;\n                            }\n                            10% {\n                                opacity: 1;\n                            }\n                            33% {\n                                top: "+t.startTopOff+"px;\n                                left: "+n+"px;\n                            }\n                            66% {\n                                top: "+t.endTopOff+"px;\n                                left: "+n+"px;\n                            }\n                            90% {\n                                opacity: 1;\n                            }\n                            100% {\n                                opacity: 0;\n                                top: "+t.endTopOff+"px;\n                                left: "+t.endLeftOff+"px;\n                            }\n                        }",e.cssRules.length)}function makeXToMachine(t,n){stairStep({startTopOff:t.top+10,startLeftOff:t.left+30,endTopOff:150,endLeftOff:450,name:"xToMachine"+n})}function makeMachineToY(t,n){stairStep({startTopOff:200,startLeftOff:630,endTopOff:t.top+10,endLeftOff:t.right+5,name:"machineToY"+n})}function makeYToStatusBar(t,n){stairStep({startTopOff:t.top+5,startLeftOff:t.right+10,endTopOff:50,endLeftOff:400,name:"yToStatusBar"+n})}function UserException(t,n){this.message=t,this.errorNum=n,this.name="UserException"}function setUpObject(t,n,e){t.each(function(t){var o,a,i=$(this).val();if(i){if(o=+i,a=o.toFixed(profOpt.rounding),$(this).val(a),!(profOpt.view.x.min<=a&&a<=profOpt.view.x.max))throw new UserException("out of window",i);var r=n.equation.replace(/x/g,"("+a+")"),p=math.eval(r);if("number"!=typeof p)throw new UserException("out of domain",i);var u=(this.getBoundingClientRect(),{x:a,y:p.toFixed(profOpt.rounding),id:t,changeEqu:profOpt.latex.replace("x","("+a+")"),updatePoint:xMemory[t]!==a,element:$("#numContainer p").get(t)});if(1/0===p)throw new UserException("undefined value",i);u.updatePoint&&$("td#yval"+(t+1)).html(""),xMemory[t]=a,e.datapoints.push(u)}})}function startFuncMach(){var t=$("input[type='number']"),n={equation:profOpt.equation,hideEquation:profOpt.hideEquation,view:profOpt.view,duration:aniDuration},e={datapoints:[],currentRound:0,graphOpt:n};try{setUpObject(t,n,e),animatorControl(e)}catch(o){xMemory=[],$("#status p").html(o.errorNum+" x-value "+o.message+".").css({fontWeight:"bold",color:"#b62727"})}}function cleanInputs(){var t=$("input[type='number']"),n=[];t.each(function(t){var e=$(this).val();""!==e&&(n.push(e),$(this).val(""))}),t.each(function(t){t<n.length?$(this).val(n[t]):$(this).val("")})}for(var xMemory=[],inputs=document.querySelectorAll("input[type='number']"),inputCount=inputs.length,runMaster=!0,run=!0,i=0;i<inputs.length;i++)inputs[i].onkeyup=function(t){t.srcElement.value;69===t.which&&(t.target.value="",$("#status p").html("Can't do that bro!"))};for(var i=0;i<inputCount;i++){xMemory[i]=null;var inputCoor=inputs[i].getBoundingClientRect();makeXToMachine(inputCoor,i),makeMachineToY(inputCoor,i),makeYToStatusBar(inputCoor,i),$("#numContainer").append($("<p></p>"))}$("#closeHelp").click(function(t){$(t.target.parentElement).fadeOut(100),$("#shade").fadeOut(200),localStorage.firstTimeFunctionMachine=!1}),$("#openHelp").click(function(t){$("#instructions").fadeIn(100),$("#shade").fadeIn(1e3)}),$(document).ready(function(t){try{var n=localStorage.firstTimeFunctionMachine}catch(t){console.error(t)}"false"===n&&($("#instructions").hide(),$("#shade").hide())}),$("select").change(function(t){var n=$('option[value="'+t.target.value+'"]'),e=JSON.parse(n.attr("data-profopt"));plotGraph.setup(e,"#graph"),changePlot(t.target.value)}),$(document).keypress(function(t){13==t.which&&runMaster&&(cleanInputs(),startFuncMach())}),$("input[type='button'][value='Go!']").click(function(){runMaster&&(cleanInputs(),startFuncMach())});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
