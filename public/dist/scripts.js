"use strict";$(document).ready(function(){$.getJSON("../funcMachineSettings.json",function(n){window.professorConfigFile=n,$.each(n,function(n,e){var o=$("<option></option>").append(e.name);$(o).val(e.equation),$("select").append(o),0===n&&changePlot(e.equation)})})});
"use strict";function startFuncMach(){var n=$("input[type='number']"),t=$("#animate:checked").length>0,e=$("#showGraph:checked").length>0,o=({callback:function(){return new Promise(function(n){n("Graph animation is done!")})},animate:t,showGraph:e,equation:profOpt.equation},[]);$.each(n,function(n,t){var e=$(t).val(),a=profOpt.equation;if(e){var c=a.replace("x","("+e+")"),i=math.eval(c),r=t.getBoundingClientRect(),u={x:e,y:i,updatePoint:!0,element:$("<p>"+e+"</p>")[0],beginCoor:{top:r.top,left:r.left},endCoor:{top:55,right:300}};o.push(u)}}),animatorControl(o)}function checkConfig(n){var t;return $.each(professorConfigFile,function(e,o){o.equation===n&&(t=o)}),t}function changePlot(n){window.profOpt=checkConfig(n),$(o).empty("");var t="y = ",e=""+n,o=$("#functionMachine #equ"),a=$("#functionMachine #y");katex.render(t,a[0]),katex.render(e,o[0])}$("select").change(function(n){changePlot(n.target.value)}),$(document).keypress(function(n){13==n.which&&startFuncMach()}),$("input[type='button'][value='Go!']").click(function(){startFuncMach()});
"use strict";function PromiseInit(e){return Promise.resolve(e)}function animationTemplate(e){console.log(e);var t=e.beginCoor.top+5,n=e.beginCoor.left+30,o=(e.endCoor.top,e.endCoor.left,$("#numContainer")),s=e.element;$(s).css("position","absolute").css("top",t+"px").css("left",n+"px"),$(o).append(s)}function animatorControl(e){var t=$("#numContainer");t.innerHTML="";for(var n=0;n<e.length;n++)PromiseInit(e[n]).then(animationTemplate)}var statusBar=$("#status p"),lastSheet=document.styleSheets[document.styleSheets.length-1];
"use strict";!function(){for(var t,p,d,n,r=$("tbody"),a=19,e=1;a>=e;e++)n=$("<input>"),t=$("<td></td>"),p=$("<td></td>"),d=$("<tr></tr>"),$(d).attr("id","row"+e),$(n).attr("name","input"+e).attr("type","number"),$(t).append(n),$(d).append(t).append(p),$(r).append(d)}();
//# sourceMappingURL=data:application/json;base64,
