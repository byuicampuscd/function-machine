"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol?"symbol":typeof t};!function(t,e){t.wand=e()}("undefined"!=typeof window?window:void 0,function(){var t={apndr:function(t,e){if("object"!==("undefined"==typeof t?"undefined":_typeof(t))||"object"!==("undefined"==typeof e?"undefined":_typeof(e))||Array.isArray(e))if("object"!==("undefined"==typeof t?"undefined":_typeof(t)))console.error("First parameter passed is not an object element.");else if("object"!==("undefined"==typeof e?"undefined":_typeof(e)))"string"!=typeof e&&"number"!=typeof e||t.appendChild(this.txt(e));else if(Array.isArray(e))for(var r=e,n=0;n<r.length;n++)this.apndr(t,r[n]);else console.error("Parameters are not compatible in the lib.apndr function.  Hit the arrow on the left for call stack.");else t.appendChild(e)},querApndr:function(t,e,r){var n=document.querySelector(t);if(null!=n){if(Array.isArray(e))for(var o=e,i=0;i<o.length;i++)this.apndr(n,this.crtElm(o[i]));else r?this.apndr(n,this.crtElm(e,r)):this.apndr(n,e);return n}console.error("No tag exists in the DOM. Hit the arrow on the left for call stack.")},querAttr:function(t,e,r){var n=document.querySelector(t);null==n?console.error("No tag exists in the DOM. Hit the arrow on the left for call stack."):e&&n.setAttribute(e,r)},txt:function(t){return"string"==typeof t?document.createTextNode(t):"number"==typeof t?document.createTextNode(t.toString()):void console.error("Parameter passed to lib.txt is not a string nor a number.  Hit the arrow on the left for call stack.")},crtElm:function(t,e){var r,n=document.createElement(t);return e&&("string"==typeof e?(r=this.txt(e),this.apndr(n,r)):console.error("Must pass a string as the second param in lib.crtElm function.  Hit the arrow on the left for call stack.")),n}};return t});
"use strict";function changePlot(n){equPara.innerText="";var a="y = "+n;katex.render(a,equPara),globalEqu=n,graphConfig.equation=a}function dispConfig(n){var a=JSON.parse(n),e=wand.crtElm("select");e.name="equDrop";for(var o=0;o<a.length;o++){var r=wand.crtElm("option",a[o].name);r.value=a[o].equation,wand.apndr(e,r),wand.querApndr("#dropdown",e),0===o&&changePlot(a[o].equation)}}function loadConfig(n,a){var e=new XMLHttpRequest;e.onreadystatechange=function(){4==e.readyState&&200==e.status&&(config=e.responseText,n(config),graphConfig.appConfig=JSON.parse(config))},e.open("GET",a,!0),e.send()}var config,globalEqu,equPara=wand.querApndr("#functionMachine p"),graphConfig={};loadConfig(dispConfig,"../funcMachineSettings.json");
"use strict";function animateToStatusBar(){console.log("Animate to status bar and pass the information to the graph function")}function equAppear(t){return new Promise(function(e){setTimeout(function(){equPara.innerHTML="",equPara.style.opacity=0,katex.render("y = "+t,equPara),equPara.style.animation="textAppear 1s ease-in-out",equPara.style.opacity=1,e(t)},1500)})}function equAnimeDisappear(t){return new Promise(function(e){var n;"object"===("undefined"==typeof t?"undefined":_typeof(t))?(n=globalEqu.replace("x","*"+t.innerText),statusBar.innerText="",statusBar.innerText=">> Calculating"):"string"==typeof t&&(n=math.eval(t)),setTimeout(function(){equPara.style.animation="textDisappear 1.5s ease-in-out",e(n)},3e3)})}function animationTemplate(t,e,n,a,o){return new Promise(function(i){var r=t.top+5,p=t.right-30,u=e.top,s=e.right,l=246;n.style.position="absolute",n.style.top=r+"px",n.style.left=p+"px",lastSheet.insertRule("@keyframes toFuncMachine"+a+" {\n                            0% {\n                                opacity: 0;\n                                top: "+r+"px;\n                                left: "+p+"px;\n                            }\n                            10% {\n                                opacity: 1;\n                            }\n                            33% {\n                                top: "+r+"px;\n                                left: "+l+"px;\n                            }\n                            66% {\n                                top: "+u+"px;\n                                left: "+l+"px;\n                            }\n                            90% {\n                                opacity: 1;\n                            }\n                            100% {\n                                opacity: 0;\n                                top: "+u+"px;\n                                left: "+s+"px;\n                            }\n                        }",lastSheet.cssRules.length),n.style.animation="toFuncMachine"+a+" 3s ease-in-out "+7*o+"s",n.style.opacity="0",n.style.zIndex="100",window.setTimeout(function(){i(n)},3e3*o)})}function animatorControl(t){var e=wand.querApndr("#numContainer");e.innerHTML="";for(var n=0;n<t.length;n++){var a=wand.crtElm("p",t[n].num),o={top:55,right:300};animationTemplate(t[n].coorData,o,a,alphaid[n],n).then(equAnimeDisappear).then(equAppear).then(equAnimeDisappear).then(equAppear),wand.apndr(e,a)}}var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol?"symbol":typeof t},lastSheet=document.styleSheets[document.styleSheets.length-1],alphaid=["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r"],statusBar=wand.querApndr("#status p");
"use strict";!function(){var n=["input1","input2","input3","input4","input5","input6","input7","input8","input9","input10","input11","input12","input13","input14","input15","input16","input17","input18","input19"],t=[];document.onchange=function(n){"select"===n.target.localName&&changePlot(n.target.value)},document.onclick=function(u){if("Go!"===u.target.value){t=[];for(var i=0;i<n.length;i++){var a=wand.querApndr("[name='"+n[i]+"']");if(a.value){var p={};p.coorData=a.getBoundingClientRect(),p.num=a.value,t.push(p),graphConfig.aniData=p}}animatorControl(t)}}}();
"use strict";!function(){for(var n,d,r,t,a=wand.querApndr("tbody"),w=19,p=1;w>=p;p++)t=wand.crtElm("input"),n=wand.crtElm("td"),d=wand.crtElm("td"),r=wand.crtElm("tr"),t.name="input"+p,t.type="number",wand.apndr(n,t),wand.apndr(r,[n,d]),wand.apndr(a,r)}();
//# sourceMappingURL=data:application/json;base64,
