"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol?"symbol":typeof t};!function(t,e){t.wand=e()}("undefined"!=typeof window?window:void 0,function(){var t={apndr:function(t,e){if("object"!==("undefined"==typeof t?"undefined":_typeof(t))||"object"!==("undefined"==typeof e?"undefined":_typeof(e))||Array.isArray(e))if("object"!==("undefined"==typeof t?"undefined":_typeof(t)))console.error("First parameter passed is not an object element.");else if("object"!==("undefined"==typeof e?"undefined":_typeof(e)))"string"!=typeof e&&"number"!=typeof e||t.appendChild(this.txt(e));else if(Array.isArray(e))for(var r=e,n=0;n<r.length;n++)this.apndr(t,r[n]);else console.error("Parameters are not compatible in the lib.apndr function.  Hit the arrow on the left for call stack.");else t.appendChild(e)},querApndr:function(t,e,r){var n=document.querySelector(t);if(null!=n){if(Array.isArray(e))for(var o=e,i=0;i<o.length;i++)this.apndr(n,this.crtElm(o[i]));else r?this.apndr(n,this.crtElm(e,r)):this.apndr(n,e);return n}console.error("No tag exists in the DOM. Hit the arrow on the left for call stack.")},querAttr:function(t,e,r){var n=document.querySelector(t);null==n?console.error("No tag exists in the DOM. Hit the arrow on the left for call stack."):e&&n.setAttribute(e,r)},txt:function(t){return"string"==typeof t?document.createTextNode(t):"number"==typeof t?document.createTextNode(t.toString()):void console.error("Parameter passed to lib.txt is not a string nor a number.  Hit the arrow on the left for call stack.")},crtElm:function(t,e){var r,n=document.createElement(t);return e&&("string"==typeof e?(r=this.txt(e),this.apndr(n,r)):console.error("Must pass a string as the second param in lib.crtElm function.  Hit the arrow on the left for call stack.")),n}};return t});
"use strict";function changePlot(n){equPara.innerText="",katex.render("y = "+n,equPara),globalEqu=n}function dispConfig(n){var e=JSON.parse(n),a=wand.crtElm("select");a.name="equDrop";for(var o=0;o<e.length;o++){var t=wand.crtElm("option",e[o].name);t.value=e[o].equation,wand.apndr(a,t),wand.querApndr("#dropdown",a),0===o&&changePlot(e[o].equation)}}function loadConfig(n,e){var a=new XMLHttpRequest;a.onreadystatechange=function(){4==a.readyState&&200==a.status&&(config=a.responseText,n(config))},a.open("GET",e,!0),a.send()}var config,globalEqu,equPara=wand.querApndr("#functionMachine p");loadConfig(dispConfig,"../funcMachineSettings.json");
"use strict";function equAnimeDisappear(n,e,a,t){var i=n;i.style.animation="textDisappear 1.5s ease-in-out",n.addEventListener("animationend",function(){equPara.innerText="",a(i,e,t)})}function equAnimeAppear(n,e,a){var t=n;t.style.opacity=0,katex.render("y = "+e,equPara),t.style.animation="textAppear 1s ease-in-out",t.addEventListener("animationend",function(){if(t.style.opacity=1,"final"===a)return statusBar.innerText="",void wand.apndr(statusBar,">> Finished Calculations");if("stop"!==a){var i=math.eval(e);equAnimeDisappear(n,i,equAnimeAppear,"stop")}else equAnimeDisappear(n,globalEqu,equAnimeAppear,"final")})}function toFuncMachEnd(n){var e=globalEqu.replace("x","*"+n.target.innerText);equAnimeDisappear(equPara,e,equAnimeAppear),wand.apndr(statusBar,""),wand.apndr(statusBar,">> Calculating")}function animeToFuncMach(n,e,a,t){var i=e.right-50,r=e.top+7;return n.style.position="absolute",n.style.top=r+"px",n.style.left=i+"px",n.className="anime"+a,lastSheet.insertRule("@keyframes toFuncMachine"+a+" {\n                            0% {\n                                opacity: 0;\n                                top: "+r+"px;\n                                left: "+i+"px;\n                            }\n                            10% {\n                                opacity: 1;\n                            }\n                            33% {\n                                top: "+r+"px;\n                                left: 240px;\n                            }\n                            66% {\n                                top: 55px;\n                                left: 240px;\n                            }\n                            90% {\n                                opacity: 1;\n                            }\n                            100% {\n                                opacity: 0;\n                                top: 55px;\n                                left: 300px;\n                            }\n                        }",lastSheet.cssRules.length),n.style.animation="toFuncMachine"+a+" 3s ease-in-out "+7*t[0]+"s 1",n.style.opacity="0",n.style.zIndex="100",n.addEventListener("animationend",toFuncMachEnd),n}function animator(n){var e=wand.querApndr("#numContainer");e.innerHTML="";for(var a=0;a<n.length;a++){var t=wand.crtElm("p",n[a].num),i=animeToFuncMach(t,n[a].coorData,alphaid[a],[a]);wand.apndr(e,i)}}var lastSheet=document.styleSheets[document.styleSheets.length-1],alphaid=["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r"],statusBar=wand.querApndr("#status p");
"use strict";!function(){var n=["input1","input2","input3","input4","input5","input6","input7","input8","input9","input10","input11","input12","input13","input14","input15","input16","input17","input18","input19"],t=[];document.onchange=function(n){"select"===n.target.localName&&(changePlot(n.target.value),console.log(globalEqu))},document.onclick=function(u){if("Go!"===u.target.value){t=[];for(var i=0;i<n.length;i++){var a=wand.querApndr("[name='"+n[i]+"']");if(a.value){var e={};e.coorData=a.getBoundingClientRect(),e.num=a.value,t.push(e)}}animator(t)}}}();
"use strict";!function(){for(var n,d,r,t,a=wand.querApndr("tbody"),w=19,p=1;w>=p;p++)t=wand.crtElm("input"),n=wand.crtElm("td"),d=wand.crtElm("td"),r=wand.crtElm("tr"),t.name="input"+p,t.type="number",wand.apndr(n,t),wand.apndr(r,[n,d]),wand.apndr(a,r)}();
//# sourceMappingURL=data:application/json;base64,
